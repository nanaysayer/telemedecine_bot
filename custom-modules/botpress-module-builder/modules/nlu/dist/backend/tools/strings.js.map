{"version":3,"sources":["tools/strings.ts"],"names":["ngram","value","n","nGrams","index","length","push","slice","vocabNGram","tokens","plainTokens","map","x","replace","filter","gramset","_","chain","flattenDeep","uniq","setSimilarity","a","b","common","intersection","levenshtein","an","bn","matrix","Array","i","row","firstRow","j","charAt","Math","min","damerauLevenshtein","maxDist","alphaMap","DB","k","l","cost","Infinity","countAlpha","cantidate","toLowerCase","match","countNum","candidate","countSpecial","replaceConsecutiveSpaces","input"],"mappings":"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","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import _ from 'lodash'\n\n/** Splits a string in all its N-grams */\nexport function ngram(value: string, n: number): string[] {\n  const nGrams: string[] = []\n  let index = value.length - n + 1\n\n  while (index--) {\n    nGrams.push(value.slice(index, index + n))\n  }\n\n  return nGrams\n}\n\nexport function vocabNGram(tokens: string[]): string[] {\n  const plainTokens = tokens\n    .map(x => x.replace('\\u2581', '')) // We want to discover real language-specific chars\n    .filter(x => x.length > 1) // We want to exclude tokens that represent ponctuation etc (tokenizers will often split them alone)\n\n  // We build a gramset, which is essentially a list of all the unique bigrams and trigrams\n  // We'll create entirely new words from those grams\n  const gramset = _.chain(plainTokens)\n    .map(x => [ngram(x, 1), ngram(x, 2)])\n    .flattenDeep()\n    .uniq()\n    .value()\n\n  return (gramset as never) as string[]\n}\n\n/** Returns the similarity of two sets of strings in percentage */\nexport function setSimilarity(a: string[], b: string[]): number {\n  const common = _.intersection(a, b).length\n  return common / (a.length + b.length - common)\n}\n\n/**\n * Returns the levenshtein distance between two strings\n * @returns the # of operations required to go from a to b\n */\nexport function levenshtein(a: string, b: string): number {\n  const an = a ? a.length : 0\n  const bn = b ? b.length : 0\n  if (an === 0) {\n    return bn\n  }\n  if (bn === 0) {\n    return an\n  }\n  const matrix = new Array<number[]>(bn + 1)\n  for (let i = 0; i <= bn; ++i) {\n    const row = (matrix[i] = new Array<number>(an + 1))\n    row[0] = i\n  }\n  const firstRow = matrix[0]\n  for (let j = 1; j <= an; ++j) {\n    firstRow[j] = j\n  }\n  for (let i = 1; i <= bn; ++i) {\n    for (let j = 1; j <= an; ++j) {\n      if (b.charAt(i - 1) === a.charAt(j - 1)) {\n        matrix[i][j] = matrix[i - 1][j - 1]\n      } else {\n        matrix[i][j] =\n          Math.min(\n            matrix[i - 1][j - 1], // substitution\n            matrix[i][j - 1], // insertion\n            matrix[i - 1][j] // deletion\n          ) + 1\n      }\n    }\n  }\n  return matrix[bn][an]\n}\n\n/**\n * @param a string\n * @param b string\n * @returns the # of operations required to go from a to b but consider letter swap as 1\n * @see {@link https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance#Distance_with_adjacent_transpositions} for more info\n */\nexport function damerauLevenshtein(a: string, b: string) {\n  const an = a ? a.length : 0\n  const bn = b ? b.length : 0\n  if (an === 0) {\n    return bn\n  }\n  if (bn === 0) {\n    return an\n  }\n\n  const maxDist = an + bn\n  const matrix = new Array(an + 2)\n  const alphaMap = {}\n  for (let i = 0; i < an + 2; i++) {\n    matrix[i] = new Array(bn + 2)\n  }\n  matrix[0][0] = maxDist\n  for (let i = 0; i <= an; i++) {\n    matrix[i + 1][1] = i\n    matrix[i + 1][0] = maxDist\n    alphaMap[a[i]] = 0\n  }\n  for (let j = 0; j <= bn; j++) {\n    matrix[1][j + 1] = j\n    matrix[0][j + 1] = maxDist\n    alphaMap[b[j]] = 0\n  }\n\n  for (let i = 1; i <= an; i++) {\n    let DB = 0\n    for (let j = 1; j <= bn; j++) {\n      const k = alphaMap[b[j - 1]]\n      const l = DB\n      let cost: number\n      if (a[i - 1] === b[j - 1]) {\n        cost = 0\n        DB = j\n      } else {\n        cost = 1\n      }\n      matrix[i + 1][j + 1] = Math.min(\n        matrix[i][j] + cost, // substitution\n        matrix[i + 1][j] + 1, // insertion\n        matrix[i][j + 1] + 1, // deletion\n        matrix[k] ? matrix[k][l] + (i - k - 1) + 1 + (j - l - 1) : Infinity // transposition\n      )\n    }\n    alphaMap[a[i - 1]] = i\n  }\n  return matrix[an + 1][bn + 1]\n}\n\n/**\n * @returns number of alpha characters in a string\n */\nexport const countAlpha = (cantidate: string): number =>\n  (\n    cantidate\n      .toLowerCase()\n      .replace(/\\s/g, '')\n      .match(/[a-z]/g) || []\n  ).length\n\n/**\n * @returns number of digits characters in a string\n */\nexport const countNum = (candidate: string): number => (candidate.replace(/\\s/g, '').match(/[0-9]/g) || []).length\n\n/**\n * @returns number of special characters in a string\n */\nexport const countSpecial = (candidate: string): number =>\n  candidate.replace(/\\s/g, '').length - countAlpha(candidate) - countNum(candidate)\n\nexport const replaceConsecutiveSpaces = (input: string): string => input.replace(/(\\s)+/g, ' ')\n"]}
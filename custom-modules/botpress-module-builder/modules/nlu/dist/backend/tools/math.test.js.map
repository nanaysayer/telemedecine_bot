{"version":3,"sources":["tools/math.test.ts"],"names":["describe","vec0","vec1","vec2","vec3","test","expect","toThrow","toEqual","toBeCloseTo","toBeFalsy","toBeTruthy"],"mappings":"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","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import { allInRange, computeNorm, computeQuantile, scalarMultiply, vectorAdd } from './math'\n\ndescribe('Math utils', () => {\n  const vec0 = []\n  const vec1 = [1, 1, 1]\n  const vec2 = [2, 2, 2]\n  const vec3 = [4, 5, 6]\n\n  test('VectorAdd', () => {\n    expect(() => vectorAdd(vec0, vec2)).toThrow()\n    expect(vectorAdd(vec1, vec2)).toEqual([3, 3, 3])\n    expect(vectorAdd(vec1, vec2)).toEqual([3, 3, 3])\n    expect(vectorAdd(vec1, vec3)).toEqual([5, 6, 7])\n    expect(vectorAdd(vec1, vec2, vec3)).toEqual([7, 8, 9])\n  })\n\n  test('ScalarMultiply', () => {\n    expect(scalarMultiply(vec0, 2)).toEqual([])\n    expect(scalarMultiply(vec1, 2)).toEqual([2, 2, 2])\n  })\n\n  test('ComputeNorm', () => {\n    expect(computeNorm(vec0)).toEqual(0)\n    expect(computeNorm(vec1)).toBeCloseTo(1.73, 2)\n    expect(computeNorm(vec2)).toBeCloseTo(3.46, 2)\n    expect(computeNorm(vec3)).toBeCloseTo(8.77, 2)\n    expect(computeNorm([22, 21, 59, 4, -5, 36])).toBeCloseTo(75.78, 2)\n  })\n\n  test('AllInRange', () => {\n    expect(allInRange([0.45, 0.55], 0.45, 0.55)).toBeFalsy()\n    expect(allInRange([0.44, 0.55], 0.45, 0.55)).toBeFalsy()\n    expect(allInRange([0.45, 0.56], 0.45, 0.55)).toBeFalsy()\n    expect(allInRange([0.4, 0.6], 0.45, 0.55)).toBeFalsy()\n    expect(allInRange([0.46, 0.54], 0.45, 0.55)).toBeTruthy()\n    expect(allInRange([0.32, 0.32, 0.35], 0.3, 0.36)).toBeTruthy()\n    expect(allInRange([], 0.3, 0.36)).toBeTruthy()\n  })\n\n  // TODO add negative test case\n  describe('ComputeQuantile', () => {\n    test('Quartile', () => {\n      expect(computeQuantile(4, 0, 10)).toEqual(1)\n      expect(computeQuantile(4, 1, 10)).toEqual(1)\n      expect(computeQuantile(4, 2, 10)).toEqual(1)\n\n      expect(computeQuantile(4, 3, 10)).toEqual(2)\n      expect(computeQuantile(4, 4, 10)).toEqual(2)\n      expect(computeQuantile(4, 5, 10)).toEqual(2)\n\n      expect(computeQuantile(4, 6, 10)).toEqual(3)\n      expect(computeQuantile(4, 7, 10)).toEqual(3)\n\n      expect(computeQuantile(4, 8, 10)).toEqual(4)\n      expect(computeQuantile(4, 9, 10)).toEqual(4)\n      expect(computeQuantile(4, 10, 10)).toEqual(4)\n      expect(computeQuantile(4, 11, 10)).toEqual(4)\n    })\n\n    test('Tierce with lower bound', () => {\n      expect(computeQuantile(3, 0.5, 2, 0.5)).toEqual(1)\n      expect(computeQuantile(3, 0.52, 2, 0.5)).toEqual(1)\n      expect(computeQuantile(3, 0.9, 2, 0.5)).toEqual(1)\n      expect(computeQuantile(3, 1, 2, 0.5)).toEqual(1)\n\n      expect(computeQuantile(3, 1.2, 2, 0.5)).toEqual(2)\n      expect(computeQuantile(3, 1.4, 2, 0.5)).toEqual(2)\n      expect(computeQuantile(3, 1.5, 2, 0.5)).toEqual(2)\n\n      expect(computeQuantile(3, 1.7, 2, 0.5)).toEqual(3)\n      expect(computeQuantile(3, 2, 2, 0.5)).toEqual(3)\n    })\n  })\n})\n"]}
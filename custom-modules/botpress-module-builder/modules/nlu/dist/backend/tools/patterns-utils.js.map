{"version":3,"sources":["tools/patterns-utils.ts"],"names":["isPatternValid","pattern","RegExp","e","extractPattern","candidate","extracted","padding","res","exec","value","nextPadding","length","nextCandidate","slice","index","push","sourceIndex"],"mappings":";;;;;;;;AAKO,SAASA,cAAT,CAAwBC,OAAxB,EAAkD;AACvD,MAAI;AACF,QAAIC,MAAJ,CAAWD,OAAX;AACA,WAAOA,OAAO,KAAK,EAAnB;AACD,GAHD,CAGE,OAAOE,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF,C,CAED;AACA;;;AACO,SAASC,cAAT,CACLC,SADK,EAELJ,OAFK,EAGLK,SAA6B,GAAG,EAH3B,EAILC,OAAO,GAAG,CAJL,EAKe;AACpB,QAAMC,GAAG,GAAGP,OAAO,CAACQ,IAAR,CAAaJ,SAAb,CAAZ;;AACA,MAAI,CAACG,GAAL,EAAU;AACR,WAAOF,SAAP;AACD;;AAED,QAAMI,KAAK,GAAGF,GAAG,CAAC,CAAD,CAAjB;AACA,QAAMG,WAAW,GAAGJ,OAAO,GAAGG,KAAK,CAACE,MAApC;AACA,QAAMC,aAAa,GAAGR,SAAS,CAACS,KAAV,CAAgB,CAAhB,EAAmBN,GAAG,CAACO,KAAvB,IAAgCV,SAAS,CAACS,KAAV,CAAgBN,GAAG,CAACO,KAAJ,GAAYL,KAAK,CAACE,MAAlC,CAAtD;AACAN,EAAAA,SAAS,CAACU,IAAV,CAAe;AACbN,IAAAA,KADa;AAEbO,IAAAA,WAAW,EAAET,GAAG,CAACO,KAAJ,GAAYR;AAFZ,GAAf;AAKA,SAAOH,cAAc,CAACS,aAAD,EAAgBZ,OAAhB,EAAyBK,SAAzB,EAAoCK,WAApC,CAArB;AACD","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["interface ExtractedPattern {\n  value: string\n  sourceIndex: number\n}\n\nexport function isPatternValid(pattern: string): boolean {\n  try {\n    new RegExp(pattern)\n    return pattern !== ''\n  } catch (e) {\n    return false\n  }\n}\n\n// Padding is necessary due to the recursive nature of this function.\n// Every found pattern is removed from the candidate, therefor the length of the extracted value (padding) is needed to compute sourceIndex of future extractions\nexport function extractPattern(\n  candidate: string,\n  pattern: RegExp,\n  extracted: ExtractedPattern[] = [],\n  padding = 0\n): ExtractedPattern[] {\n  const res = pattern.exec(candidate)\n  if (!res) {\n    return extracted\n  }\n\n  const value = res[0]\n  const nextPadding = padding + value.length\n  const nextCandidate = candidate.slice(0, res.index) + candidate.slice(res.index + value.length)\n  extracted.push({\n    value,\n    sourceIndex: res.index + padding\n  })\n\n  return extractPattern(nextCandidate, pattern, extracted, nextPadding)\n}\n"]}
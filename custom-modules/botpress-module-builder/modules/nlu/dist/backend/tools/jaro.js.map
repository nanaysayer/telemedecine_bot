{"version":3,"sources":["tools/jaro.ts"],"names":["defaults","caseSensitive","similarity","s1","s2","options","m","i","j","length","toUpperCase","range","Math","floor","max","s1Matches","Array","s2Matches","low","high","k","numTrans","weight","l","p"],"mappings":"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","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["const defaults = { caseSensitive: true }\n\n/**\n * Returns the jaro-winkler similarity between two strings\n * @param s1 String A\n * @param s2 String B\n * @returns A number between 0 and 1, where 1 means very similar\n */\nexport default function similarity(s1, s2, options: { caseSensitive: boolean } = defaults): number {\n  let m = 0\n\n  let i\n  let j\n\n  // Exit early if either are empty.\n  if (s1.length === 0 || s2.length === 0) {\n    return 0\n  }\n\n  // Convert to upper if case-sensitive is false.\n  if (!options.caseSensitive) {\n    s1 = s1.toUpperCase()\n    s2 = s2.toUpperCase()\n  }\n\n  // Exit early if they're an exact match.\n  if (s1 === s2) {\n    return 1\n  }\n\n  const range = Math.floor(Math.max(s1.length, s2.length) / 2) - 1\n  const s1Matches = new Array(s1.length)\n  const s2Matches = new Array(s2.length)\n\n  for (i = 0; i < s1.length; i++) {\n    const low = i >= range ? i - range : 0\n    const high = i + range <= s2.length - 1 ? i + range : s2.length - 1\n\n    for (j = low; j <= high; j++) {\n      if (s1Matches[i] !== true && s2Matches[j] !== true && s1[i] === s2[j]) {\n        ++m\n        s1Matches[i] = s2Matches[j] = true\n        break\n      }\n    }\n  }\n\n  // Exit early if no matches were found.\n  if (m === 0) {\n    return 0\n  }\n\n  // Count the transpositions.\n  let k = 0\n  let numTrans = 0\n\n  for (i = 0; i < s1.length; i++) {\n    if (s1Matches[i] === true) {\n      for (j = k; j < s2.length; j++) {\n        if (s2Matches[j] === true) {\n          k = j + 1\n          break\n        }\n      }\n\n      if (s1[i] !== s2[j]) {\n        ++numTrans\n      }\n    }\n  }\n\n  let weight = (m / s1.length + m / s2.length + (m - numTrans / 2) / m) / 3\n  let l = 0\n  const p = 0.1\n\n  if (weight > 0.7) {\n    while (s1[l] === s2[l] && l < 4) {\n      ++l\n    }\n\n    weight = weight + l * p * (1 - weight)\n  }\n\n  return weight\n}\n"]}
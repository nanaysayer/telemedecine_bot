{"version":3,"sources":["tools/tfidf.ts"],"names":["MAX_TFIDF","MIN_TFIDF","tfidf","docs","result","_avgSum","_avgCount","docName","tokens","termsCount","_","countBy","identity","meanTf","mean","values","mapValues","_v","key","docFreq","filter","x","includes","length","tf","idf","Math","max","log","Object","keys","min","v"],"mappings":";;;;;;;;AAAA;;;;AAEO,MAAMA,SAAS,GAAG,CAAlB;;AACA,MAAMC,SAAS,GAAG,GAAlB;;;AAKQ,SAASC,KAAT,CAAeC,IAAf,EAA8C;AAC3D,QAAMC,MAAmB,GAAG,EAA5B;AAEA,QAAMC,OAA6B,GAAG,EAAtC;AACA,QAAMC,SAA+B,GAAG,EAAxC;;AAEA,OAAK,MAAMC,OAAX,IAAsBJ,IAAtB,EAA4B;AAC1B,UAAMK,MAAM,GAAGL,IAAI,CAACI,OAAD,CAAnB;;AAEA,UAAME,UAAU,GAAGC,gBAAEC,OAAF,CAAUH,MAAV,EAAkBE,gBAAEE,QAApB,CAAnB;;AACA,UAAMC,MAAM,GAAGH,gBAAEI,IAAF,CAAOJ,gBAAEK,MAAF,CAASN,UAAT,CAAP,CAAf;;AAEA,UAAMP,KAA2B,GAAGQ,gBAAEM,SAAF,CAAYP,UAAZ,EAAwB,CAACQ,EAAD,EAAKC,GAAL,KAAa;AACvE,YAAMC,OAAO,GAAGT,gBAAEK,MAAF,CAASZ,IAAT,EAAeiB,MAAf,CAAsBC,CAAC,IAAIA,CAAC,CAACC,QAAF,CAAWJ,GAAX,CAA3B,EAA4CK,MAA5D,CADuE,CAGvE;AACA;;;AACA,YAAMC,EAAE,GAAG,MAAO,MAAMf,UAAU,CAACS,GAAD,CAAjB,GAA0BL,MAA3C,CALuE,CAOvE;;AACA,YAAMY,GAAG,GAAGC,IAAI,CAACC,GAAL,CAAS,IAAT,EAAe,CAACD,IAAI,CAACE,GAAL,CAAST,OAAO,GAAGU,MAAM,CAACC,IAAP,CAAY3B,IAAZ,EAAkBoB,MAArC,CAAhB,CAAZ;AACA,YAAMrB,KAAK,GAAGwB,IAAI,CAACC,GAAL,CAAS1B,SAAT,EAAoByB,IAAI,CAACK,GAAL,CAAS/B,SAAT,EAAoBwB,EAAE,GAAGC,GAAzB,CAApB,CAAd;AACApB,MAAAA,OAAO,CAACa,GAAD,CAAP,GAAe,CAACb,OAAO,CAACa,GAAD,CAAP,IAAgB,CAAjB,IAAsBhB,KAArC;AACAI,MAAAA,SAAS,CAACY,GAAD,CAAT,GAAiB,CAACZ,SAAS,CAACY,GAAD,CAAT,IAAkB,CAAnB,IAAwB,CAAzC;AACA,aAAOhB,KAAP;AACD,KAbmC,CAApC;;AAeAA,IAAAA,KAAK,CAAC,SAAD,CAAL,GAAmBQ,gBAAEI,IAAF,CAAOJ,gBAAEK,MAAF,CAASb,KAAT,CAAP,CAAnB;AACAE,IAAAA,MAAM,CAACG,OAAD,CAAN,GAAkBL,KAAlB;AACD;;AAEDE,EAAAA,MAAM,CAAC,SAAD,CAAN,GAAoBM,gBAAEM,SAAF,CAAYX,OAAZ,EAAqB,CAAC2B,CAAD,EAAId,GAAJ,KAAYc,CAAC,GAAG1B,SAAS,CAACY,GAAD,CAA9C,CAApB;AAEA,SAAOd,MAAP;AACD","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import _ from 'lodash'\n\nexport const MAX_TFIDF = 2\nexport const MIN_TFIDF = 0.5\n\nexport type TfidfInput = _.Dictionary<string[]>\nexport type TfidfOutput = _.Dictionary<_.Dictionary<number>>\n\nexport default function tfidf(docs: TfidfInput): TfidfOutput {\n  const result: TfidfOutput = {}\n\n  const _avgSum: _.Dictionary<number> = {}\n  const _avgCount: _.Dictionary<number> = {}\n\n  for (const docName in docs) {\n    const tokens = docs[docName]\n\n    const termsCount = _.countBy(tokens, _.identity)\n    const meanTf = _.mean(_.values(termsCount))!\n\n    const tfidf: _.Dictionary<number> = _.mapValues(termsCount, (_v, key) => {\n      const docFreq = _.values(docs).filter(x => x.includes(key)).length\n\n      // Double-normalization TF with K=0.5\n      // See https://en.wikipedia.org/wiki/Tf%E2%80%93idf\n      const tf = 0.5 + (0.5 * termsCount[key]) / meanTf\n\n      // Smooth IDF\n      const idf = Math.max(0.25, -Math.log(docFreq / Object.keys(docs).length))\n      const tfidf = Math.max(MIN_TFIDF, Math.min(MAX_TFIDF, tf * idf))\n      _avgSum[key] = (_avgSum[key] || 0) + tfidf\n      _avgCount[key] = (_avgCount[key] || 0) + 1\n      return tfidf\n    })\n\n    tfidf['__avg__'] = _.mean(_.values(tfidf))\n    result[docName] = tfidf\n  }\n\n  result['__avg__'] = _.mapValues(_avgSum, (v, key) => v / _avgCount[key])\n\n  return result\n}\n"]}
{"version":3,"sources":["tools/strings.test.ts"],"names":["describe","test","expect","stringUtils","countAlpha","toEqual","countNum","countSpecial","levenshtein","damerauLevenshtein"],"mappings":";;AAAA;;;;;;AAEAA,QAAQ,CAAC,cAAD,EAAiB,MAAM;AAC7BC,EAAAA,IAAI,CAAC,YAAD,EAAe,MAAM;AACvBC,IAAAA,MAAM,CAACC,WAAW,CAACC,UAAZ,CAAuB,EAAvB,CAAD,CAAN,CAAmCC,OAAnC,CAA2C,CAA3C;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACC,UAAZ,CAAuB,GAAvB,CAAD,CAAN,CAAoCC,OAApC,CAA4C,CAA5C;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACC,UAAZ,CAAuB,GAAvB,CAAD,CAAN,CAAoCC,OAApC,CAA4C,CAA5C;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACC,UAAZ,CAAuB,GAAvB,CAAD,CAAN,CAAoCC,OAApC,CAA4C,CAA5C;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACC,UAAZ,CAAuB,MAAvB,CAAD,CAAN,CAAuCC,OAAvC,CAA+C,CAA/C;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACC,UAAZ,CAAuB,OAAvB,CAAD,CAAN,CAAwCC,OAAxC,CAAgD,CAAhD;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACC,UAAZ,CAAuB,MAAvB,CAAD,CAAN,CAAuCC,OAAvC,CAA+C,CAA/C;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACC,UAAZ,CAAuB,MAAvB,CAAD,CAAN,CAAuCC,OAAvC,CAA+C,CAA/C;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACC,UAAZ,CAAuB,iBAAvB,CAAD,CAAN,CAAkDC,OAAlD,CAA0D,EAA1D;AACD,GAVG,CAAJ;AAYAJ,EAAAA,IAAI,CAAC,UAAD,EAAa,MAAM;AACrBC,IAAAA,MAAM,CAACC,WAAW,CAACG,QAAZ,CAAqB,EAArB,CAAD,CAAN,CAAiCD,OAAjC,CAAyC,CAAzC;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACG,QAAZ,CAAqB,GAArB,CAAD,CAAN,CAAkCD,OAAlC,CAA0C,CAA1C;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACG,QAAZ,CAAqB,GAArB,CAAD,CAAN,CAAkCD,OAAlC,CAA0C,CAA1C;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACG,QAAZ,CAAqB,GAArB,CAAD,CAAN,CAAkCD,OAAlC,CAA0C,CAA1C;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACG,QAAZ,CAAqB,MAArB,CAAD,CAAN,CAAqCD,OAArC,CAA6C,CAA7C;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACG,QAAZ,CAAqB,OAArB,CAAD,CAAN,CAAsCD,OAAtC,CAA8C,CAA9C;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACG,QAAZ,CAAqB,MAArB,CAAD,CAAN,CAAqCD,OAArC,CAA6C,CAA7C;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACG,QAAZ,CAAqB,MAArB,CAAD,CAAN,CAAqCD,OAArC,CAA6C,CAA7C;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACG,QAAZ,CAAqB,iBAArB,CAAD,CAAN,CAAgDD,OAAhD,CAAwD,CAAxD;AACD,GAVG,CAAJ;AAYAJ,EAAAA,IAAI,CAAC,cAAD,EAAiB,MAAM;AACzBC,IAAAA,MAAM,CAACC,WAAW,CAACI,YAAZ,CAAyB,EAAzB,CAAD,CAAN,CAAqCF,OAArC,CAA6C,CAA7C;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACI,YAAZ,CAAyB,GAAzB,CAAD,CAAN,CAAsCF,OAAtC,CAA8C,CAA9C;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACI,YAAZ,CAAyB,GAAzB,CAAD,CAAN,CAAsCF,OAAtC,CAA8C,CAA9C;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACI,YAAZ,CAAyB,GAAzB,CAAD,CAAN,CAAsCF,OAAtC,CAA8C,CAA9C;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACI,YAAZ,CAAyB,OAAzB,CAAD,CAAN,CAA0CF,OAA1C,CAAkD,CAAlD;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACI,YAAZ,CAAyB,OAAzB,CAAD,CAAN,CAA0CF,OAA1C,CAAkD,CAAlD;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACI,YAAZ,CAAyB,MAAzB,CAAD,CAAN,CAAyCF,OAAzC,CAAiD,CAAjD;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACI,YAAZ,CAAyB,MAAzB,CAAD,CAAN,CAAyCF,OAAzC,CAAiD,CAAjD;AACAH,IAAAA,MAAM,CAACC,WAAW,CAACI,YAAZ,CAAyB,iBAAzB,CAAD,CAAN,CAAoDF,OAApD,CAA4D,CAA5D;AACD,GAVG,CAAJ;AAYAJ,EAAAA,IAAI,CAAC,aAAD,EAAgB,MAAM;AACxBC,IAAAA,MAAM,CAACC,WAAW,CAACK,WAAZ,CAAwB,SAAxB,EAAmC,QAAnC,CAAD,CAAN,CAAqDH,OAArD,CAA6D,CAA7D,EADwB,CACwC;;AAChEH,IAAAA,MAAM,CAACC,WAAW,CAACK,WAAZ,CAAwB,UAAxB,EAAoC,SAApC,CAAD,CAAN,CAAuDH,OAAvD,CAA+D,CAA/D,EAFwB,CAE0C;;AAClEH,IAAAA,MAAM,CAACC,WAAW,CAACK,WAAZ,CAAwB,SAAxB,EAAmC,SAAnC,CAAD,CAAN,CAAsDH,OAAtD,CAA8D,CAA9D,EAHwB,CAGyC;;AACjEH,IAAAA,MAAM,CAACC,WAAW,CAACK,WAAZ,CAAwB,OAAxB,EAAiC,SAAjC,CAAD,CAAN,CAAoDH,OAApD,CAA4D,CAA5D,EAJwB,CAIuC;;AAC/DH,IAAAA,MAAM,CAACC,WAAW,CAACK,WAAZ,CAAwB,WAAxB,EAAqC,SAArC,CAAD,CAAN,CAAwDH,OAAxD,CAAgE,CAAhE,EALwB,CAK2C;;AACnEH,IAAAA,MAAM,CAACC,WAAW,CAACK,WAAZ,CAAwB,SAAxB,EAAmC,SAAnC,CAAD,CAAN,CAAsDH,OAAtD,CAA8D,CAA9D,EANwB,CAMyC;;AACjEH,IAAAA,MAAM,CAACC,WAAW,CAACK,WAAZ,CAAwB,SAAxB,EAAmC,SAAnC,CAAD,CAAN,CAAsDH,OAAtD,CAA8D,CAA9D,EAPwB,CAOyC;;AACjEH,IAAAA,MAAM,CAACC,WAAW,CAACK,WAAZ,CAAwB,UAAxB,EAAoC,SAApC,CAAD,CAAN,CAAuDH,OAAvD,CAA+D,CAA/D,EARwB,CAQ0C;;AAClEH,IAAAA,MAAM,CAACC,WAAW,CAACK,WAAZ,CAAwB,QAAxB,EAAkC,SAAlC,CAAD,CAAN,CAAqDH,OAArD,CAA6D,CAA7D,EATwB,CASwC;;AAChEH,IAAAA,MAAM,CAACC,WAAW,CAACK,WAAZ,CAAwB,SAAxB,EAAmC,SAAnC,CAAD,CAAN,CAAsDH,OAAtD,CAA8D,CAA9D,EAVwB,CAUyC;;AACjEH,IAAAA,MAAM,CAACC,WAAW,CAACK,WAAZ,CAAwB,QAAxB,EAAkC,SAAlC,CAAD,CAAN,CAAqDH,OAArD,CAA6D,CAA7D,EAXwB,CAWwC;;AAChEH,IAAAA,MAAM,CAACC,WAAW,CAACK,WAAZ,CAAwB,UAAxB,EAAoC,SAApC,CAAD,CAAN,CAAuDH,OAAvD,CAA+D,CAA/D,EAZwB,CAY0C;;AAClEH,IAAAA,MAAM,CAACC,WAAW,CAACK,WAAZ,CAAwB,UAAxB,EAAoC,SAApC,CAAD,CAAN,CAAuDH,OAAvD,CAA+D,CAA/D,EAbwB,CAa0C;;AAClEH,IAAAA,MAAM,CAACC,WAAW,CAACK,WAAZ,CAAwB,SAAxB,EAAmC,SAAnC,CAAD,CAAN,CAAsDH,OAAtD,CAA8D,CAA9D,EAdwB,CAcyC;AAClE,GAfG,CAAJ;AAiBAJ,EAAAA,IAAI,CAAC,qBAAD,EAAwB,MAAM;AAChCC,IAAAA,MAAM,CAACC,WAAW,CAACM,kBAAZ,CAA+B,SAA/B,EAA0C,QAA1C,CAAD,CAAN,CAA4DJ,OAA5D,CAAoE,CAApE,EADgC,CACuC;;AACvEH,IAAAA,MAAM,CAACC,WAAW,CAACM,kBAAZ,CAA+B,UAA/B,EAA2C,SAA3C,CAAD,CAAN,CAA8DJ,OAA9D,CAAsE,CAAtE,EAFgC,CAEyC;;AACzEH,IAAAA,MAAM,CAACC,WAAW,CAACM,kBAAZ,CAA+B,SAA/B,EAA0C,SAA1C,CAAD,CAAN,CAA6DJ,OAA7D,CAAqE,CAArE,EAHgC,CAGwC;;AACxEH,IAAAA,MAAM,CAACC,WAAW,CAACM,kBAAZ,CAA+B,OAA/B,EAAwC,SAAxC,CAAD,CAAN,CAA2DJ,OAA3D,CAAmE,CAAnE,EAJgC,CAIsC;;AACtEH,IAAAA,MAAM,CAACC,WAAW,CAACM,kBAAZ,CAA+B,WAA/B,EAA4C,SAA5C,CAAD,CAAN,CAA+DJ,OAA/D,CAAuE,CAAvE,EALgC,CAK0C;;AAC1EH,IAAAA,MAAM,CAACC,WAAW,CAACM,kBAAZ,CAA+B,SAA/B,EAA0C,SAA1C,CAAD,CAAN,CAA6DJ,OAA7D,CAAqE,CAArE,EANgC,CAMwC;;AACxEH,IAAAA,MAAM,CAACC,WAAW,CAACM,kBAAZ,CAA+B,SAA/B,EAA0C,SAA1C,CAAD,CAAN,CAA6DJ,OAA7D,CAAqE,CAArE,EAPgC,CAOwC;;AACxEH,IAAAA,MAAM,CAACC,WAAW,CAACM,kBAAZ,CAA+B,UAA/B,EAA2C,SAA3C,CAAD,CAAN,CAA8DJ,OAA9D,CAAsE,CAAtE,EARgC,CAQyC;;AACzEH,IAAAA,MAAM,CAACC,WAAW,CAACM,kBAAZ,CAA+B,SAA/B,EAA0C,SAA1C,CAAD,CAAN,CAA6DJ,OAA7D,CAAqE,CAArE,EATgC,CASwC;;AACxEH,IAAAA,MAAM,CAACC,WAAW,CAACM,kBAAZ,CAA+B,QAA/B,EAAyC,SAAzC,CAAD,CAAN,CAA4DJ,OAA5D,CAAoE,CAApE,EAVgC,CAUuC;;AACvEH,IAAAA,MAAM,CAACC,WAAW,CAACM,kBAAZ,CAA+B,UAA/B,EAA2C,SAA3C,CAAD,CAAN,CAA8DJ,OAA9D,CAAsE,CAAtE,EAXgC,CAWyC;;AACzEH,IAAAA,MAAM,CAACC,WAAW,CAACM,kBAAZ,CAA+B,UAA/B,EAA2C,SAA3C,CAAD,CAAN,CAA8DJ,OAA9D,CAAsE,CAAtE,EAZgC,CAYyC;;AACzEH,IAAAA,MAAM,CAACC,WAAW,CAACM,kBAAZ,CAA+B,SAA/B,EAA0C,SAA1C,CAAD,CAAN,CAA6DJ,OAA7D,CAAqE,CAArE,EAbgC,CAawC;AACzE,GAdG,CAAJ;AAeD,CArEO,CAAR","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import * as stringUtils from './strings'\n\ndescribe('String utils', () => {\n  test('countAlpha', () => {\n    expect(stringUtils.countAlpha('')).toEqual(0)\n    expect(stringUtils.countAlpha('A')).toEqual(1)\n    expect(stringUtils.countAlpha('4')).toEqual(0)\n    expect(stringUtils.countAlpha('µ')).toEqual(0)\n    expect(stringUtils.countAlpha('    ')).toEqual(0)\n    expect(stringUtils.countAlpha('  A  ')).toEqual(1)\n    expect(stringUtils.countAlpha('  4 ')).toEqual(0)\n    expect(stringUtils.countAlpha('  µ ')).toEqual(0)\n    expect(stringUtils.countAlpha('MyNaµis åntH0n¥')).toEqual(10)\n  })\n\n  test('countNum', () => {\n    expect(stringUtils.countNum('')).toEqual(0)\n    expect(stringUtils.countNum('A')).toEqual(0)\n    expect(stringUtils.countNum('4')).toEqual(1)\n    expect(stringUtils.countNum('µ')).toEqual(0)\n    expect(stringUtils.countNum('    ')).toEqual(0)\n    expect(stringUtils.countNum('  A  ')).toEqual(0)\n    expect(stringUtils.countNum('  4 ')).toEqual(1)\n    expect(stringUtils.countNum('  µ ')).toEqual(0)\n    expect(stringUtils.countNum('MyNaµis åntH0n¥')).toEqual(1)\n  })\n\n  test('countSpecial', () => {\n    expect(stringUtils.countSpecial('')).toEqual(0)\n    expect(stringUtils.countSpecial('A')).toEqual(0)\n    expect(stringUtils.countSpecial('4')).toEqual(0)\n    expect(stringUtils.countSpecial('µ')).toEqual(1)\n    expect(stringUtils.countSpecial('     ')).toEqual(0)\n    expect(stringUtils.countSpecial('  A  ')).toEqual(0)\n    expect(stringUtils.countSpecial('  4 ')).toEqual(0)\n    expect(stringUtils.countSpecial('  µ ')).toEqual(1)\n    expect(stringUtils.countSpecial('MyNaµis åntH0n¥')).toEqual(3)\n  })\n\n  test('levenshtein', () => {\n    expect(stringUtils.levenshtein('testing', 'tesing')).toEqual(1) // 1 x suppresion\n    expect(stringUtils.levenshtein('testting', 'testing')).toEqual(1) // 1 x addition\n    expect(stringUtils.levenshtein('tasting', 'testing')).toEqual(1) // 1 x substitution\n    expect(stringUtils.levenshtein('teing', 'testing')).toEqual(2) // 2 x suppression\n    expect(stringUtils.levenshtein('tesstting', 'testing')).toEqual(2) // 2 x addition\n    expect(stringUtils.levenshtein('teasing', 'testing')).toEqual(2) // 1 x suppression + 1 x addition\n    expect(stringUtils.levenshtein('teasing', 'testing')).toEqual(2) // 1 x suppression + 1 x addition\n    expect(stringUtils.levenshtein('tastting', 'testing')).toEqual(2) // 1 x substitution + 1 x addition\n    expect(stringUtils.levenshtein('tetsng', 'testing')).toEqual(2) // 1 x suppression + 1 x substitution\n    expect(stringUtils.levenshtein('tetsing', 'testing')).toEqual(2) // letterSwap (1 sup + 1 add)\n    expect(stringUtils.levenshtein('tetsig', 'testing')).toEqual(3) // 1 x suppression + 1 x letterSwap (1 sup + 1 add)\n    expect(stringUtils.levenshtein('tetsinng', 'testing')).toEqual(3) // 1 x letterSwap (1 sup + 1 add) + 1 x addition\n    expect(stringUtils.levenshtein('tetsinng', 'testing')).toEqual(3) // 1 x letterSwap (1 sup + 1 add) + 1 x addition\n    expect(stringUtils.levenshtein('tetsong', 'testing')).toEqual(3) // 1 x letterSwap (1 sup + 1 add) + 1 x substitution\n  })\n\n  test('darmeau levenshtein', () => {\n    expect(stringUtils.damerauLevenshtein('testing', 'tesing')).toEqual(1) // 1 x suppresion\n    expect(stringUtils.damerauLevenshtein('testting', 'testing')).toEqual(1) // 1 x addition\n    expect(stringUtils.damerauLevenshtein('tasting', 'testing')).toEqual(1) // 1 x substitution\n    expect(stringUtils.damerauLevenshtein('teing', 'testing')).toEqual(2) // 2 x suppression\n    expect(stringUtils.damerauLevenshtein('tesstting', 'testing')).toEqual(2) // 2 x addition\n    expect(stringUtils.damerauLevenshtein('teasing', 'testing')).toEqual(2) // 1 x suppression + 1 x addition\n    expect(stringUtils.damerauLevenshtein('teasing', 'testing')).toEqual(2) // 1 x suppression + 1 x addition\n    expect(stringUtils.damerauLevenshtein('tastting', 'testing')).toEqual(2) // 1 x substitution + 1 x addition\n    expect(stringUtils.damerauLevenshtein('tetsing', 'testing')).toEqual(1) // letter swap\n    expect(stringUtils.damerauLevenshtein('tetsng', 'testing')).toEqual(2) // 1 x letter swap + 1 x suppression\n    expect(stringUtils.damerauLevenshtein('tetsiing', 'testing')).toEqual(2) // 1 x letter swap + 1 x addition\n    expect(stringUtils.damerauLevenshtein('tetsiing', 'testing')).toEqual(2) // 1 x letter swap + 1 x addition\n    expect(stringUtils.damerauLevenshtein('tetsong', 'testing')).toEqual(2) // 1 x letter swap + 1 x substitution\n  })\n})\n"]}
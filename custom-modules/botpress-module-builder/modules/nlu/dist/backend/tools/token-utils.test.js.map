{"version":3,"sources":["tools/token-utils.test.ts"],"names":["test","expect","toBeTruthy","toBeFalsy","describe","toEqual","split","SPACE","LATIN_CHARSET","t","notInVocab","ce","ci","est","toks","moreToks","original","tokens"],"mappings":"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","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import { LATIN_CHARSET } from './chars'\nimport {\n  isWord,\n  mergeSimilarCharsetTokens,\n  processUtteranceTokens,\n  restoreOriginalUtteranceCasing,\n  SPACE\n} from './token-utils'\n\ntest('isWord', () => {\n  expect(isWord('lol123')).toBeTruthy()\n  expect(isWord('hey 123')).toBeFalsy()\n  expect(isWord('!')).toBeFalsy()\n  expect(isWord('^jo!')).toBeFalsy()\n  expect(isWord('?¿')).toBeFalsy()\n})\n\ndescribe('Raw token processing', () => {\n  test('mergeSimilarTokens', () => {\n    expect(mergeSimilarCharsetTokens(['_', '__', '_', 'abc'], ['_'])).toEqual(['____', 'abc'])\n    expect(mergeSimilarCharsetTokens(['13', 'lo', '34', '56'], ['[0-9]'])).toEqual(['13', 'lo', '3456'])\n    expect(mergeSimilarCharsetTokens(['ab', '34', '4f6', '4'], ['[a-z]', '[0-9]'])).toEqual(['ab344f64'])\n    expect(mergeSimilarCharsetTokens(['gsa', '2', '3', 'he', '1', 'helko', '34', '56', '7'], ['[0-9]'])).toEqual([\n      'gsa',\n      '23',\n      'he',\n      '1',\n      'helko',\n      '34567'\n    ])\n    expect(\n      mergeSimilarCharsetTokens(['#$', '^&', '!)'], '\\\\!,\\\\@,\\\\#,\\\\$,\\\\%,\\\\?,\\\\^,\\\\&,\\\\*,\\\\(,\\\\)'.split(','))\n    ).toEqual(['#$^&!)'])\n    expect(mergeSimilarCharsetTokens(['lol', 'ha', 'ha', 'nop', 'funny'], ['lol', 'ha', 'funny'])).toEqual([\n      'lolhaha',\n      'nop',\n      'funny'\n    ])\n    expect(\n      mergeSimilarCharsetTokens(\n        ['ce', 'ci', 'est', 'très', SPACE, 'vanil', 'lé', '#', '12', '3', 'bås', 'Stra', 'ße'],\n        LATIN_CHARSET\n      )\n    ).toEqual(['ceciesttrès', SPACE, 'vanillé', '#', '123båsStraße'])\n  })\n\n  test('mergeSimilarTokens with custom matcher', () => {\n    expect(\n      mergeSimilarCharsetTokens(['ce', 'ci', 'est', 'très', 'vanil', 'lé'], LATIN_CHARSET, t => t == 'ci' || t == 'lé')\n    ).toEqual(['ceci', 'est', 'très', 'vanillé'])\n\n    const notInVocab = t => !{ ce: 1, ci: 1, est: 1 }[t]\n    expect(mergeSimilarCharsetTokens(['ce', 'ci', 'est', 'très', 'vanil', 'lé'], LATIN_CHARSET, notInVocab)).toEqual([\n      'ce',\n      'ci',\n      'esttrèsvanillé'\n    ])\n  })\n\n  test('processUtteranceTokens', () => {\n    const toks = [\n      `${SPACE}my`,\n      `${SPACE}name`,\n      `${SPACE}${SPACE}${SPACE}`,\n      `${SPACE}is`,\n      `${SPACE}34`,\n      '98',\n      `${SPACE}98`,\n      `${SPACE}Hei`,\n      'Sen',\n      'berg',\n      `!&$`,\n      `!¿}{@~`\n    ]\n\n    expect(processUtteranceTokens(toks)).toEqual([\n      'my',\n      '▁',\n      'name',\n      '▁▁▁▁',\n      'is',\n      '▁',\n      '3498',\n      '▁',\n      '98',\n      '▁',\n      'HeiSenberg',\n      '!&$!¿}{@~'\n    ])\n\n    const moreToks = [`${SPACE}jag`, `${SPACE}ä`, `r`, `${SPACE}väl`, `digt`, `${SPACE}hungrig`]\n    expect(processUtteranceTokens(moreToks)).toEqual(['jag', SPACE, 'är', SPACE, 'väldigt', SPACE, 'hungrig'])\n  })\n\n  test('restoreUtteranceTokens', () => {\n    const original = 'I left NASA to work at Botpress'\n    const tokens = ['i', SPACE, 'left', SPACE, 'nasa', SPACE, 'to', SPACE, 'work', SPACE, 'at', SPACE, 'bot', 'press']\n\n    expect(restoreOriginalUtteranceCasing(tokens, original)).toEqual([\n      'I',\n      SPACE,\n      'left',\n      SPACE,\n      'NASA',\n      SPACE,\n      'to',\n      SPACE,\n      'work',\n      SPACE,\n      'at',\n      SPACE,\n      'Bot',\n      'press'\n    ])\n  })\n})\n"]}
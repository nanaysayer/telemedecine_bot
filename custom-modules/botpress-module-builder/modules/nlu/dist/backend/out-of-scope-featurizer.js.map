{"version":3,"sources":["out-of-scope-featurizer.ts"],"names":["POS1_SET","POS2_SET","POS3_SET","K_CLUSTERS","KMEANS_OPTIONS","iterations","initialization","seed","averageByPOS","utt","posClasses","tokens","filter","t","includes","POS","vectors","map","x","vector","tfidf","length","getUtteranceFeatures","pos1","pos2","pos3","feats","featurizeOOSUtterances","utts","tools","noneEmbeddings","kmeans","mlToolkit","KMeans","emb","label","nearest","coordinates","featurizeInScopeUtterances","intentName"],"mappings":";;;;;;;;;AAGA;;AAKA,MAAMA,QAAiB,GAAG,CAAC,MAAD,EAAS,MAAT,CAA1B;AACA,MAAMC,QAAiB,GAAG,CAAC,KAAD,EAAQ,OAAR,EAAiB,MAAjB,EAAyB,KAAzB,EAAgC,KAAhC,CAA1B;AACA,MAAMC,QAAiB,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,EAA0B,OAA1B,EAAmC,KAAnC,CAA1B;AAEA,MAAMC,UAAU,GAAG,CAAnB;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,UAAU,EAAE,GADS;AAErBC,EAAAA,cAAc,EAAE,QAFK;AAGrBC,EAAAA,IAAI,EAAE,GAHe,CAGX;;AAHW,CAAvB;;AAMA,SAASC,YAAT,CAAsBC,GAAtB,EAAsCC,UAAtC,EAA2D;AACzD,QAAMC,MAAM,GAAGF,GAAG,CAACE,MAAJ,CAAWC,MAAX,CAAkBC,CAAC,IAAIH,UAAU,CAACI,QAAX,CAAoBD,CAAC,CAACE,GAAtB,CAAvB,CAAf;AACA,QAAMC,OAAO,GAAGL,MAAM,CAACM,GAAP,CAAWC,CAAC,IAAI,0BAAyBA,CAAC,CAACC,MAA3B,EAAmCD,CAAC,CAACE,KAArC,CAAhB,CAAhB;;AACA,MAAI,CAACJ,OAAO,CAACK,MAAb,EAAqB;AACnB,WAAO,kBAAOZ,GAAG,CAACE,MAAJ,CAAW,CAAX,EAAcQ,MAAd,CAAqBE,MAA5B,CAAP;AACD;;AACD,SAAO,0BAAeL,OAAf,CAAP;AACD;;AAEM,SAASM,oBAAT,CAA8Bb,GAA9B,EAAwD;AAC7D,QAAMc,IAAI,GAAGf,YAAY,CAACC,GAAD,EAAMT,QAAN,CAAzB;AACA,QAAMwB,IAAI,GAAGhB,YAAY,CAACC,GAAD,EAAMR,QAAN,CAAzB;AACA,QAAMwB,IAAI,GAAGjB,YAAY,CAACC,GAAD,EAAMP,QAAN,CAAzB,CAH6D,CAI7D;;AACA,QAAMwB,KAAK,GAAG,CAAC,GAAGH,IAAJ,EAAU,GAAGC,IAAb,EAAmB,GAAGC,IAAtB,EAA4BhB,GAAG,CAACE,MAAJ,CAAWU,MAAvC,CAAd;AACA,SAAOK,KAAP;AACD;;AAEM,SAASC,sBAAT,CAAgCC,IAAhC,EAAmDC,KAAnD,EAA4F;AACjG,QAAMC,cAAc,GAAGF,IAAI,CAACX,GAAL,CAASK,oBAAT,CAAvB;AACA,QAAMS,MAAM,GAAGF,KAAK,CAACG,SAAN,CAAgBC,MAAhB,CAAuBF,MAAvB,CAA8BD,cAA9B,EAA8C3B,UAA9C,EAA0DC,cAA1D,CAAf;AACA,SAAO0B,cAAc,CAACb,GAAf,CAAmBiB,GAAG,KAAK;AAChCC,IAAAA,KAAK,EAAG,OAAMJ,MAAM,CAACK,OAAP,CAAe,CAACF,GAAD,CAAf,EAAsB,CAAtB,CAAyB,EADP;AAEhCG,IAAAA,WAAW,EAAEH;AAFmB,GAAL,CAAtB,CAAP;AAID;;AAEM,SAASI,0BAAT,CAAoCV,IAApC,EAAuDW,UAAvD,EAAsG;AAC3G,SAAOX,IAAI,CAACX,GAAL,CAASR,GAAG,KAAK;AACtB0B,IAAAA,KAAK,EAAEI,UADe;AAEtBF,IAAAA,WAAW,EAAEf,oBAAoB,CAACb,GAAD;AAFX,GAAL,CAAZ,CAAP;AAID","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import { MLToolkit } from 'botpress/sdk'\n\nimport { POSClass } from './language/pos-tagger'\nimport { averageVectors, scalarMultiply, zeroes } from './tools/math'\nimport { Tools } from './typings'\nimport Utterance from './utterance/utterance'\n\nexport type POS_SET = POSClass[]\nconst POS1_SET: POS_SET = ['VERB', 'NOUN']\nconst POS2_SET: POS_SET = ['DET', 'PROPN', 'PRON', 'ADJ', 'AUX']\nconst POS3_SET: POS_SET = ['CONJ', 'CCONJ', 'INTJ', 'SCONJ', 'ADV']\n\nconst K_CLUSTERS = 3\nconst KMEANS_OPTIONS = {\n  iterations: 250,\n  initialization: 'random',\n  seed: 666 // so training is consistent\n} as MLToolkit.KMeans.KMeansOptions\n\nfunction averageByPOS(utt: Utterance, posClasses: POS_SET) {\n  const tokens = utt.tokens.filter(t => posClasses.includes(t.POS))\n  const vectors = tokens.map(x => scalarMultiply(<number[]>x.vector, x.tfidf))\n  if (!vectors.length) {\n    return zeroes(utt.tokens[0].vector.length)\n  }\n  return averageVectors(vectors)\n}\n\nexport function getUtteranceFeatures(utt: Utterance): number[] {\n  const pos1 = averageByPOS(utt, POS1_SET)\n  const pos2 = averageByPOS(utt, POS2_SET)\n  const pos3 = averageByPOS(utt, POS3_SET)\n  // maybe add % of tokens in vocab as feature\n  const feats = [...pos1, ...pos2, ...pos3, utt.tokens.length]\n  return feats\n}\n\nexport function featurizeOOSUtterances(utts: Utterance[], tools: Tools): MLToolkit.SVM.DataPoint[] {\n  const noneEmbeddings = utts.map(getUtteranceFeatures)\n  const kmeans = tools.mlToolkit.KMeans.kmeans(noneEmbeddings, K_CLUSTERS, KMEANS_OPTIONS)\n  return noneEmbeddings.map(emb => ({\n    label: `out_${kmeans.nearest([emb])[0]}`,\n    coordinates: emb\n  }))\n}\n\nexport function featurizeInScopeUtterances(utts: Utterance[], intentName: string): MLToolkit.SVM.DataPoint[] {\n  return utts.map(utt => ({\n    label: intentName,\n    coordinates: getUtteranceFeatures(utt)\n  }))\n}\n"]}
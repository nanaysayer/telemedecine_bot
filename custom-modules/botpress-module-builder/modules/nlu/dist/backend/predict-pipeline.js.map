{"version":3,"sources":["predict-pipeline.ts"],"names":["DEFAULT_CTX","NONE_INTENT","OOS_AS_NONE_TRESH","LOW_INTENT_CONFIDENCE_TRESH","DetectLanguage","input","predictorsByLang","tools","supportedLanguages","Object","keys","langIdentifier","LanguageIdentifierProvider","getLanguageIdentifier","mlToolkit","lidRes","identify","sentence","elected","filter","pred","includes","label","score","value","threshold","length","detectedLanguage","_","get","NA_LANG","match","chain","map","lang","toLowerCase","tokens","orderBy","vocabVectors","token","replace","confidence","x","first","usedLanguage","defaultLanguage","preprocessInput","predictorsBylang","predictors","isEmpty","InvalidLanguagePredictorError","contexts","includedContexts","stepOutput","rawText","languageCode","makePredictionUtterance","tfidf","kmeans","text","trim","utterance","alternateUtterance","Array","Boolean","forEach","u","setGlobalTfidf","setKmeans","extractEntities","list_entities","pattern_entities","duckling","extract","toString","entityRes","tagEntity","omit","start","end","predictContext","classifier","ctx_classifier","ctx_predictions","features","predict","alternateFeats","alternatePreds","groupBy","mapValues","gr","meanBy","toPairs","predictIntent","intents","intent_predictions","per_ctx","ctxToPredict","p","predictions","Promise","ctx","predictor","intent_classifier_per_ctx","sentenceEmbedding","preds","exactPred","findExactIntentForCtx","exact_match_index","idxToRemove","findIndex","splice","unshift","identity","zipObject","predictionsReallyConfused","std","math","diff","bestOf3STD","slice","electIntent","totalConfidence","Math","min","sumBy","ctxPreds","flatMap","ctxConf","intentPreds","thru","oos_predictions","context","l0Confidence","round","lnstd","log","p1Conf","GetZPercent","isNaN","uniqBy","name","shouldConsiderOOS","merge","combined","maxBy","predictOutOfScope","oos_classifier","utt","feats","startsWith","detectAmbiguity","perfectConfusion","low","up","confidenceVec","ambiguous","allInRange","extractSlots","intent","find","i","slot_definitions","slots","slot_tagger","slot","tagSlot","slots_per_intent","slot_predictions_per_intent","MapStepToOutput","step","startTime","entities","e","type","metadata","entityId","data","unit","meta","endPos","source","startPos","reduce","s","oos","errored","entries","fromPairs","language","ms","Date","now","exactMatchIndex","candidateKey","EXACT_MATCH_STR_OPTIONS","maybeMatch","extractor","Error","constructor","Predict","t0","err","console"],"mappings":"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","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport _ from 'lodash'\n\nimport { extractListEntities, extractPatternEntities } from './entities/custom-entity-extractor'\nimport { getSentenceEmbeddingForCtx } from './intents/context-classifier-featurizer'\nimport LanguageIdentifierProvider, { NA_LANG } from './language/language-identifier'\nimport { isPOSAvailable } from './language/pos-tagger'\nimport { getUtteranceFeatures } from './out-of-scope-featurizer'\nimport SlotTagger from './slots/slot-tagger'\nimport * as math from './tools/math'\nimport { replaceConsecutiveSpaces } from './tools/strings'\nimport { EXACT_MATCH_STR_OPTIONS, ExactMatchIndex, TrainArtefacts } from './training-pipeline'\nimport { Intent, PatternEntity, SlotExtractionResult, Tools } from './typings'\nimport Utterance, { buildUtteranceBatch, getAlternateUtterance } from './utterance/utterance'\n\nexport type ExactMatchResult = (sdk.MLToolkit.SVM.Prediction & { extractor: 'exact-matcher' }) | undefined\n\nexport type Predictors = TrainArtefacts & {\n  ctx_classifier: sdk.MLToolkit.SVM.Predictor\n  intent_classifier_per_ctx: _.Dictionary<sdk.MLToolkit.SVM.Predictor>\n  oos_classifier: sdk.MLToolkit.SVM.Predictor\n  kmeans: sdk.MLToolkit.KMeans.KmeansResult\n  slot_tagger: SlotTagger // TODO replace this by MlToolkit.CRF.Tagger\n  pattern_entities: PatternEntity[]\n  intents: Intent<Utterance>[]\n  contexts: string[]\n}\n\nexport interface PredictInput {\n  defaultLanguage: string\n  includedContexts: string[]\n  sentence: string\n}\n\nexport type PredictStep = {\n  readonly rawText: string\n  includedContexts: string[]\n  detectedLanguage: string\n  languageCode: string\n  utterance?: Utterance\n  alternateUtterance?: Utterance\n  ctx_predictions?: sdk.MLToolkit.SVM.Prediction[]\n  intent_predictions?: {\n    per_ctx?: _.Dictionary<sdk.MLToolkit.SVM.Prediction[]>\n    combined?: E1IntentPred[] // only to comply with E1\n    elected?: E1IntentPred // only to comply with E1\n    ambiguous?: boolean\n  }\n  oos_predictions?: sdk.MLToolkit.SVM.Prediction\n  slot_predictions_per_intent?: _.Dictionary<SlotExtractionResult[]>\n}\n\nexport type PredictOutput = sdk.IO.EventUnderstanding\n\n// only to comply with E1\ntype E1IntentPred = {\n  name: string\n  context: string\n  confidence: number\n}\n\nconst DEFAULT_CTX = 'global'\nconst NONE_INTENT = 'none'\nconst OOS_AS_NONE_TRESH = 0.3\nconst LOW_INTENT_CONFIDENCE_TRESH = 0.4\n\nasync function DetectLanguage(\n  input: PredictInput,\n  predictorsByLang: _.Dictionary<Predictors>,\n  tools: Tools\n): Promise<{ detectedLanguage: string; usedLanguage: string }> {\n  const supportedLanguages = Object.keys(predictorsByLang)\n\n  const langIdentifier = LanguageIdentifierProvider.getLanguageIdentifier(tools.mlToolkit)\n  const lidRes = await langIdentifier.identify(input.sentence)\n  const elected = lidRes.filter(pred => supportedLanguages.includes(pred.label))[0]\n  let score = elected?.value ?? 0\n\n  // because with single-worded sentences, confidence is always very low\n  // we assume that a input of 20 chars is more than a single word\n  const threshold = input.sentence.length > 20 ? 0.5 : 0.3\n\n  let detectedLanguage = _.get(elected, 'label', NA_LANG)\n  if (detectedLanguage !== NA_LANG && !supportedLanguages.includes(detectedLanguage)) {\n    detectedLanguage = NA_LANG\n  }\n\n  // if ML-based language identifier didn't find a match\n  // we proceed with a custom vocabulary matching algorithm\n  // ie. the % of the sentence comprised of tokens in the training vocabulary\n  if (detectedLanguage === NA_LANG) {\n    try {\n      const match = _.chain(supportedLanguages)\n        .map(lang => ({\n          lang,\n          sentence: input.sentence.toLowerCase(),\n          tokens: _.orderBy(Object.keys(predictorsByLang[lang].vocabVectors), 'length', 'desc')\n        }))\n        .map(({ lang, sentence, tokens }) => {\n          for (const token of tokens) {\n            sentence = sentence.replace(token, '')\n          }\n          return { lang, confidence: 1 - sentence.length / input.sentence.length }\n        })\n        .filter(x => x.confidence >= threshold)\n        .orderBy('confidence', 'desc')\n        .first()\n        .value()\n\n      if (match) {\n        detectedLanguage = match.lang\n        score = match.confidence\n      }\n    } finally {\n    }\n  }\n\n  const usedLanguage = detectedLanguage !== NA_LANG && score > threshold ? detectedLanguage : input.defaultLanguage\n\n  return { usedLanguage, detectedLanguage }\n}\nasync function preprocessInput(\n  input: PredictInput,\n  tools: Tools,\n  predictorsBylang: _.Dictionary<Predictors>\n): Promise<{ stepOutput: PredictStep; predictors: Predictors }> {\n  const { detectedLanguage, usedLanguage } = await DetectLanguage(input, predictorsBylang, tools)\n  const predictors = predictorsBylang[usedLanguage]\n  if (_.isEmpty(predictors)) {\n    // eventually better validation than empty check\n    throw new InvalidLanguagePredictorError(usedLanguage)\n  }\n\n  const contexts = input.includedContexts.filter(x => predictors.contexts.includes(x))\n  const stepOutput: PredictStep = {\n    includedContexts: _.isEmpty(contexts) ? predictors.contexts : contexts,\n    rawText: input.sentence,\n    detectedLanguage,\n    languageCode: usedLanguage\n  }\n\n  return { stepOutput, predictors }\n}\n\nasync function makePredictionUtterance(input: PredictStep, predictors: Predictors, tools: Tools): Promise<PredictStep> {\n  const { tfidf, vocabVectors, kmeans } = predictors\n\n  const text = replaceConsecutiveSpaces(input.rawText.trim())\n  const [utterance] = await buildUtteranceBatch([text], input.languageCode, tools, vocabVectors)\n  const alternateUtterance = getAlternateUtterance(utterance, vocabVectors)\n\n  Array(utterance, alternateUtterance)\n    .filter(Boolean)\n    .forEach(u => {\n      u.setGlobalTfidf(tfidf)\n      u.setKmeans(kmeans)\n    })\n\n  return {\n    ...input,\n    utterance,\n    alternateUtterance\n  }\n}\n\nasync function extractEntities(input: PredictStep, predictors: Predictors, tools: Tools): Promise<PredictStep> {\n  const { utterance, alternateUtterance } = input\n\n  _.forEach(\n    [\n      ...extractListEntities(input.utterance, predictors.list_entities, true),\n      ...extractPatternEntities(utterance, predictors.pattern_entities),\n      ...(await tools.duckling.extract(utterance.toString(), utterance.languageCode))\n    ],\n    entityRes => {\n      input.utterance.tagEntity(_.omit(entityRes, ['start, end']), entityRes.start, entityRes.end)\n    }\n  )\n\n  if (alternateUtterance) {\n    _.forEach(\n      [\n        ...extractListEntities(alternateUtterance, predictors.list_entities),\n        ...extractPatternEntities(alternateUtterance, predictors.pattern_entities),\n        ...(await tools.duckling.extract(alternateUtterance.toString(), utterance.languageCode))\n      ],\n      entityRes => {\n        input.alternateUtterance.tagEntity(_.omit(entityRes, ['start, end']), entityRes.start, entityRes.end)\n      }\n    )\n  }\n\n  return { ...input }\n}\n\nasync function predictContext(input: PredictStep, predictors: Predictors): Promise<PredictStep> {\n  const classifier = predictors.ctx_classifier\n  if (!classifier) {\n    return {\n      ...input,\n      ctx_predictions: [\n        { label: input.includedContexts.length ? input.includedContexts[0] : DEFAULT_CTX, confidence: 1 }\n      ]\n    }\n  }\n\n  const features = getSentenceEmbeddingForCtx(input.utterance)\n  let ctx_predictions = await classifier.predict(features)\n\n  if (input.alternateUtterance) {\n    const alternateFeats = getSentenceEmbeddingForCtx(input.alternateUtterance)\n    const alternatePreds = await classifier.predict(alternateFeats)\n\n    // we might want to do this in intent election intead or in NDU\n    if ((alternatePreds && alternatePreds[0]?.confidence) ?? 0 > ctx_predictions[0].confidence) {\n      // mean\n      ctx_predictions = _.chain([...alternatePreds, ...ctx_predictions])\n        .groupBy('label')\n        .mapValues(gr => _.meanBy(gr, 'confidence'))\n        .toPairs()\n        .map(([label, confidence]) => ({ label, confidence }))\n        .value()\n    }\n  }\n\n  return {\n    ...input,\n    ctx_predictions\n  }\n}\n\nasync function predictIntent(input: PredictStep, predictors: Predictors): Promise<PredictStep> {\n  if (predictors.intents.length === 0) {\n    return { ...input, intent_predictions: { per_ctx: { [DEFAULT_CTX]: [{ label: NONE_INTENT, confidence: 1 }] } } }\n  }\n\n  const ctxToPredict = input.ctx_predictions.map(p => p.label)\n  const predictions = (\n    await Promise.map(ctxToPredict, async ctx => {\n      const predictor = predictors.intent_classifier_per_ctx[ctx]\n      if (!predictor) {\n        return\n      }\n      const features = [...input.utterance.sentenceEmbedding, input.utterance.tokens.length]\n      let preds = await predictor.predict(features)\n      const exactPred = findExactIntentForCtx(predictors.exact_match_index, input.utterance, ctx)\n      if (exactPred) {\n        const idxToRemove = preds.findIndex(p => p.label === exactPred.label)\n        preds.splice(idxToRemove, 1)\n        preds.unshift(exactPred)\n      }\n\n      if (input.alternateUtterance) {\n        const alternateFeats = [...input.alternateUtterance.sentenceEmbedding, input.alternateUtterance.tokens.length]\n        const alternatePreds = await predictor.predict(alternateFeats)\n        const exactPred = findExactIntentForCtx(predictors.exact_match_index, input.alternateUtterance, ctx)\n        if (exactPred) {\n          const idxToRemove = alternatePreds.findIndex(p => p.label === exactPred.label)\n          alternatePreds.splice(idxToRemove, 1)\n          alternatePreds.unshift(exactPred)\n        }\n\n        // we might want to do this in intent election intead or in NDU\n        if ((alternatePreds && alternatePreds[0]?.confidence) ?? 0 >= preds[0].confidence) {\n          // mean\n          preds = _.chain([...alternatePreds, ...preds])\n            .groupBy('label')\n            .mapValues(gr => _.meanBy(gr, 'confidence'))\n            .toPairs()\n            .map(([label, confidence]) => ({ label, confidence }))\n            .value()\n        }\n      }\n\n      return preds\n    })\n  ).filter(_.identity)\n\n  return {\n    ...input,\n    intent_predictions: { per_ctx: _.zipObject(ctxToPredict, predictions) }\n  }\n}\n\n// taken from svm classifier #295\n// this means that the 3 best predictions are really close, do not change magic numbers\nfunction predictionsReallyConfused(predictions: sdk.MLToolkit.SVM.Prediction[]): boolean {\n  if (predictions.length <= 2) {\n    return false\n  }\n\n  const std = math.std(predictions.map(p => p.confidence))\n  const diff = (predictions[0].confidence - predictions[1].confidence) / std\n  if (diff >= 2.5) {\n    return false\n  }\n\n  const bestOf3STD = math.std(predictions.slice(0, 3).map(p => p.confidence))\n  return bestOf3STD <= 0.03\n}\n\n// TODO implement this algorithm properly / improve it\n// currently taken as is from svm classifier (engine 1) and doesn't make much sens\nfunction electIntent(input: PredictStep): PredictStep {\n  const totalConfidence = Math.min(\n    1,\n    _.sumBy(\n      input.ctx_predictions.filter(x => input.includedContexts.includes(x.label)),\n      'confidence'\n    )\n  )\n  const ctxPreds = input.ctx_predictions.map(x => ({ ...x, confidence: x.confidence / totalConfidence }))\n\n  // taken from svm classifier #349\n  let predictions = _.chain(ctxPreds)\n    .flatMap(({ label: ctx, confidence: ctxConf }) => {\n      const intentPreds = _.chain(input.intent_predictions.per_ctx[ctx] || [])\n        .thru(preds => {\n          if (input.oos_predictions?.confidence > OOS_AS_NONE_TRESH) {\n            return [\n              ...preds,\n              {\n                label: NONE_INTENT,\n                confidence: input.oos_predictions?.confidence ?? 1,\n                context: ctx,\n                l0Confidence: ctxConf\n              }\n            ]\n          } else {\n            return preds\n          }\n        })\n        .map(p => ({ ...p, confidence: _.round(p.confidence, 2) }))\n        .orderBy('confidence', 'desc')\n        .value()\n      if (intentPreds[0].confidence === 1 || intentPreds.length === 1) {\n        return [{ label: intentPreds[0].label, l0Confidence: ctxConf, context: ctx, confidence: 1 }]\n      } // are we sure theres always at least two intents ? otherwise down there it may crash\n\n      if (predictionsReallyConfused(intentPreds)) {\n        intentPreds.unshift({ label: NONE_INTENT, context: ctx, confidence: 1 })\n      }\n\n      const lnstd = math.std(intentPreds.filter(x => x.confidence !== 0).map(x => Math.log(x.confidence))) // because we want a lognormal distribution\n      let p1Conf = math.GetZPercent((Math.log(intentPreds[0].confidence) - Math.log(intentPreds[1].confidence)) / lnstd)\n      if (isNaN(p1Conf)) {\n        p1Conf = 0.5\n      }\n\n      return [\n        { label: intentPreds[0].label, l0Confidence: ctxConf, context: ctx, confidence: _.round(ctxConf * p1Conf, 3) },\n        {\n          label: intentPreds[1].label,\n          l0Confidence: ctxConf,\n          context: ctx,\n          confidence: _.round(ctxConf * (1 - p1Conf), 3)\n        }\n      ]\n    })\n    .orderBy('confidence', 'desc')\n    .filter(p => input.includedContexts.includes(p.context))\n    .uniqBy(p => p.label)\n    .map(p => ({ name: p.label, context: p.context, confidence: p.confidence }))\n    .value()\n\n  const ctx = _.get(predictions, '0.context', 'global')\n  const shouldConsiderOOS =\n    predictions.length &&\n    predictions[0].name !== NONE_INTENT &&\n    predictions[0].confidence < LOW_INTENT_CONFIDENCE_TRESH &&\n    input.oos_predictions?.confidence > OOS_AS_NONE_TRESH\n  if (!predictions.length || shouldConsiderOOS) {\n    predictions = _.orderBy(\n      [\n        ...predictions.filter(p => p.name !== NONE_INTENT),\n        { name: NONE_INTENT, context: ctx, confidence: input.oos_predictions?.confidence ?? 1 }\n      ],\n      'confidence'\n    )\n  }\n\n  return _.merge(input, {\n    intent_predictions: { combined: predictions, elected: _.maxBy(predictions, 'confidence') }\n  })\n}\n\nasync function predictOutOfScope(input: PredictStep, predictors: Predictors, tools: Tools): Promise<PredictStep> {\n  if (!isPOSAvailable(input.languageCode) || !predictors.oos_classifier) {\n    return input\n  }\n  const utt = input.alternateUtterance || input.utterance\n  const feats = getUtteranceFeatures(utt)\n  const preds = await predictors.oos_classifier.predict(feats)\n  const confidence = _.sumBy(\n    preds.filter(p => p.label.startsWith('out')),\n    'confidence'\n  )\n  const oos_predictions = { label: 'out', confidence }\n\n  return {\n    ...input,\n    oos_predictions\n  }\n}\n\nfunction detectAmbiguity(input: PredictStep): PredictStep {\n  // +- 10% away from perfect median leads to ambiguity\n  const preds = input.intent_predictions.combined\n  const perfectConfusion = 1 / preds.length\n  const low = perfectConfusion - 0.1\n  const up = perfectConfusion + 0.1\n  const confidenceVec = preds.map(p => p.confidence)\n\n  const ambiguous =\n    preds.length > 1 &&\n    (math.allInRange(confidenceVec, low, up) ||\n      (preds[0].name === NONE_INTENT && math.allInRange(confidenceVec.slice(1), low, up)))\n\n  return _.merge(input, { intent_predictions: { ambiguous } })\n}\n\nasync function extractSlots(input: PredictStep, predictors: Predictors): Promise<PredictStep> {\n  const intent =\n    !input.intent_predictions.ambiguous &&\n    predictors.intents.find(i => i.name === input.intent_predictions.elected.name)\n  if (intent && intent.slot_definitions.length > 0) {\n    const slots = await predictors.slot_tagger.extract(input.utterance, intent)\n    slots.forEach(({ slot, start, end }) => {\n      input.utterance.tagSlot(slot, start, end)\n    })\n  }\n\n  const slots_per_intent: typeof input.slot_predictions_per_intent = {}\n  for (const intent of predictors.intents.filter(x => x.slot_definitions.length > 0)) {\n    const slots = await predictors.slot_tagger.extract(input.utterance, intent)\n    slots_per_intent[intent.name] = slots\n  }\n\n  return { ...input, slot_predictions_per_intent: slots_per_intent }\n}\n\nfunction MapStepToOutput(step: PredictStep, startTime: number): PredictOutput {\n  const entities = step.utterance.entities.map(\n    e =>\n      ({\n        name: e.type,\n        type: e.metadata.entityId,\n        data: {\n          unit: e.metadata.unit,\n          value: e.value\n        },\n        meta: {\n          confidence: e.confidence,\n          end: e.endPos,\n          source: e.metadata.source,\n          start: e.startPos\n        }\n      } as sdk.NLU.Entity)\n  )\n  const slots = step.utterance.slots.reduce((slots, s) => {\n    return {\n      ...slots,\n      [s.name]: {\n        start: s.startPos,\n        end: s.endPos,\n        confidence: s.confidence,\n        name: s.name,\n        source: s.source,\n        value: s.value\n      } as sdk.NLU.Slot\n    }\n  }, {} as sdk.NLU.SlotCollection)\n\n  const predictions = step.ctx_predictions?.reduce(\n    (preds, { label, confidence }) => {\n      return {\n        ...preds,\n        [label]: {\n          confidence: confidence,\n          intents: step.intent_predictions.per_ctx[label].map(i => ({\n            ...i,\n            slots: (step.slot_predictions_per_intent[i.label] || []).reduce((slots, s) => {\n              if (slots[s.slot.name] && slots[s.slot.name].confidence > s.slot.confidence) {\n                // we keep only the most confident slots\n                return slots\n              }\n\n              return {\n                ...slots,\n                [s.slot.name]: {\n                  start: s.start,\n                  end: s.end,\n                  confidence: s.slot.confidence,\n                  name: s.slot.name,\n                  source: s.slot.source,\n                  value: s.slot.value\n                } as sdk.NLU.Slot\n              }\n            }, {} as sdk.NLU.SlotCollection)\n          }))\n        }\n      }\n    },\n    {\n      oos: {\n        intents: [\n          {\n            label: NONE_INTENT,\n            confidence: 1 // this will be be computed as\n          }\n        ],\n        confidence: step.oos_predictions?.confidence ?? 0\n      }\n    }\n  )\n\n  return {\n    ambiguous: step.intent_predictions.ambiguous,\n    detectedLanguage: step.detectedLanguage,\n    entities,\n    errored: false,\n    predictions: _.chain(predictions) // orders all predictions by confidence\n      .entries()\n      .orderBy(x => x[1].confidence, 'desc')\n      .fromPairs()\n      .value(),\n    includedContexts: step.includedContexts,\n    intent: step.intent_predictions.elected,\n    intents: step.intent_predictions.combined,\n    language: step.languageCode,\n    slots,\n    ms: Date.now() - startTime\n  }\n}\n\n// TODO move this in exact match module\nexport function findExactIntentForCtx(\n  exactMatchIndex: ExactMatchIndex,\n  utterance: Utterance,\n  ctx: string\n): ExactMatchResult {\n  const candidateKey = utterance.toString(EXACT_MATCH_STR_OPTIONS)\n\n  const maybeMatch = exactMatchIndex[candidateKey]\n  if (_.get(maybeMatch, 'contexts', []).includes(ctx)) {\n    return { label: maybeMatch.intent, confidence: 1, extractor: 'exact-matcher' }\n  }\n}\n\nexport class InvalidLanguagePredictorError extends Error {\n  constructor(public languageCode: string) {\n    super(`Predictor for language: ${languageCode} is not valid`)\n    this.name = 'PredictorError'\n  }\n}\n\nexport const Predict = async (\n  input: PredictInput,\n  tools: Tools,\n  predictorsByLang: _.Dictionary<Predictors>\n): Promise<PredictOutput> => {\n  try {\n    const t0 = Date.now()\n    // tslint:disable-next-line\n    let { stepOutput, predictors } = await preprocessInput(input, tools, predictorsByLang)\n\n    stepOutput = await makePredictionUtterance(stepOutput, predictors, tools)\n    stepOutput = await extractEntities(stepOutput, predictors, tools)\n    stepOutput = await predictOutOfScope(stepOutput, predictors, tools)\n    stepOutput = await predictContext(stepOutput, predictors)\n    stepOutput = await predictIntent(stepOutput, predictors)\n    stepOutput = electIntent(stepOutput)\n    stepOutput = detectAmbiguity(stepOutput)\n    stepOutput = await extractSlots(stepOutput, predictors)\n    return MapStepToOutput(stepOutput, t0)\n  } catch (err) {\n    if (err instanceof InvalidLanguagePredictorError) {\n      throw err\n    }\n    console.log('Could not perform predict data', err)\n    return { errored: true } as sdk.IO.EventUnderstanding\n  }\n}\n"]}
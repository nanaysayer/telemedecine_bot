{"version":3,"sources":["training-pipeline.ts"],"names":["debugTraining","DEBUG","sub","NONE_INTENT","NONE_UTTERANCES_BOUNDS","MIN","MAX","EXACT_MATCH_STR_OPTIONS","lowerCase","onlyWords","slots","entities","MIN_NB_UTTERANCES","NUM_CLUSTERS","KMEANS_OPTIONS","iterations","initialization","seed","PreprocessInput","input","tools","forBot","botId","_","cloneDeep","list_entities","Promise","map","list","makeListEntityModel","languageCode","intents","ProcessIntents","omit","entity","allValues","uniq","Object","keys","synonyms","concat","values","allTokens","tokenize_utterances","toks","convertToRealSpaces","type","id","name","entityName","fuzzyTolerance","sensitive","mappingsTokens","mapValues","syn","idx","indexOf","cache","computeKmeans","data","chain","filter","i","flatMapDeep","utterances","u","tokens","uniqBy","t","value","vector","length","k","mlToolkit","KMeans","kmeans","ClusterTokens","copy","forEach","x","setKmeans","buildIntentVocab","intentEntities","entitiesTokens","e","toLowerCase","replace","SPACE","flatMap","isEmpty","toString","reduce","vocab","tok","buildVectorsVocab","intent","BuildExactMatchIndex","utterance","contexts","index","TrainIntentClassifier","progress","svmPerCtx","ctx","points","includes","utt","label","coordinates","sentenceEmbedding","some","isNaN","svm","SVM","Trainer","model","train","kernel","classifier","p","completion","TrainContextClassifier","round","cleaned","flow","trim","replaceConsecutiveSpaces","allowedEntities","slot_definitions","s","entityModels","intersectionWith","slot_entities","ExtractEntities","allSysEntities","duckling","extractMultiple","customReferencedInSlots","listEntitiesToExtract","ent","pattenEntitiesToExtract","pattern_entities","zip","sysEntities","listEntities","patternEntities","tagEntity","start","end","AppendNoneIntent","allUtterances","flatten","vocabWithDupes","flattenDeep","junkWords","generateSimilarJunkWords","avgTokens","meanBy","nbOfNoneUtterances","clamp","stopWords","vocabWords","tfIdf","toPairs","word","tfidf","joinChar","vocabUtts","range","nbWords","Math","random","sampleSize","join","junkWordsUtts","mixedUtts","TfidfTokens","tfidfInput","__avg__","avg_tfidf","setGlobalTfidf","TrainSlotTagger","hasSlots","Buffer","from","slotTagger","SlotTagger","serialized","TrainOutOfScope","trainingOptions","c","gamma","noneUtts","oos_points","in_scope_points","NB_STEPS","startedAt","Date","totalProgress","normalizedProgress","debouncedProgress","debounce","reportTrainingProgress","maxWait","reportProgress","stepProgress","trainingSession","status","TrainingCanceledError","max","floor","scaledProgress","min","output","exact_match_index","oos_model","ctx_model","intent_model_by_ctx","slots_model","all","artefacts","vocabVectors","merge","success","err","console","log","finishedAt","Error","constructor"],"mappings":"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","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport _ from 'lodash'\n\nimport { getOrCreateCache } from './cache-manager'\nimport { extractListEntities, extractPatternEntities } from './entities/custom-entity-extractor'\nimport { getSentenceEmbeddingForCtx } from './intents/context-classifier-featurizer'\nimport { isPOSAvailable } from './language/pos-tagger'\nimport { getStopWordsForLang } from './language/stopWords'\nimport { Model } from './model-service'\nimport { featurizeInScopeUtterances, featurizeOOSUtterances } from './out-of-scope-featurizer'\nimport SlotTagger from './slots/slot-tagger'\nimport { replaceConsecutiveSpaces } from './tools/strings'\nimport tfidf from './tools/tfidf'\nimport { convertToRealSpaces, isSpace, SPACE } from './tools/token-utils'\nimport {\n  EntityExtractionResult,\n  Intent,\n  ListEntity,\n  ListEntityModel,\n  PatternEntity,\n  TFIDF,\n  Token2Vec,\n  Tools,\n  TrainingSession\n} from './typings'\nimport Utterance, { buildUtteranceBatch, UtteranceToken, UtteranceToStringOptions } from './utterance/utterance'\n\n// TODO make this return artefacts only and move the make model login in E2\nexport type Trainer = (input: TrainInput, tools: Tools) => Promise<Model>\n\nexport type TrainInput = Readonly<{\n  botId: string\n  languageCode: string\n  pattern_entities: PatternEntity[]\n  list_entities: ListEntity[]\n  contexts: string[]\n  intents: Intent<string>[]\n  trainingSession: TrainingSession\n}>\n\nexport type TrainOutput = Readonly<{\n  botId: string\n  languageCode: string\n  list_entities: ListEntityModel[]\n  pattern_entities: PatternEntity[]\n  contexts: string[]\n  intents: Intent<Utterance>[]\n  tfIdf?: TFIDF\n  kmeans?: sdk.MLToolkit.KMeans.KmeansResult\n}>\n\nexport interface TrainArtefacts {\n  list_entities: ListEntityModel[]\n  tfidf: TFIDF\n  vocabVectors: Token2Vec\n  // kmeans: KmeansResult\n  ctx_model: string\n  intent_model_by_ctx: Dic<string>\n  slots_model: Buffer\n  exact_match_index: ExactMatchIndex\n  oos_model: string\n}\n\nexport type ExactMatchIndex = _.Dictionary<{ intent: string; contexts: string[] }>\n\ntype progressCB = (p?: number) => void\n\nconst debugTraining = DEBUG('nlu').sub('training')\nconst NONE_INTENT = 'none'\nconst NONE_UTTERANCES_BOUNDS = {\n  MIN: 20,\n  MAX: 200\n}\nexport const EXACT_MATCH_STR_OPTIONS: UtteranceToStringOptions = {\n  lowerCase: true,\n  onlyWords: true,\n  slots: 'ignore',\n  entities: 'ignore'\n}\nexport const MIN_NB_UTTERANCES = 3\nconst NUM_CLUSTERS = 8\nconst KMEANS_OPTIONS = {\n  iterations: 250,\n  initialization: 'random',\n  seed: 666 // so training is consistent\n} as sdk.MLToolkit.KMeans.KMeansOptions\n\nconst PreprocessInput = async (input: TrainInput, tools: Tools): Promise<TrainOutput> => {\n  debugTraining.forBot(input.botId, 'Preprocessing intents')\n  input = _.cloneDeep(input)\n  const list_entities = await Promise.map(input.list_entities, list =>\n    makeListEntityModel(list, input.botId, input.languageCode, tools)\n  )\n\n  const intents = await ProcessIntents(input.intents, input.languageCode, list_entities, tools)\n\n  return {\n    ..._.omit(input, 'list_entities', 'intents'),\n    list_entities,\n    intents\n  } as TrainOutput\n}\n\nconst makeListEntityModel = async (entity: ListEntity, botId: string, languageCode: string, tools: Tools) => {\n  const allValues = _.uniq(Object.keys(entity.synonyms).concat(..._.values(entity.synonyms)))\n  const allTokens = (await tools.tokenize_utterances(allValues, languageCode)).map(toks =>\n    toks.map(convertToRealSpaces)\n  )\n\n  return <ListEntityModel>{\n    type: 'custom.list',\n    id: `custom.list.${entity.name}`,\n    languageCode: languageCode,\n    entityName: entity.name,\n    fuzzyTolerance: entity.fuzzyTolerance,\n    sensitive: entity.sensitive,\n    mappingsTokens: _.mapValues(entity.synonyms, (synonyms, name) =>\n      [...synonyms, name].map(syn => {\n        const idx = allValues.indexOf(syn)\n        return allTokens[idx]\n      })\n    ),\n    cache: getOrCreateCache(entity.name, botId)\n  }\n}\n\nexport const computeKmeans = (intents: Intent<Utterance>[], tools: Tools): sdk.MLToolkit.KMeans.KmeansResult => {\n  const data = _.chain(intents)\n    .filter(i => i.name !== NONE_INTENT)\n    .flatMapDeep(i => i.utterances.map(u => u.tokens))\n    // @ts-ignore\n    .uniqBy((t: UtteranceToken) => t.value)\n    .map((t: UtteranceToken) => t.vector)\n    .value() as number[][]\n\n  if (data.length < 2) {\n    return\n  }\n\n  const k = data.length > NUM_CLUSTERS ? NUM_CLUSTERS : 2\n\n  return tools.mlToolkit.KMeans.kmeans(data, k, KMEANS_OPTIONS)\n}\n\nconst ClusterTokens = (input: TrainOutput, tools: Tools): TrainOutput => {\n  const kmeans = computeKmeans(input.intents, tools)\n  const copy = { ...input, kmeans }\n  copy.intents.forEach(x => x.utterances.forEach(u => u.setKmeans(kmeans)))\n\n  return copy\n}\n\nexport const buildIntentVocab = (utterances: Utterance[], intentEntities: ListEntityModel[]): _.Dictionary<boolean> => {\n  // @ts-ignore\n  const entitiesTokens: string[] = _.chain(intentEntities)\n    .flatMapDeep(e => Object.values(e.mappingsTokens))\n    .map((t: string) => t.toLowerCase().replace(SPACE, ' '))\n    .value()\n\n  return _.chain(utterances)\n    .flatMap(u => u.tokens.filter(t => _.isEmpty(t.slots)).map(t => t.toString({ lowerCase: true })))\n    .concat(entitiesTokens)\n    .reduce((vocab: _.Dictionary<boolean>, tok) => ({ ...vocab, [tok]: true }), {})\n    .value()\n}\n\nconst buildVectorsVocab = (intents: Intent<Utterance>[]): _.Dictionary<number[]> => {\n  return (\n    _.chain(intents)\n      .filter(i => i.name !== NONE_INTENT)\n      .flatMapDeep((intent: Intent<Utterance>) => intent.utterances.map(u => u.tokens))\n      // @ts-ignore\n      .reduce((vocab, tok: UtteranceToken) => {\n        vocab[tok.toString({ lowerCase: true })] = <number[]>tok.vector\n        return vocab\n      }, {})\n      .value() as Token2Vec\n  )\n}\n\nexport const BuildExactMatchIndex = (input: TrainOutput): ExactMatchIndex => {\n  return _.chain(input.intents)\n    .filter(i => i.name !== NONE_INTENT)\n    .flatMap(i =>\n      i.utterances.map(u => ({\n        utterance: u.toString(EXACT_MATCH_STR_OPTIONS),\n        contexts: i.contexts,\n        intent: i.name\n      }))\n    )\n    .reduce((index, { utterance, contexts, intent }) => {\n      index[utterance] = { intent, contexts }\n      return index\n    }, {} as ExactMatchIndex)\n    .value()\n}\n\nconst TrainIntentClassifier = async (\n  input: TrainOutput,\n  tools: Tools,\n  progress: progressCB\n): Promise<_.Dictionary<string> | undefined> => {\n  debugTraining.forBot(input.botId, 'Training intent classifier')\n  const svmPerCtx: _.Dictionary<string> = {}\n  for (let i = 0; i < input.contexts.length; i++) {\n    const ctx = input.contexts[i]\n    const points = _.chain(input.intents)\n      .filter(i => i.contexts.includes(ctx) && i.utterances.length >= MIN_NB_UTTERANCES)\n      .flatMap(i =>\n        i.utterances\n          .filter((u, idx) => i.name !== NONE_INTENT || (u.tokens.length > 2 && idx % 3 === 0))\n          .map(utt => ({\n            label: i.name,\n            coordinates: [...utt.sentenceEmbedding, utt.tokens.length]\n          }))\n      )\n      .filter(x => !x.coordinates.some(isNaN))\n      .value()\n\n    if (points.length < 0) {\n      progress(1 / input.contexts.length)\n      continue\n    }\n    const svm = new tools.mlToolkit.SVM.Trainer()\n    const model = await svm.train(points, { kernel: 'LINEAR', classifier: 'C_SVC' }, p => {\n      const completion = (i + p) / input.contexts.length\n      progress(completion)\n    })\n    svmPerCtx[ctx] = model\n  }\n\n  debugTraining.forBot(input.botId, 'Done training intent classifier')\n  return svmPerCtx\n}\n\nconst TrainContextClassifier = async (\n  input: TrainOutput,\n  tools: Tools,\n  progress: progressCB\n): Promise<string | undefined> => {\n  debugTraining.forBot(input.botId, 'Training context classifier')\n  const points = _.flatMapDeep(input.contexts, ctx => {\n    return input.intents\n      .filter(intent => intent.contexts.includes(ctx) && intent.name !== NONE_INTENT)\n      .map(intent =>\n        intent.utterances.map(utt => ({\n          label: ctx,\n          coordinates: getSentenceEmbeddingForCtx(utt)\n        }))\n      )\n  }).filter(x => x.coordinates.filter(isNaN).length === 0)\n\n  if (points.length === 0 || input.contexts.length <= 1) {\n    progress()\n    debugTraining.forBot(input.botId, 'No context to train')\n    return\n  }\n\n  const svm = new tools.mlToolkit.SVM.Trainer()\n  const model = await svm.train(points, { kernel: 'LINEAR', classifier: 'C_SVC' }, p => {\n    progress(_.round(p, 1))\n  })\n  debugTraining.forBot(input.botId, 'Done training context classifier')\n  return model\n}\n\nexport const ProcessIntents = async (\n  intents: Intent<string>[],\n  languageCode: string,\n  list_entities: ListEntityModel[],\n  tools: Tools\n): Promise<Intent<Utterance>[]> => {\n  return Promise.map(intents, async intent => {\n    const cleaned = intent.utterances.map(_.flow([_.trim, replaceConsecutiveSpaces]))\n    const utterances = await buildUtteranceBatch(cleaned, languageCode, tools)\n\n    const allowedEntities = _.chain(intent.slot_definitions)\n      .flatMap(s => s.entities)\n      .filter(e => e !== 'any')\n      .uniq()\n      .value() as string[]\n\n    const entityModels = _.intersectionWith(list_entities, allowedEntities, (entity, name) => {\n      return entity.entityName === name\n    })\n\n    const vocab = buildIntentVocab(utterances, entityModels)\n\n    return { ...intent, utterances: utterances, vocab, slot_entities: allowedEntities }\n  })\n}\n\nexport const ExtractEntities = async (input: TrainOutput, tools: Tools): Promise<TrainOutput> => {\n  const utterances: Utterance[] = _.chain(input.intents)\n    .filter(i => i.name !== NONE_INTENT)\n    .flatMap('utterances')\n    .value()\n\n  // we extract sys entities for all utterances, helps on training and exact matcher\n  const allSysEntities = await tools.duckling.extractMultiple(\n    utterances.map(u => u.toString()),\n    input.languageCode,\n    true\n  )\n\n  const customReferencedInSlots = _.chain(input.intents)\n    .flatMap('slot_entities')\n    .uniq()\n    .value()\n\n  // only extract list entities referenced in slots\n  // TODO: remove this once we merge in entity encoding\n  const listEntitiesToExtract = input.list_entities.filter(ent => customReferencedInSlots.includes(ent.entityName))\n  const pattenEntitiesToExtract = input.pattern_entities.filter(ent => customReferencedInSlots.includes(ent.name))\n\n  _.zip(utterances, allSysEntities)\n    .map(([utt, sysEntities]) => {\n      // TODO: remove this slot check once we merge in entity encoding\n      const listEntities = utt.slots.length ? extractListEntities(utt, listEntitiesToExtract) : []\n      const patternEntities = utt.slots.length ? extractPatternEntities(utt, pattenEntitiesToExtract) : []\n      return [utt, [...sysEntities, ...listEntities, ...patternEntities]] as [Utterance, EntityExtractionResult[]]\n    })\n    .forEach(([utt, entities]) => {\n      entities.forEach(ent => {\n        utt.tagEntity(_.omit(ent, ['start, end']), ent.start, ent.end)\n      })\n    })\n  return input\n}\n\nexport const AppendNoneIntent = async (input: TrainOutput, tools: Tools): Promise<TrainOutput> => {\n  if (input.intents.length === 0) {\n    return input\n  }\n\n  const allUtterances = _.flatten(input.intents.map(x => x.utterances))\n  const vocabWithDupes = _.chain(allUtterances)\n    .map(x => x.tokens.map(x => x.value))\n    .flattenDeep<string>()\n    .value()\n\n  const junkWords = await tools.generateSimilarJunkWords(_.uniq(vocabWithDupes), input.languageCode)\n  const avgTokens = _.meanBy(allUtterances, x => x.tokens.length)\n  const nbOfNoneUtterances = _.clamp(\n    (allUtterances.length * 2) / 3,\n    NONE_UTTERANCES_BOUNDS.MIN,\n    NONE_UTTERANCES_BOUNDS.MAX\n  )\n  const stopWords = await getStopWordsForLang(input.languageCode)\n  const vocabWords = _.chain(input.tfIdf)\n    .toPairs()\n    .filter(([word, tfidf]) => tfidf <= 0.3)\n    .map('0')\n    .value()\n\n  // If 30% in utterances is a space, language is probably space-separated so we'll join tokens using spaces\n  const joinChar = vocabWithDupes.filter(x => isSpace(x)).length >= vocabWithDupes.length * 0.3 ? SPACE : ''\n\n  const vocabUtts = _.range(0, nbOfNoneUtterances).map(() => {\n    const nbWords = Math.round(_.random(1, avgTokens * 2, false))\n    return _.sampleSize(_.uniq([...stopWords, ...vocabWords]), nbWords).join(joinChar)\n  })\n\n  const junkWordsUtts = _.range(0, nbOfNoneUtterances).map(() => {\n    const nbWords = Math.round(_.random(1, avgTokens * 2, false))\n    return _.sampleSize(junkWords, nbWords).join(joinChar)\n  })\n\n  const mixedUtts = _.range(0, nbOfNoneUtterances).map(() => {\n    const nbWords = Math.round(_.random(1, avgTokens * 2, false))\n    return _.sampleSize([...junkWords, ...stopWords], nbWords).join(joinChar)\n  })\n\n  const intent: Intent<Utterance> = {\n    name: NONE_INTENT,\n    slot_definitions: [],\n    utterances: await buildUtteranceBatch(\n      [...mixedUtts, ...vocabUtts, ...junkWordsUtts, ...stopWords],\n      input.languageCode,\n      tools\n    ),\n    contexts: [...input.contexts],\n    vocab: {},\n    slot_entities: []\n  }\n\n  return { ...input, intents: [...input.intents, intent] }\n}\n\nexport const TfidfTokens = async (input: TrainOutput): Promise<TrainOutput> => {\n  const tfidfInput = input.intents.reduce(\n    (tfidfInput, intent) => ({\n      ...tfidfInput,\n      [intent.name]: _.flatMapDeep(intent.utterances.map(u => u.tokens.map(t => t.toString({ lowerCase: true }))))\n    }),\n    {} as _.Dictionary<string[]>\n  )\n\n  const { __avg__: avg_tfidf } = tfidf(tfidfInput)\n  const copy = { ...input, tfIdf: avg_tfidf }\n  copy.intents.forEach(x => x.utterances.forEach(u => u.setGlobalTfidf(avg_tfidf)))\n  return copy\n}\n\nconst TrainSlotTagger = async (input: TrainOutput, tools: Tools, progress: progressCB): Promise<Buffer> => {\n  const hasSlots = _.flatMap(input.intents, i => i.slot_definitions).length > 0\n\n  if (!hasSlots) {\n    progress()\n    return Buffer.from('')\n  }\n\n  debugTraining.forBot(input.botId, 'Training slot tagger')\n  const slotTagger = new SlotTagger(tools.mlToolkit)\n  await slotTagger.train(input.intents.filter(i => i.name !== NONE_INTENT))\n  debugTraining.forBot(input.botId, 'Done training slot tagger')\n  progress()\n\n  return slotTagger.serialized\n}\n\nconst TrainOutOfScope = async (input: TrainOutput, tools: Tools, progress: progressCB): Promise<string | undefined> => {\n  debugTraining.forBot(input.botId, 'Training out of scope classifier')\n  const trainingOptions: sdk.MLToolkit.SVM.SVMOptions = {\n    c: [10],\n    gamma: [0.1],\n    kernel: 'LINEAR',\n    classifier: 'C_SVC',\n    reduce: false\n  }\n\n  const noneUtts = _.chain(input.intents)\n    .filter(i => i.name === NONE_INTENT)\n    .flatMap(i => i.utterances)\n    .value()\n\n  if (!isPOSAvailable(input.languageCode) || noneUtts.length === 0) {\n    progress()\n    return\n  }\n\n  const oos_points = featurizeOOSUtterances(noneUtts, tools)\n\n  const in_scope_points = _.chain(input.intents)\n    .filter(i => i.name !== NONE_INTENT)\n    .flatMap(i => featurizeInScopeUtterances(i.utterances, i.name))\n    .value()\n\n  const svm = new tools.mlToolkit.SVM.Trainer()\n  const model = await svm.train([...in_scope_points, ...oos_points], trainingOptions, p => {\n    progress(_.round(p, 2))\n  })\n  debugTraining.forBot(input.botId, 'Done training out of scope')\n  return model\n}\n\nconst NB_STEPS = 5 // change this if the training pipeline changes\nexport const Trainer: Trainer = async (input: TrainInput, tools: Tools): Promise<Model> => {\n  const model: Partial<Model> = {\n    startedAt: new Date(),\n    languageCode: input.languageCode,\n    data: {\n      input\n    }\n  }\n\n  let totalProgress = 0\n  let normalizedProgress = 0\n  const debouncedProgress = _.debounce(tools.reportTrainingProgress, 75, { maxWait: 750 })\n  const reportProgress: progressCB = (stepProgress = 1) => {\n    if (!input.trainingSession) {\n      return\n    }\n    if (input.trainingSession.status === 'canceled') {\n      // Note that we don't use debouncedProgress here as we want the side effects probagated now\n      tools.reportTrainingProgress(input.botId, 'Training canceled', input.trainingSession)\n      throw new TrainingCanceledError()\n    }\n\n    totalProgress = Math.max(totalProgress, Math.floor(totalProgress) + _.round(stepProgress, 2))\n    const scaledProgress = Math.min(1, _.round(totalProgress / NB_STEPS, 2))\n    if (scaledProgress === normalizedProgress) {\n      return\n    }\n    normalizedProgress = scaledProgress\n    debouncedProgress(input.botId, 'Training', { ...input.trainingSession, progress: normalizedProgress })\n  }\n  try {\n    let output = await PreprocessInput(input, tools)\n    output = await TfidfTokens(output)\n    output = ClusterTokens(output, tools)\n    output = await ExtractEntities(output, tools)\n    output = await AppendNoneIntent(output, tools)\n    const exact_match_index = BuildExactMatchIndex(output)\n    reportProgress()\n    const [oos_model, ctx_model, intent_model_by_ctx, slots_model] = await Promise.all([\n      TrainOutOfScope(output, tools, reportProgress),\n      TrainContextClassifier(output, tools, reportProgress),\n      TrainIntentClassifier(output, tools, reportProgress),\n      TrainSlotTagger(output, tools, reportProgress)\n    ])\n\n    const artefacts: TrainArtefacts = {\n      list_entities: output.list_entities,\n      oos_model,\n      tfidf: output.tfIdf,\n      ctx_model,\n      intent_model_by_ctx,\n      slots_model,\n      vocabVectors: buildVectorsVocab(output.intents),\n      exact_match_index\n      // kmeans: {} add this when mlKmeans supports loading from serialized data,\n    }\n\n    _.merge(model, { success: true, data: { artefacts, output } })\n  } catch (err) {\n    if (err instanceof TrainingCanceledError) {\n      debugTraining.forBot(input.botId, 'Training aborted')\n    } else {\n      // TODO use bp.logger once this is moved in Engine2\n      console.log('Could not finish training NLU model', err)\n    }\n    model.success = false\n  } finally {\n    model.finishedAt = new Date()\n    return model as Model\n  }\n}\n\nclass TrainingCanceledError extends Error {\n  constructor() {\n    super('Training cancelled')\n    this.name = 'CancelError'\n  }\n}\n"]}
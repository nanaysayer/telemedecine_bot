{"version":3,"sources":["language/language-identifier.ts"],"names":["PRETRAINED_LID_176","__dirname","NA_LANG","FastTextLanguageId","constructor","toolkit","initializeModel","tmpFn","tmp","tmpNameSync","postfix","modelBuff","ft","FastText","Model","loadFromFile","model","identify","text","predict","map","pred","label","replace","sort","predA","predB","value","LanguageIdentifierProvider","getLanguageIdentifier","__instance"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;;;AAEA,MAAMA,kBAAkB,GAAG,gBAAKC,SAAL,EAAgB,2BAAhB,CAA3B;AACO,MAAMC,OAAO,GAAG,KAAhB;;;AAEA,MAAMC,kBAAN,CAAyB;AAI9BC,EAAAA,WAAW,CAACC,OAAD,EAAgC;AACzCF,IAAAA,kBAAkB,CAACE,OAAnB,GAA6BA,OAA7B;AACD;;AAED,eAAuBC,eAAvB,GAAyC;AACvC,UAAMC,KAAK,GAAGC,aAAIC,WAAJ,CAAgB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAhB,CAAd;;AACA,UAAMC,SAAS,GAAG,sBAAaX,kBAAb,CAAlB;AACA,2BAAcO,KAAd,EAAqBI,SAArB;AACA,UAAMC,EAAE,GAAG,IAAIT,kBAAkB,CAACE,OAAnB,CAA2BQ,QAA3B,CAAoCC,KAAxC,EAAX;AACA,UAAMF,EAAE,CAACG,YAAH,CAAgBR,KAAhB,CAAN;AACAJ,IAAAA,kBAAkB,CAACa,KAAnB,GAA2BJ,EAA3B;AACD;;AAED,QAAMK,QAAN,CAAeC,IAAf,EAA8E;AAC5E,QAAI,CAACf,kBAAkB,CAACa,KAAxB,EAA+B;AAC7B,YAAMb,kBAAkB,CAACG,eAAnB,EAAN;AACD;;AAED,QAAI,CAACH,kBAAkB,CAACa,KAAxB,EAA+B;AAC7B,aAAO,EAAP;AACD;;AAED,WAAO,CAAC,MAAMb,kBAAkB,CAACa,KAAnB,CAAyBG,OAAzB,CAAiCD,IAAjC,EAAuC,CAAvC,CAAP,EACJE,GADI,CACAC,IAAI,KAAK,EACZ,GAAGA,IADS;AAEZC,MAAAA,KAAK,EAAED,IAAI,CAACC,KAAL,CAAWC,OAAX,CAAmB,WAAnB,EAAgC,EAAhC;AAFK,KAAL,CADJ,EAKJC,IALI,CAKC,CAACC,KAAD,EAAQC,KAAR,KAAkBA,KAAK,CAACC,KAAN,GAAcF,KAAK,CAACE,KALvC,CAAP,CAT4E,CAcvB;AACtD;;AAhC6B;;;;gBAAnBxB,kB;;gBAAAA,kB;;AAmCE,MAAMyB,0BAAN,CAAiC;AAG9C,SAAcC,qBAAd,CAAoCxB,OAApC,EAAmE;AACjE,QAAI,CAACuB,0BAA0B,CAACE,UAAhC,EAA4C;AAC1CF,MAAAA,0BAA0B,CAACE,UAA3B,GAAwC,IAAI3B,kBAAJ,CAAuBE,OAAvB,CAAxC;AACD;;AAED,WAAOuB,0BAA0B,CAACE,UAAlC;AACD;;AAT6C;;;;gBAA3BF,0B","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport { readFileSync, writeFileSync } from 'fs'\nimport { join } from 'path'\nimport tmp from 'tmp'\n\nconst PRETRAINED_LID_176 = join(__dirname, './pre-trained/lid.176.ftz')\nexport const NA_LANG = 'n/a'\n\nexport class FastTextLanguageId {\n  private static model: sdk.MLToolkit.FastText.Model\n  private static toolkit: typeof sdk.MLToolkit\n\n  constructor(toolkit: typeof sdk.MLToolkit) {\n    FastTextLanguageId.toolkit = toolkit\n  }\n\n  protected static async initializeModel() {\n    const tmpFn = tmp.tmpNameSync({ postfix: '.ftz' })\n    const modelBuff = readFileSync(PRETRAINED_LID_176)\n    writeFileSync(tmpFn, modelBuff)\n    const ft = new FastTextLanguageId.toolkit.FastText.Model()\n    await ft.loadFromFile(tmpFn)\n    FastTextLanguageId.model = ft\n  }\n\n  async identify(text: string): Promise<sdk.MLToolkit.FastText.PredictResult[]> {\n    if (!FastTextLanguageId.model) {\n      await FastTextLanguageId.initializeModel()\n    }\n\n    if (!FastTextLanguageId.model) {\n      return []\n    }\n\n    return (await FastTextLanguageId.model.predict(text, 3))\n      .map(pred => ({\n        ...pred,\n        label: pred.label.replace('__label__', '')\n      }))\n      .sort((predA, predB) => predB.value - predA.value) // descending\n  }\n}\n\nexport default class LanguageIdentifierProvider {\n  private static __instance: FastTextLanguageId\n\n  public static getLanguageIdentifier(toolkit: typeof sdk.MLToolkit) {\n    if (!LanguageIdentifierProvider.__instance) {\n      LanguageIdentifierProvider.__instance = new FastTextLanguageId(toolkit)\n    }\n\n    return LanguageIdentifierProvider.__instance\n  }\n}\n"]}
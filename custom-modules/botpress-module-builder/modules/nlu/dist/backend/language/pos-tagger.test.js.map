{"version":3,"sources":["language/pos-tagger.test.ts"],"names":["describe","test","feats","probability","result","tags","fallbackTagger","tag","expect","toEqual","every","t","toBeTruthy","marginal","forEach","res","tagger","mockedTagger","jest","fn","xseq","n_space","filter","length","mock","calls"],"mappings":";;AAEA;;AAEA;;AAEAA,QAAQ,CAAC,YAAD,EAAe,MAAM;AAC3BC,EAAAA,IAAI,CAAC,0CAAD,EAA6C,MAAM;AACrD,UAAMC,KAAK,GAAG,CAAC,CAAC,SAAD,EAAY,OAAZ,CAAD,EAAuB,CAAC,SAAD,CAAvB,EAAoC,CAAC,SAAD,EAAY,OAAZ,CAApC,CAAd;;AACA,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA,MAAM,EAAEC;AAAvB,QAAgCC,0BAAeC,GAAf,CAAmBL,KAAnB,CAAtC;;AACAM,IAAAA,MAAM,CAACL,WAAD,CAAN,CAAoBM,OAApB,CAA4B,CAA5B;AACAD,IAAAA,MAAM,CAACH,IAAI,CAACK,KAAL,CAAWC,CAAC,IAAIA,CAAC,KAAK,KAAtB,CAAD,CAAN,CAAqCC,UAArC;;AAEAN,8BAAeO,QAAf,CAAwBX,KAAxB,EAA+BY,OAA/B,CAAuCC,GAAG,IAAI;AAC5CP,MAAAA,MAAM,CAACO,GAAD,CAAN,CAAYN,OAAZ,CAAoB;AAAE,eAAO;AAAT,OAApB;AACD,KAFD;AAGD,GATG,CAAJ;AAWAR,EAAAA,IAAI,CAAC,+DAAD,EAAkE,MAAM;AAC1E,UAAMe,MAAM,GAAG,6BAAa,IAAb,EAAmB,EAAnB,CAAf;AACAR,IAAAA,MAAM,CAACQ,MAAD,CAAN,CAAeP,OAAf,CAAuBH,yBAAvB;AACD,GAHG,CAAJ;AAKAN,EAAAA,QAAQ,CAAC,aAAD,EAAgB,MAAM;AAC5B,UAAMiB,YAAY,GAAG,EACnB,GAAGX,yBADgB;AAEnBC,MAAAA,GAAG,EAAEW,IAAI,CAACC,EAAL,CAAQC,IAAI,IAAId,0BAAeC,GAAf,CAAmBa,IAAnB,CAAhB;AAFc,KAArB;AAKAnB,IAAAA,IAAI,CAAC,yDAAD,EAA4D,MAAM;AACpE,YAAMmB,IAAI,GAAG,2CACX,iHADW,CAAb;AAGA,YAAMC,OAAO,GAAGD,IAAI,CAACE,MAAL,CAAYX,CAAC,IAAI,yBAAQA,CAAR,CAAjB,EAA6BY,MAA7C;AAEA,YAAMlB,IAAI,GAAG,4BAAYY,YAAZ,EAAsDG,IAAtD,CAAb;AACAZ,MAAAA,MAAM,CAACS,YAAY,CAACV,GAAb,CAAiBiB,IAAjB,CAAsBC,KAAtB,CAA4B,CAA5B,EAA+B,CAA/B,EAAkCF,MAAnC,CAAN,CAAiDd,OAAjD,CAAyDW,IAAI,CAACG,MAAL,GAAcF,OAAvE;AACAb,MAAAA,MAAM,CAACH,IAAI,CAACiB,MAAL,CAAYX,CAAC,IAAI,yBAAQA,CAAR,CAAjB,EAA6BY,MAA9B,CAAN,CAA4Cd,OAA5C,CAAoDY,OAApD;AACAhB,MAAAA,IAAI,CACDiB,MADH,CACUX,CAAC,IAAI,CAAC,yBAAQA,CAAR,CADhB,EAEGG,OAFH,CAEWH,CAAC,IAAI;AACZH,QAAAA,MAAM,CAACG,CAAD,CAAN,CAAUF,OAAV,CAAkB,KAAlB,EADY,CACa;AAC1B,OAJH;AAKD,KAdG,CAAJ;AAeD,GArBO,CAAR;AAsBD,CAvCO,CAAR","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\n\nimport { isSpace, tokenizeLatinTextForTests } from '../tools/token-utils'\n\nimport { fallbackTagger, getPOSTagger, tagSentence } from './pos-tagger'\n\ndescribe('POS Tagger', () => {\n  test('Fallback tagger returns NA tags properly', () => {\n    const feats = [['feat1=1', 'feat2'], ['feat1=2'], ['feat1=3', 'feat2']]\n    const { probability, result: tags } = fallbackTagger.tag(feats)\n    expect(probability).toEqual(1)\n    expect(tags.every(t => t === 'N/A')).toBeTruthy()\n\n    fallbackTagger.marginal(feats).forEach(res => {\n      expect(res).toEqual({ 'N/A': 1 })\n    })\n  })\n\n  test('Get tagger returns FB tagger for other languages than english', () => {\n    const tagger = getPOSTagger('de', {} as typeof sdk.MLToolkit)\n    expect(tagger).toEqual(fallbackTagger)\n  })\n\n  describe('tagSentence', () => {\n    const mockedTagger = {\n      ...fallbackTagger,\n      tag: jest.fn(xseq => fallbackTagger.tag(xseq))\n    }\n\n    test('Calls tagger without spaces and adds _ for space tokens', () => {\n      const xseq = tokenizeLatinTextForTests(\n        'A Sea Fox is a Fox-alien-fish crossbreed with a strange amalgamation of a bunch of different animals and plants'\n      )\n      const n_space = xseq.filter(t => isSpace(t)).length\n\n      const tags = tagSentence(mockedTagger as sdk.MLToolkit.CRF.Tagger, xseq)\n      expect(mockedTagger.tag.mock.calls[0][0].length).toEqual(xseq.length - n_space)\n      expect(tags.filter(t => isSpace(t)).length).toEqual(n_space)\n      tags\n        .filter(t => !isSpace(t))\n        .forEach(t => {\n          expect(t).toEqual('N/A') // return value of the mocked tagger\n        })\n    })\n  })\n})\n"]}
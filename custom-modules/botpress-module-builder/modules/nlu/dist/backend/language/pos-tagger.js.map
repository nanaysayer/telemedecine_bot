{"version":3,"sources":["language/pos-tagger.ts"],"names":["POS_CLASSES","SPACE","isPOSAvailable","lang","getPretrainedModelFilePath","languageCode","path","join","__dirname","n_alpha","word","match","length","n_digits","pref","nchars","slice","suff","wordFeatures","seq","idx","toLowerCase","a","d","bos","eos","feats","BOS","EOS","prefix_1","prefix_2","prefix_3","prefix_4","suffix_1","suffix_2","suffix_3","suffix_4","len","alpha","contains_num","contains_special","prev_word","next_word","Object","entries","filter","key","val","map","v","fallbackTagger","tag","probability","result","Array","fill","open","f","marginal","taggersByLang","getPOSTagger","toolkit","tagger","CRF","createTagger","tagSentence","tokens","words","spaceIdx","reduce","token","i","push","tags","splice"],"mappings":"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","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport path from 'path'\n\nimport { isSpace, SPACE } from '../tools/token-utils'\n\ntype ElementType<T extends ReadonlyArray<unknown>> = T extends ReadonlyArray<infer ElementType> ? ElementType : never\nexport type POSClass = ElementType<typeof POS_CLASSES>\n\nexport const POS_CLASSES = [\n  'ADJ',\n  'ADP',\n  'ADV',\n  'AUX',\n  'CONJ',\n  'CCONJ',\n  'DET',\n  'INTJ',\n  'NOUN',\n  'NUM',\n  'PART',\n  'PRON',\n  'PROPN',\n  'PUNCT',\n  'SCONJ',\n  'SYM',\n  'VERB',\n  'X',\n  SPACE\n] as const\n\nexport function isPOSAvailable(lang: string): boolean {\n  // TODO check that language is part of supported languages once we support more\n  return lang === 'en' || lang == 'fr'\n}\n\nfunction getPretrainedModelFilePath(languageCode: string): string {\n  return path.join(__dirname, `./pre-trained/pos.${languageCode}.model`)\n}\n\nfunction n_alpha(word: string): number {\n  // TODO support more alphabets\n  return (word.match(/[a-zA-z]/g) || []).length\n}\n\nfunction n_digits(word: string): number {\n  return (word.match(/\\d/g) || []).length\n}\n\nfunction pref(word: string, nchars: number): string {\n  return word.length > nchars ? word.slice(0, nchars) : ''\n}\n\nfunction suff(word: string, nchars: number): string {\n  return word.length > nchars ? word.slice(-nchars) : ''\n}\n\nfunction wordFeatures(seq: string[], idx: number): string[] {\n  const word = seq[idx].toLowerCase()\n  const a = n_alpha(word)\n  const d = n_digits(word)\n  const bos = idx === 0\n  const eos = idx == seq.length - 1\n  const feats = {\n    BOS: bos,\n    EOS: eos,\n    prefix_1: pref(word, 1),\n    prefix_2: pref(word, 2),\n    prefix_3: pref(word, 3),\n    prefix_4: pref(word, 4),\n    suffix_1: suff(word, 1),\n    suffix_2: suff(word, 2),\n    suffix_3: suff(word, 3),\n    suffix_4: suff(word, 4),\n    len: word.length,\n    alpha: a,\n    contains_num: d > 0,\n    contains_special: word.length - a - d > 0,\n    word: word,\n    prev_word: bos ? '' : seq[idx - 1].toLowerCase(),\n    next_word: eos ? '' : seq[idx + 1].toLowerCase()\n  }\n\n  return Object.entries(feats)\n    .filter(([key, val]) => val)\n    .map(([key, val]) => {\n      const v = typeof val === 'boolean' ? '' : `=${val}`\n      return `${key}${v}`\n    })\n}\n\nexport const fallbackTagger: sdk.MLToolkit.CRF.Tagger = {\n  tag: seq => ({ probability: 1, result: new Array(seq.length).fill('N/A') }),\n  open: f => false,\n  marginal: seq => new Array(seq.length).fill({ 'N/A': 1 })\n}\n\n// eventually this will be moved in language provider\n// POS tagging will reside language server once we support more than english\nconst taggersByLang: { [lang: string]: sdk.MLToolkit.CRF.Tagger } = {}\n\nexport function getPOSTagger(languageCode: string, toolkit: typeof sdk.MLToolkit): sdk.MLToolkit.CRF.Tagger {\n  if (!isPOSAvailable(languageCode)) {\n    return fallbackTagger\n  }\n\n  if (!taggersByLang[languageCode]) {\n    const tagger = toolkit.CRF.createTagger()\n    tagger.open(getPretrainedModelFilePath(languageCode))\n    taggersByLang[languageCode] = tagger\n  }\n\n  return taggersByLang[languageCode]\n}\n\nexport function tagSentence(tagger: sdk.MLToolkit.CRF.Tagger, tokens: string[]): POSClass[] {\n  const [words, spaceIdx] = tokens.reduce(\n    ([words, spaceIdx], token, idx) => {\n      if (isSpace(token)) {\n        return [words, [...spaceIdx, idx]]\n      } else {\n        return [[...words, token], spaceIdx]\n      }\n    },\n    [[], []]\n  ) as [string[], number[]]\n\n  const feats: string[][] = []\n  for (let i = 0; i < words.length; i++) {\n    feats.push(wordFeatures(words, i))\n  }\n\n  const tags = tagger.tag(feats).result\n  for (const idx of spaceIdx) {\n    tags.splice(idx, 0, SPACE)\n  }\n\n  return tags as POSClass[]\n}\n"]}
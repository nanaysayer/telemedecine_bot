{"version":3,"sources":["autoTrain.ts"],"names":["KVS_KEY","set","bp","botId","autoTrain","kvs","forBot","delete","isOn","exists"],"mappings":";;;;;;AAEA,MAAMA,OAAO,GAAG,eAAhB;;AAEO,MAAMC,GAAG,GAAG,OAAOC,EAAP,EAAuBC,KAAvB,EAAsCC,SAAtC,KAA6D;AAC9E,QAAMC,GAAG,GAAGH,EAAE,CAACG,GAAH,CAAOC,MAAP,CAAcH,KAAd,CAAZ;;AACA,MAAIC,SAAJ,EAAe;AACb,UAAMC,GAAG,CAACE,MAAJ,CAAWP,OAAX,CAAN;AACD,GAFD,MAEO;AACL,UAAMK,GAAG,CAACJ,GAAJ,CAAQD,OAAR,EAAiB,OAAjB,CAAN;AACD;AACF,CAPM;;;;AASA,MAAMQ,IAAI,GAAG,OAAON,EAAP,EAAuBC,KAAvB,KAAyC;AAC3D,SAAO,EAAE,MAAMD,EAAE,CAACG,GAAH,CAAOC,MAAP,CAAcH,KAAd,EAAqBM,MAArB,CAA4BT,OAA5B,CAAR,CAAP;AACD,CAFM","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\n\nconst KVS_KEY = 'nlu-autoTrain'\n\nexport const set = async (bp: typeof sdk, botId: string, autoTrain: boolean) => {\n  const kvs = bp.kvs.forBot(botId)\n  if (autoTrain) {\n    await kvs.delete(KVS_KEY)\n  } else {\n    await kvs.set(KVS_KEY, 'pause')\n  }\n}\n\nexport const isOn = async (bp: typeof sdk, botId: string) => {\n  return !(await bp.kvs.forBot(botId).exists(KVS_KEY))\n}\n"]}
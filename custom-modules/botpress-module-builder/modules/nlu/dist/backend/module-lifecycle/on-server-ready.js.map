{"version":3,"sources":["module-lifecycle/on-server-ready.ts"],"names":["getOnServerReady","state","bp","loadModel","botId","hash","language","nluByBot","ghost","forBot","model","engine","logger","warn","cancelTraining","trainSession","_","get","status","lock","unlock","broadcastLoadModel","distributed","broadcast","broadcastCancelTraining"],"mappings":";;;;;;;AACA;;AAEA;;AACA;;AACA;;;;AAGO,SAASA,gBAAT,CAA0BC,KAA1B,EAA2C;AAChD,SAAO,MAAOC,EAAP,IAA0B;AAC/B,UAAMC,SAAS,GAAG,OAAOC,KAAP,EAAsBC,IAAtB,EAAoCC,QAApC,KAAyD;AACzE,UAAI,CAACL,KAAK,CAACM,QAAN,CAAeH,KAAf,CAAL,EAA4B;AAC1B;AACD;;AAED,YAAMI,KAAK,GAAGN,EAAE,CAACM,KAAH,CAASC,MAAT,CAAgBL,KAAhB,CAAd;AACA,YAAMM,KAAK,GAAG,MAAM,4BAASF,KAAT,EAAgBH,IAAhB,EAAsBC,QAAtB,CAApB;;AACA,UAAII,KAAJ,EAAW;AACT,YAAIT,KAAK,CAACM,QAAN,CAAeH,KAAf,CAAJ,EAA2B;AACzB,gBAAMH,KAAK,CAACM,QAAN,CAAeH,KAAf,EAAsBO,MAAtB,CAA6BR,SAA7B,CAAuCO,KAAvC,CAAN;AACD,SAFD,MAEO;AACLR,UAAAA,EAAE,CAACU,MAAH,CAAUC,IAAV,CAAgB,sCAAqCT,KAAM,EAA3D;AACD;AACF;AACF,KAdD;;AAgBA,UAAMU,cAAc,GAAG,OAAOV,KAAP,EAAsBE,QAAtB,KAA2C;AAChE,YAAMS,YAA6B,GAAGC,gBAAEC,GAAF,CAAMhB,KAAN,EAAc,YAAWG,KAAM,kBAAiBE,QAAS,EAAzD,CAAtC;;AAEA,UAAIS,YAAY,IAAIA,YAAY,CAACG,MAAb,KAAwB,UAA5C,EAAwD;AACtD,YAAIH,YAAY,CAACI,IAAjB,EAAuB;AACrBJ,UAAAA,YAAY,CAACI,IAAb,CAAkBC,MAAlB;AACD;;AACDL,QAAAA,YAAY,CAACG,MAAb,GAAsB,UAAtB;AACA,cAAM,6CAAmBhB,EAAnB,EAAuBE,KAAvB,EAA8BW,YAA9B,CAAN;AACD;AACF,KAVD,CAjB+B,CA6B/B;;;AACAd,IAAAA,KAAK,CAACoB,kBAAN,GAA2B,MAAMnB,EAAE,CAACoB,WAAH,CAAeC,SAAf,CAAyBpB,SAAzB,CAAjC,CA9B+B,CA+B/B;;AACAF,IAAAA,KAAK,CAACuB,uBAAN,GAAgC,MAAMtB,EAAE,CAACoB,WAAH,CAAeC,SAAf,CAAyBT,cAAzB,CAAtC;AACA,UAAM,kBAAQZ,EAAR,EAAYD,KAAZ,CAAN;AACD,GAlCD;AAmCD","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport _ from 'lodash'\n\nimport makeApi from '../api'\nimport { getModel } from '../model-service'\nimport { setTrainingSession } from '../train-session-service'\nimport { NLUState, TrainingSession } from '../typings'\n\nexport function getOnServerReady(state: NLUState) {\n  return async (bp: typeof sdk) => {\n    const loadModel = async (botId: string, hash: string, language: string) => {\n      if (!state.nluByBot[botId]) {\n        return\n      }\n\n      const ghost = bp.ghost.forBot(botId)\n      const model = await getModel(ghost, hash, language)\n      if (model) {\n        if (state.nluByBot[botId]) {\n          await state.nluByBot[botId].engine.loadModel(model)\n        } else {\n          bp.logger.warn(`Can't load model for unmounted bot ${botId}`)\n        }\n      }\n    }\n\n    const cancelTraining = async (botId: string, language: string) => {\n      const trainSession: TrainingSession = _.get(state, `nluByBot.${botId}.trainSessions.${language}`)\n\n      if (trainSession && trainSession.status === 'training') {\n        if (trainSession.lock) {\n          trainSession.lock.unlock()\n        }\n        trainSession.status = 'canceled'\n        await setTrainingSession(bp, botId, trainSession)\n      }\n    }\n\n    // @ts-ignore\n    state.broadcastLoadModel = await bp.distributed.broadcast(loadModel)\n    // @ts-ignore\n    state.broadcastCancelTraining = await bp.distributed.broadcast(cancelTraining)\n    await makeApi(bp, state)\n  }\n}\n"]}
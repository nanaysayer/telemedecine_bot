{"version":3,"sources":["module-lifecycle/on-bot-mount.ts"],"names":["missingLangMsg","botId","KVS_TRAINING_STATUS_KEY","getOnBotMount","state","bp","bot","bots","getBotById","ghost","forBot","entityService","EntityService","languages","length","logger","warn","notSupported","_","difference","engine","Engine","defaultLanguage","id","trainOrLoad","debounce","forceTrain","nluByBot","intentDefs","entityDefs","getCustomEntities","hash","ModelService","computeModelHash","kvs","set","Promise","mapSeries","languageCode","lock","distributed","acquireLock","pruneModels","model","getModel","process","env","BP_NLU_DISABLE_TRAINING","trainSession","trainSessions","train","success","loadModel","saveModel","broadcastLoadModel","unlock","delete","leading","trainWatcher","onFileChanged","f","includes","cancelTraining","map","lang","key","clearLock","broadcastCancelTraining","isTraining","exists","FORCE_TRAIN_ON_MOUNT"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAGA,MAAMA,cAAc,GAAGC,KAAK,IACzB,OAAMA,KAAM,8JADf;;AAGA,MAAMC,uBAAuB,GAAG,oBAAhC;;AAEO,SAASC,aAAT,CAAuBC,KAAvB,EAAwC;AAC7C,SAAO,OAAOC,EAAP,EAAuBJ,KAAvB,KAAyC;AAC9C,UAAMK,GAAG,GAAG,MAAMD,EAAE,CAACE,IAAH,CAAQC,UAAR,CAAmBP,KAAnB,CAAlB;AACA,UAAMQ,KAAK,GAAGJ,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgBT,KAAhB,CAAd;AACA,UAAMU,aAAa,GAAG,IAAIC,wBAAJ,CAAkBH,KAAlB,EAAyBR,KAAzB,CAAtB;AAEA,UAAMY,SAAS,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAlB;;AACA,QAAIP,GAAG,CAACO,SAAJ,CAAcC,MAAd,KAAyBD,SAAS,CAACC,MAAvC,EAA+C;AAC7CT,MAAAA,EAAE,CAACU,MAAH,CAAUC,IAAV,CAAehB,cAAc,CAACC,KAAD,CAA7B,EAAsC;AAAEgB,QAAAA,YAAY,EAAEC,gBAAEC,UAAF,CAAab,GAAG,CAACO,SAAjB,EAA4BA,SAA5B;AAAhB,OAAtC;AACD;;AAED,UAAMO,MAAM,GAAG,IAAIC,eAAJ,CAAWf,GAAG,CAACgB,eAAf,EAAgChB,GAAG,CAACiB,EAApC,CAAf;;AACA,UAAMC,WAAW,GAAGN,gBAAEO,QAAF,CAClB,OAAOC,UAAmB,GAAG,KAA7B,KAAuC;AACrC;AACA,UAAI,CAACtB,KAAK,CAACuB,QAAN,CAAe1B,KAAf,CAAL,EAA4B;AAC1B;AACD;;AAED,YAAM2B,UAAU,GAAG,MAAM,+BAAWnB,KAAX,CAAzB;AACA,YAAMoB,UAAU,GAAG,MAAMlB,aAAa,CAACmB,iBAAd,EAAzB;AACA,YAAMC,IAAI,GAAGC,YAAY,CAACC,gBAAb,CAA8BL,UAA9B,EAA0CC,UAA1C,CAAb;AAEA,YAAMK,GAAG,GAAG7B,EAAE,CAAC6B,GAAH,CAAOxB,MAAP,CAAcT,KAAd,CAAZ;AACA,YAAMiC,GAAG,CAACC,GAAJ,CAAQjC,uBAAR,EAAiC,UAAjC,CAAN;;AAEA,UAAI;AACF,cAAMkC,OAAO,CAACC,SAAR,CAAkBxB,SAAlB,EAA6B,MAAMyB,YAAN,IAAsB;AACvD;AACA,gBAAMC,IAAI,GAAG,MAAMlC,EAAE,CAACmC,WAAH,CAAeC,WAAf,CAA2B,8CAAoBxC,KAApB,EAA2BqC,YAA3B,CAA3B,EAAqE,iBAAG,IAAH,CAArE,CAAnB;;AACA,cAAI,CAACC,IAAL,EAAW;AACT;AACD;;AACD,gBAAMP,YAAY,CAACU,WAAb,CAAyBjC,KAAzB,EAAgC6B,YAAhC,CAAN;AACA,cAAIK,KAAK,GAAG,MAAMX,YAAY,CAACY,QAAb,CAAsBnC,KAAtB,EAA6BsB,IAA7B,EAAmCO,YAAnC,CAAlB;;AACA,cAAI,CAACZ,UAAU,IAAI,CAACiB,KAAhB,KAA0B,CAAC,iBAAGE,OAAO,CAACC,GAAR,CAAYC,uBAAf,CAA/B,EAAwE;AACtE,kBAAMC,YAAY,GAAG,8CAAoBV,YAApB,EAAkCC,IAAlC,CAArB;AACAnC,YAAAA,KAAK,CAACuB,QAAN,CAAe1B,KAAf,EAAsBgD,aAAtB,CAAoCX,YAApC,IAAoDU,YAApD;AAEAL,YAAAA,KAAK,GAAG,MAAMvB,MAAM,CAAC8B,KAAP,CAAatB,UAAb,EAAyBC,UAAzB,EAAqCS,YAArC,EAAmDU,YAAnD,CAAd;;AACA,gBAAIL,KAAK,CAACQ,OAAV,EAAmB;AACjB,oBAAM/B,MAAM,CAACgC,SAAP,CAAiBT,KAAjB,CAAN;AACA,oBAAMX,YAAY,CAACqB,SAAb,CAAuB5C,KAAvB,EAA8BkC,KAA9B,EAAqCZ,IAArC,CAAN;AACD;AACF;;AACD,cAAI;AAAA;;AACF,0BAAIY,KAAJ,2CAAI,OAAOQ,OAAX,EAAoB;AAClB,oBAAM/C,KAAK,CAACkD,kBAAN,CAAyBrD,KAAzB,EAAgC8B,IAAhC,EAAsCO,YAAtC,CAAN;AACD;AACF,WAJD,SAIU;AACR,kBAAMC,IAAI,CAACgB,MAAL,EAAN;AACD;AACF,SAzBK,CAAN;AA0BD,OA3BD,SA2BU;AACR,cAAMrB,GAAG,CAACsB,MAAJ,CAAWtD,uBAAX,CAAN;AACD;AACF,KA5CiB,EA6ClB,KA7CkB,EA8ClB;AAAEuD,MAAAA,OAAO,EAAE;AAAX,KA9CkB,CAApB,CAX8C,CA2D9C;AACA;;;AACA,UAAMC,YAAY,GAAGrD,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgBT,KAAhB,EAAuB0D,aAAvB,CAAqC,MAAMC,CAAN,IAAW;AACnE,UAAIA,CAAC,CAACC,QAAF,CAAW,SAAX,KAAyBD,CAAC,CAACC,QAAF,CAAW,UAAX,CAA7B,EAAqD;AACnD,YAAI,MAAM,qBAAcxD,EAAd,EAAkBJ,KAAlB,CAAV,EAAoC;AAClC;AACA,gBAAM6D,cAAc,EAApB;AACAtC,UAAAA,WAAW;AACZ;AACF;AACF,KARoB,CAArB;;AAUA,UAAMsC,cAAc,GAAG,YAAY;AACjC,YAAM1B,OAAO,CAAC2B,GAAR,CAAYlD,SAAZ,EAAuB,MAAMmD,IAAN,IAAc;AACzC,cAAMC,GAAG,GAAG,8CAAoBhE,KAApB,EAA2B+D,IAA3B,CAAZ;AACA,cAAM3D,EAAE,CAACmC,WAAH,CAAe0B,SAAf,CAAyBD,GAAzB,CAAN;AACA,eAAO7D,KAAK,CAAC+D,uBAAN,CAA8BlE,KAA9B,EAAqC+D,IAArC,CAAP;AACD,OAJK,CAAN;AAKD,KAND;;AAQA,UAAMI,UAAU,GAAG,YAA8B;AAC/C,aAAO/D,EAAE,CAAC6B,GAAH,CAAOxB,MAAP,CAAcT,KAAd,EAAqBoE,MAArB,CAA4BnE,uBAA5B,CAAP;AACD,KAFD;;AAIAE,IAAAA,KAAK,CAACuB,QAAN,CAAe1B,KAAf,IAAwB;AACtBA,MAAAA,KADsB;AAEtBmB,MAAAA,MAFsB;AAGtBsC,MAAAA,YAHsB;AAItBlC,MAAAA,WAJsB;AAKtByB,MAAAA,aAAa,EAAE,EALO;AAMtBa,MAAAA,cANsB;AAOtBM,MAAAA,UAPsB;AAQtBzD,MAAAA;AARsB,KAAxB;AAWAa,IAAAA,WAAW,CAAC,iBAAGqB,OAAO,CAACC,GAAR,CAAYwB,oBAAf,CAAD,CAAX,CA9F8C,CA8FI;AACnD,GA/FD;AAgGD","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport _ from 'lodash'\nimport ms from 'ms'\nimport yn from 'yn'\n\nimport { isOn as isAutoTrainOn } from '../autoTrain'\nimport Engine from '../engine'\nimport EntityService from '../entities/entities-service'\nimport { getIntents } from '../intents/intent-service'\nimport * as ModelService from '../model-service'\nimport { makeTrainingSession, makeTrainSessionKey } from '../train-session-service'\nimport { NLUState } from '../typings'\n\nconst missingLangMsg = botId =>\n  `Bot ${botId} has configured languages that are not supported by language sources. Configure a before incoming hook to call an external NLU provider for those languages.`\n\nconst KVS_TRAINING_STATUS_KEY = 'nlu:trainingStatus'\n\nexport function getOnBotMount(state: NLUState) {\n  return async (bp: typeof sdk, botId: string) => {\n    const bot = await bp.bots.getBotById(botId)\n    const ghost = bp.ghost.forBot(botId)\n    const entityService = new EntityService(ghost, botId)\n\n    const languages = ['uk', 'en', 'ru']\n    if (bot.languages.length !== languages.length) {\n      bp.logger.warn(missingLangMsg(botId), { notSupported: _.difference(bot.languages, languages) })\n    }\n\n    const engine = new Engine(bot.defaultLanguage, bot.id)\n    const trainOrLoad = _.debounce(\n      async (forceTrain: boolean = false) => {\n        // bot got deleted\n        if (!state.nluByBot[botId]) {\n          return\n        }\n\n        const intentDefs = await getIntents(ghost)\n        const entityDefs = await entityService.getCustomEntities()\n        const hash = ModelService.computeModelHash(intentDefs, entityDefs)\n\n        const kvs = bp.kvs.forBot(botId)\n        await kvs.set(KVS_TRAINING_STATUS_KEY, 'training')\n\n        try {\n          await Promise.mapSeries(languages, async languageCode => {\n            // shorter lock and extend in training steps\n            const lock = await bp.distributed.acquireLock(makeTrainSessionKey(botId, languageCode), ms('5m'))\n            if (!lock) {\n              return\n            }\n            await ModelService.pruneModels(ghost, languageCode)\n            let model = await ModelService.getModel(ghost, hash, languageCode)\n            if ((forceTrain || !model) && !yn(process.env.BP_NLU_DISABLE_TRAINING)) {\n              const trainSession = makeTrainingSession(languageCode, lock)\n              state.nluByBot[botId].trainSessions[languageCode] = trainSession\n\n              model = await engine.train(intentDefs, entityDefs, languageCode, trainSession)\n              if (model.success) {\n                await engine.loadModel(model)\n                await ModelService.saveModel(ghost, model, hash)\n              }\n            }\n            try {\n              if (model?.success) {\n                await state.broadcastLoadModel(botId, hash, languageCode)\n              }\n            } finally {\n              await lock.unlock()\n            }\n          })\n        } finally {\n          await kvs.delete(KVS_TRAINING_STATUS_KEY)\n        }\n      },\n      10000,\n      { leading: true }\n    )\n    // register trainOrLoad with ghost file watcher\n    // we use local events so training occurs on the same node where the request for changes enters\n    const trainWatcher = bp.ghost.forBot(botId).onFileChanged(async f => {\n      if (f.includes('intents') || f.includes('entities')) {\n        if (await isAutoTrainOn(bp, botId)) {\n          // eventually cancel & restart training only for given language\n          await cancelTraining()\n          trainOrLoad()\n        }\n      }\n    })\n\n    const cancelTraining = async () => {\n      await Promise.map(languages, async lang => {\n        const key = makeTrainSessionKey(botId, lang)\n        await bp.distributed.clearLock(key)\n        return state.broadcastCancelTraining(botId, lang)\n      })\n    }\n\n    const isTraining = async (): Promise<boolean> => {\n      return bp.kvs.forBot(botId).exists(KVS_TRAINING_STATUS_KEY)\n    }\n\n    state.nluByBot[botId] = {\n      botId,\n      engine,\n      trainWatcher,\n      trainOrLoad,\n      trainSessions: {},\n      cancelTraining,\n      isTraining,\n      entityService\n    }\n\n    trainOrLoad(yn(process.env.FORCE_TRAIN_ON_MOUNT)) // floating promise on purpose\n  }\n}\n"]}
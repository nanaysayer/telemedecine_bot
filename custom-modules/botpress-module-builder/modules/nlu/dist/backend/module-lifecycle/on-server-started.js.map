{"version":3,"sources":["module-lifecycle/on-server-started.ts"],"names":["initializeLanguageProvider","bp","state","globalConfig","config","getModuleConfig","languageProvider","LangProvider","initialize","languageSources","logger","validProvidersCount","validLanguages","getHealth","health","isEnabled","length","e","failure","code","error","address","port","process","IS_FAILSAFE","exit","initializeEngine","tools","partOfSpeechUtterances","tokenUtterances","lang","tagger","MLToolkit","map","tagSentence","bind","tokenize_utterances","utterances","vocab","tokenize","vectorize_tokens","tokens","a","vectorize","x","Array","from","values","generateSimilarJunkWords","mlToolkit","duckling","DucklingEntityExtractor","reportTrainingProgress","botId","message","trainSession","ev","type","working","status","_","omit","realtime","sendPayload","RealTimePayload","forAdmins","setTimeout","Engine","provideTools","initDucklingExtractor","configure","ducklingEnabled","ducklingURL","EVENTS_TO_IGNORE","registerMiddleware","events","name","direction","order","description","handler","event","next","nluByBot","preview","includes","hasFlag","IO","WellKnownFlags","SKIP_NATIVE_NLU","nluResults","engine","extractEngine2","predict","nlu","includedContexts","err","InvalidLanguagePredictorError","model","ghost","forBot","languageCode","loadModel","max_tries","throw_original","merge","removeSensitiveText","warn","entities","payload","text","sensitiveEntities","filter","ent","sensitive","entity","stars","repeat","data","value","replace","getOnSeverStarted"],"mappings":";;;;;;;;AAAA;;AAEA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAGO,MAAMA,0BAA0B,GAAG,OAAOC,EAAP,EAAuBC,KAAvB,KAA2C;AACnF,QAAMC,YAAY,GAAI,MAAMF,EAAE,CAACG,MAAH,CAAUC,eAAV,CAA0B,KAA1B,CAA5B;;AAEA,MAAI;AACF,UAAMC,gBAAgB,GAAG,MAAMC,0BAAaC,UAAb,CAAwBL,YAAY,CAACM,eAArC,EAAsDR,EAAE,CAACS,MAAzD,CAA/B;AACA,UAAM;AAAEC,MAAAA,mBAAF;AAAuBC,MAAAA;AAAvB,QAA0CN,gBAAgB,CAACO,SAAjB,EAAhD;AACA,UAAMC,MAAM,GAAG;AACbC,MAAAA,SAAS,EAAEJ,mBAAmB,GAAG,CAAtB,IAA2BC,cAAc,CAACI,MAAf,GAAwB,CADjD;AAEbL,MAAAA,mBAFa;AAGbC,MAAAA;AAHa,KAAf;AAMAV,IAAAA,KAAK,CAACI,gBAAN,GAAyBA,gBAAzB;AACAJ,IAAAA,KAAK,CAACY,MAAN,GAAeA,MAAf;AACD,GAXD,CAWE,OAAOG,CAAP,EAAU;AACV,QAAIA,CAAC,CAACC,OAAF,IAAaD,CAAC,CAACC,OAAF,CAAUC,IAAV,KAAmB,cAApC,EAAoD;AAClDlB,MAAAA,EAAE,CAACS,MAAH,CAAUU,KAAV,CAAiB,+CAA8CH,CAAC,CAACC,OAAF,CAAUG,OAAQ,IAAGJ,CAAC,CAACC,OAAF,CAAUI,IAAK,EAAnG;;AACA,UAAI,CAACC,OAAO,CAACC,WAAb,EAA0B;AACxBD,QAAAA,OAAO,CAACE,IAAR;AACD;AACF;;AACD,UAAMR,CAAN;AACD;AACF,CAvBM;;;;AAyBP,SAASS,gBAAT,CAA0BzB,EAA1B,EAA0CC,KAA1C,EAA2D;AACzD,QAAMyB,KAAY,GAAG;AACnBC,IAAAA,sBAAsB,EAAE,CAACC,eAAD,EAA8BC,IAA9B,KAA+C;AACrE,YAAMC,MAAM,GAAG,6BAAaD,IAAb,EAAmB7B,EAAE,CAAC+B,SAAtB,CAAf;AACA,aAAOH,eAAe,CAACI,GAAhB,CAAoBC,uBAAYC,IAAZ,CAAiB,IAAjB,EAAuBJ,MAAvB,CAApB,CAAP;AACD,KAJkB;AAKnBK,IAAAA,mBAAmB,EAAE,CAACC,UAAD,EAAuBP,IAAvB,EAAqCQ,KAArC,KACnBpC,KAAK,CAACI,gBAAN,CAAuBiC,QAAvB,CAAgCF,UAAhC,EAA4CP,IAA5C,EAAkDQ,KAAlD,CANiB;AAOnBE,IAAAA,gBAAgB,EAAE,OAAOC,MAAP,EAAeX,IAAf,KAAwB;AACxC,YAAMY,CAAC,GAAG,MAAMxC,KAAK,CAACI,gBAAN,CAAuBqC,SAAvB,CAAiCF,MAAjC,EAAyCX,IAAzC,CAAhB;AACA,aAAOY,CAAC,CAACT,GAAF,CAAMW,CAAC,IAAIC,KAAK,CAACC,IAAN,CAAWF,CAAC,CAACG,MAAF,EAAX,CAAX,CAAP;AACD,KAVkB;AAWnBC,IAAAA,wBAAwB,EAAE,CAACV,KAAD,EAAkBR,IAAlB,KACxB5B,KAAK,CAACI,gBAAN,CAAuB0C,wBAAvB,CAAgDV,KAAhD,EAAuDR,IAAvD,CAZiB;AAanBmB,IAAAA,SAAS,EAAEhD,EAAE,CAAC+B,SAbK;AAcnBkB,IAAAA,QAAQ,EAAE,IAAIC,2CAAJ,CAA4BlD,EAAE,CAACS,MAA/B,CAdS;AAenB0C,IAAAA,sBAAsB,EAAE,OAAOC,KAAP,EAAsBC,OAAtB,EAAuCC,YAAvC,KAAyE;AAC/F,YAAM,6CAAmBtD,EAAnB,EAAuBoD,KAAvB,EAA8BE,YAA9B,CAAN;AAEA,YAAMC,EAAE,GAAG;AACTC,QAAAA,IAAI,EAAE,KADG;AAETC,QAAAA,OAAO,EAAEH,YAAY,CAACI,MAAb,KAAwB,UAFxB;AAGTN,QAAAA,KAHS;AAITC,QAAAA,OAJS;AAKTC,QAAAA,YAAY,EAAEK,gBAAEC,IAAF,CAAON,YAAP,EAAqB,MAArB;AALL,OAAX;AAOAtD,MAAAA,EAAE,CAAC6D,QAAH,CAAYC,WAAZ,CAAwB9D,EAAE,CAAC+D,eAAH,CAAmBC,SAAnB,CAA6B,iBAA7B,EAAgDT,EAAhD,CAAxB;;AACA,UAAID,YAAY,CAACI,MAAb,KAAwB,MAA5B,EAAoC;AAClCO,QAAAA,UAAU,CAAC,MAAM,gDAAsBjE,EAAtB,EAA0BoD,KAA1B,EAAiCE,YAAjC,CAAP,EAAuD,IAAvD,CAAV;AACD;AACF;AA7BkB,GAArB;;AA+BAY,kBAAOC,YAAP,CAAoBzC,KAApB;AACD;;AAED,eAAe0C,qBAAf,CAAqCpE,EAArC,EAAoE;AAClE,QAAME,YAAY,GAAI,MAAMF,EAAE,CAACG,MAAH,CAAUC,eAAV,CAA0B,KAA1B,CAA5B;AACA,QAAM8C,4CAAwBmB,SAAxB,CAAkCnE,YAAY,CAACoE,eAA/C,EAAgEpE,YAAY,CAACqE,WAA7E,EAA0FvE,EAAE,CAACS,MAA7F,CAAN;AACD;;AAED,MAAM+D,gBAAgB,GAAG,CAAC,mBAAD,EAAsB,eAAtB,EAAuC,mBAAvC,EAA4D,OAA5D,EAAqE,eAArE,EAAsF,EAAtF,CAAzB;;AAEA,MAAMC,kBAAkB,GAAG,OAAOzE,EAAP,EAAuBC,KAAvB,KAA2C;AACpED,EAAAA,EAAE,CAAC0E,MAAH,CAAUD,kBAAV,CAA6B;AAC3BE,IAAAA,IAAI,EAAE,cADqB;AAE3BC,IAAAA,SAAS,EAAE,UAFgB;AAG3BC,IAAAA,KAAK,EAAE,EAHoB;AAI3BC,IAAAA,WAAW,EACT,wJALyB;AAM3BC,IAAAA,OAAO,EAAE,OAAOC,KAAP,EAAoCC,IAApC,KAA4E;AACnF,UACE,CAAChF,KAAK,CAACiF,QAAN,CAAeF,KAAK,CAAC5B,KAArB,CAAD,IACA,CAACnD,KAAK,CAACY,MAAN,CAAaC,SADd,IAEA,CAACkE,KAAK,CAACG,OAFP,IAGAX,gBAAgB,CAACY,QAAjB,CAA0BJ,KAAK,CAACxB,IAAhC,CAHA,IAIAwB,KAAK,CAACK,OAAN,CAAcrF,EAAE,CAACsF,EAAH,CAAMC,cAAN,CAAqBC,eAAnC,CALF,EAME;AACA,eAAOP,IAAI,EAAX;AACD;;AAED,UAAIQ,UAAU,GAAG,EAAjB;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAazF,KAAK,CAACiF,QAAN,CAAeF,KAAK,CAAC5B,KAArB,CAAnB;;AACA,YAAMuC,cAAc,GAAG,YAAY;AACjC,YAAI;AACF;AACAF,UAAAA,UAAU,GAAG,MAAMC,MAAM,CAACE,OAAP,CAAeZ,KAAK,CAACG,OAArB,EAA8BH,KAAK,CAACa,GAAN,CAAUC,gBAAxC,CAAnB;AACD,SAHD,CAGE,OAAOC,GAAP,EAAY;AACZ,cAAIA,GAAG,YAAYC,8CAAnB,EAAkD;AAChD,kBAAMC,KAAK,GAAG,MAAM,kCAAejG,EAAE,CAACkG,KAAH,CAASC,MAAT,CAAgBnB,KAAK,CAAC5B,KAAtB,CAAf,EAA6C2C,GAAG,CAACK,YAAjD,CAApB;AACA,kBAAMV,MAAM,CAACW,SAAP,CAAiBJ,KAAjB,CAAN,CAFgD,CAGhD;;AACAR,YAAAA,UAAU,GAAG,MAAMC,MAAM,CAACE,OAAP,CAAeZ,KAAK,CAACG,OAArB,EAA8BH,KAAK,CAACa,GAAN,CAAUC,gBAAxC,CAAnB;AACD;AACF;AACF,OAZD;;AAcA,UAAI;AACF,cAAM,4BAAMH,cAAN,EAAsB;AAAEW,UAAAA,SAAS,EAAE,CAAb;AAAgBC,UAAAA,cAAc,EAAE;AAAhC,SAAtB,CAAN;;AACA5C,wBAAE6C,KAAF,CAAQxB,KAAR,EAAe;AAAEa,UAAAA,GAAG,EAAEJ;AAAP,SAAf;;AACAgB,QAAAA,mBAAmB,CAACzB,KAAD,CAAnB;AACD,OAJD,CAIE,OAAOe,GAAP,EAAY;AACZ/F,QAAAA,EAAE,CAACS,MAAH,CAAUiG,IAAV,CAAe,kDAAkDX,GAAG,CAAC1C,OAArE;AACD,OAND,SAMU;AACR4B,QAAAA,IAAI;AACL;AACF;AA1C0B,GAA7B;;AA6CA,WAASwB,mBAAT,CAA6BzB,KAA7B,EAAoC;AAClC,QAAI,CAACA,KAAK,CAACa,GAAN,CAAUc,QAAX,IAAuB,CAAC3B,KAAK,CAAC4B,OAAN,CAAcC,IAA1C,EAAgD;AAC9C;AACD;;AAED,QAAI;AACF,YAAMC,iBAAiB,GAAG9B,KAAK,CAACa,GAAN,CAAUc,QAAV,CAAmBI,MAAnB,CAA0BC,GAAG,IAAIA,GAAG,CAACC,SAArC,CAA1B;;AACA,WAAK,MAAMC,MAAX,IAAqBJ,iBAArB,EAAwC;AACtC,cAAMK,KAAK,GAAG,IAAIC,MAAJ,CAAWF,MAAM,CAACG,IAAP,CAAYC,KAAZ,CAAkBvG,MAA7B,CAAd;AACAiE,QAAAA,KAAK,CAAC4B,OAAN,CAAcC,IAAd,GAAqB7B,KAAK,CAAC4B,OAAN,CAAcC,IAAd,CAAmBU,OAAnB,CAA2BL,MAAM,CAACG,IAAP,CAAYC,KAAvC,EAA8CH,KAA9C,CAArB;AACD;AACF,KAND,CAME,OAAOpB,GAAP,EAAY;AACZ/F,MAAAA,EAAE,CAACS,MAAH,CAAUiG,IAAV,CAAe,2CAA2CX,GAAG,CAAC1C,OAA9D;AACD;AACF;AACF,CA7DD;;AA+DO,SAASmE,iBAAT,CAA2BvH,KAA3B,EAA4C;AACjD,SAAO,MAAOD,EAAP,IAA0B;AAC/B,UAAMoE,qBAAqB,CAACpE,EAAD,CAA3B;AACA,UAAMD,0BAA0B,CAACC,EAAD,EAAKC,KAAL,CAAhC;AACAwB,IAAAA,gBAAgB,CAACzB,EAAD,EAAKC,KAAL,CAAhB;AACA,UAAMwE,kBAAkB,CAACzE,EAAD,EAAKC,KAAL,CAAxB;AACD,GALD;AAMD","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import retry from 'bluebird-retry'\nimport * as sdk from 'botpress/sdk'\nimport _ from 'lodash'\n\nimport { Config } from '../../config'\nimport Engine from '../engine'\nimport { DucklingEntityExtractor } from '../entities/duckling_extractor'\nimport LangProvider from '../language/language-provider'\nimport { getPOSTagger, tagSentence } from '../language/pos-tagger'\nimport { getLatestModel } from '../model-service'\nimport { InvalidLanguagePredictorError } from '../predict-pipeline'\nimport { removeTrainingSession, setTrainingSession } from '../train-session-service'\nimport { NLUState, Token2Vec, Tools, TrainingSession } from '../typings'\n\nexport const initializeLanguageProvider = async (bp: typeof sdk, state: NLUState) => {\n  const globalConfig = (await bp.config.getModuleConfig('nlu')) as Config\n\n  try {\n    const languageProvider = await LangProvider.initialize(globalConfig.languageSources, bp.logger)\n    const { validProvidersCount, validLanguages } = languageProvider.getHealth()\n    const health = {\n      isEnabled: validProvidersCount > 0 && validLanguages.length > 0,\n      validProvidersCount,\n      validLanguages\n    }\n\n    state.languageProvider = languageProvider\n    state.health = health\n  } catch (e) {\n    if (e.failure && e.failure.code === 'ECONNREFUSED') {\n      bp.logger.error(`Language server can't be reached at address ${e.failure.address}:${e.failure.port}`)\n      if (!process.IS_FAILSAFE) {\n        process.exit()\n      }\n    }\n    throw e\n  }\n}\n\nfunction initializeEngine(bp: typeof sdk, state: NLUState) {\n  const tools: Tools = {\n    partOfSpeechUtterances: (tokenUtterances: string[][], lang: string) => {\n      const tagger = getPOSTagger(lang, bp.MLToolkit)\n      return tokenUtterances.map(tagSentence.bind(this, tagger))\n    },\n    tokenize_utterances: (utterances: string[], lang: string, vocab?: Token2Vec) =>\n      state.languageProvider.tokenize(utterances, lang, vocab),\n    vectorize_tokens: async (tokens, lang) => {\n      const a = await state.languageProvider.vectorize(tokens, lang)\n      return a.map(x => Array.from(x.values()))\n    },\n    generateSimilarJunkWords: (vocab: string[], lang: string) =>\n      state.languageProvider.generateSimilarJunkWords(vocab, lang),\n    mlToolkit: bp.MLToolkit,\n    duckling: new DucklingEntityExtractor(bp.logger),\n    reportTrainingProgress: async (botId: string, message: string, trainSession: TrainingSession) => {\n      await setTrainingSession(bp, botId, trainSession)\n\n      const ev = {\n        type: 'nlu',\n        working: trainSession.status === 'training',\n        botId,\n        message,\n        trainSession: _.omit(trainSession, 'lock')\n      }\n      bp.realtime.sendPayload(bp.RealTimePayload.forAdmins('statusbar.event', ev))\n      if (trainSession.status === 'done') {\n        setTimeout(() => removeTrainingSession(bp, botId, trainSession), 5000)\n      }\n    }\n  }\n  Engine.provideTools(tools)\n}\n\nasync function initDucklingExtractor(bp: typeof sdk): Promise<void> {\n  const globalConfig = (await bp.config.getModuleConfig('nlu')) as Config\n  await DucklingEntityExtractor.configure(globalConfig.ducklingEnabled, globalConfig.ducklingURL, bp.logger)\n}\n\nconst EVENTS_TO_IGNORE = ['session_reference', 'session_reset', 'bp_dialog_timeout', 'visit', 'say_something', '']\n\nconst registerMiddleware = async (bp: typeof sdk, state: NLUState) => {\n  bp.events.registerMiddleware({\n    name: 'nlu.incoming',\n    direction: 'incoming',\n    order: 10,\n    description:\n      'Process natural language in the form of text. Structured data with an action and parameters for that action is injected in the incoming message event.',\n    handler: async (event: sdk.IO.IncomingEvent, next: sdk.IO.MiddlewareNextCallback) => {\n      if (\n        !state.nluByBot[event.botId] ||\n        !state.health.isEnabled ||\n        !event.preview ||\n        EVENTS_TO_IGNORE.includes(event.type) ||\n        event.hasFlag(bp.IO.WellKnownFlags.SKIP_NATIVE_NLU)\n      ) {\n        return next()\n      }\n\n      let nluResults = {}\n      const { engine } = state.nluByBot[event.botId]\n      const extractEngine2 = async () => {\n        try {\n          // eventually if model not loaded for bot languages ==> train or load\n          nluResults = await engine.predict(event.preview, event.nlu.includedContexts)\n        } catch (err) {\n          if (err instanceof InvalidLanguagePredictorError) {\n            const model = await getLatestModel(bp.ghost.forBot(event.botId), err.languageCode)\n            await engine.loadModel(model)\n            // might throw again, thus usage of bluebird retry\n            nluResults = await engine.predict(event.preview, event.nlu.includedContexts)\n          }\n        }\n      }\n\n      try {\n        await retry(extractEngine2, { max_tries: 2, throw_original: true })\n        _.merge(event, { nlu: nluResults })\n        removeSensitiveText(event)\n      } catch (err) {\n        bp.logger.warn('Error extracting metadata for incoming text: ' + err.message)\n      } finally {\n        next()\n      }\n    }\n  })\n\n  function removeSensitiveText(event) {\n    if (!event.nlu.entities || !event.payload.text) {\n      return\n    }\n\n    try {\n      const sensitiveEntities = event.nlu.entities.filter(ent => ent.sensitive)\n      for (const entity of sensitiveEntities) {\n        const stars = '*'.repeat(entity.data.value.length)\n        event.payload.text = event.payload.text.replace(entity.data.value, stars)\n      }\n    } catch (err) {\n      bp.logger.warn('Error removing sensitive information: ' + err.message)\n    }\n  }\n}\n\nexport function getOnSeverStarted(state: NLUState) {\n  return async (bp: typeof sdk) => {\n    await initDucklingExtractor(bp)\n    await initializeLanguageProvider(bp, state)\n    initializeEngine(bp, state)\n    await registerMiddleware(bp, state)\n  }\n}\n"]}
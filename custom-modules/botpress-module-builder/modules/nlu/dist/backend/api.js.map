{"version":3,"sources":["api.ts"],"names":["PredictSchema","Joi","object","keys","contexts","array","items","string","default","text","required","bp","state","router","http","createRouterForBot","get","req","res","health","isEnabled","send","post","botId","lang","params","ghost","forBot","intentDefs","entityDefs","nluByBot","entityService","getCustomEntities","logger","info","xValidationRes","language","session","error","value","validate","body","status","nlu","engine","predict","err","intent","intentDef","sendStatus","attachError","message","IntentDefCreateSchema","stripUnknown","warn","intentName","action","condition","intentNames","intents","ctxs","_","chain","flatMap","i","uniq","entities","getEntities","json","map","x","label","type","name","entityName","entity","getEntity","entityDef","EntityDefCreateSchema","saveEntity","id","updateEntity","deleteEntity","isTraining","trainOrLoad","cancelTraining","recommendations","autoTrain","isOn"],"mappings":";;;;;;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAQA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAGO,MAAMA,aAAa,GAAGC,aAAIC,MAAJ,GAAaC,IAAb,CAAkB;AAC7CC,EAAAA,QAAQ,EAAEH,aAAII,KAAJ,GACPC,KADO,CACDL,aAAIM,MAAJ,EADC,EAEPC,OAFO,CAEC,CAAC,QAAD,CAFD,CADmC;AAI7CC,EAAAA,IAAI,EAAER,aAAIM,MAAJ,GAAaG,QAAb;AAJuC,CAAlB,CAAtB;;;;eAOQ,OAAOC,EAAP,EAAuBC,KAAvB,KAA2C;AACxD,QAAMC,MAAM,GAAGF,EAAE,CAACG,IAAH,CAAQC,kBAAR,CAA2B,KAA3B,CAAf;AAEAF,EAAAA,MAAM,CAACG,GAAP,CAAW,SAAX,EAAsB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACxC;AACA,QAAI,CAACN,KAAK,CAACO,MAAN,CAAaC,SAAlB,EAA6B;AAC3B,YAAM,iDAA2BT,EAA3B,EAA+BC,KAA/B,CAAN;AACD;;AACDM,IAAAA,GAAG,CAACG,IAAJ,CAAST,KAAK,CAACO,MAAf;AACD,GAND;AAQAN,EAAAA,MAAM,CAACS,IAAP,CAAY,yBAAZ,EAAuC,OAAOL,GAAP,EAAYC,GAAZ,KAAoB;AACzD,UAAM;AAAEK,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBP,GAAG,CAACQ,MAA5B;AACA,UAAMC,KAAK,GAAGf,EAAE,CAACe,KAAH,CAASC,MAAT,CAAgBJ,KAAhB,CAAd;AAEA,UAAMK,UAAU,GAAG,MAAM,+BAAWF,KAAX,CAAzB;AACA,UAAMG,UAAU,GAAG,MAAMjB,KAAK,CAACkB,QAAN,CAAeP,KAAf,EAAsBQ,aAAtB,CAAoCC,iBAApC,EAAzB;AAEArB,IAAAA,EAAE,CAACsB,MAAH,CAAUN,MAAV,CAAiBJ,KAAjB,EAAwBW,IAAxB,CAA6B,0BAA7B;AACA,UAAMC,cAAc,GAAG,MAAM,oCAAcZ,KAAd,EAAqBK,UAArB,EAAiCC,UAAjC,EAA6CL,IAA7C,CAA7B;AACAb,IAAAA,EAAE,CAACsB,MAAH,CAAUN,MAAV,CAAiBJ,KAAjB,EAAwBW,IAAxB,CAA6B,2BAA7B;AAEAhB,IAAAA,GAAG,CAACG,IAAJ,CAASc,cAAT;AACD,GAZD;AAcAtB,EAAAA,MAAM,CAACG,GAAP,CAAW,qBAAX,EAAkC,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACpD,UAAM;AAAEkB,MAAAA,QAAF;AAAYb,MAAAA;AAAZ,QAAsBN,GAAG,CAACQ,MAAhC;AACA,UAAMY,OAAO,GAAG,MAAM,6CAAmB1B,EAAnB,EAAuBY,KAAvB,EAA8Ba,QAA9B,CAAtB;AACAlB,IAAAA,GAAG,CAACG,IAAJ,CAASgB,OAAT;AACD,GAJD;AAMAxB,EAAAA,MAAM,CAACS,IAAP,CAAY,UAAZ,EAAwB,OAAOL,GAAP,EAAYC,GAAZ,KAAoB;AAC1C,UAAM;AAAEK,MAAAA;AAAF,QAAYN,GAAG,CAACQ,MAAtB;AACA,UAAM;AAAEa,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAmBvC,aAAa,CAACwC,QAAd,CAAuBvB,GAAG,CAACwB,IAA3B,CAAzB;;AACA,QAAIH,KAAJ,EAAW;AACT,aAAOpB,GAAG,CAACwB,MAAJ,CAAW,GAAX,EAAgBrB,IAAhB,CAAqB,yBAArB,CAAP;AACD;;AACD,QAAI,CAACT,KAAK,CAACkB,QAAN,CAAeP,KAAf,CAAL,EAA4B;AAC1B,aAAOL,GAAG,CAACwB,MAAJ,CAAW,GAAX,EAAgBrB,IAAhB,CAAsB,OAAME,KAAM,gBAAlC,CAAP;AACD;;AAED,QAAI;AACF,YAAMoB,GAAG,GAAG,MAAM/B,KAAK,CAACkB,QAAN,CAAeP,KAAf,EAAsBqB,MAAtB,CAA6BC,OAA7B,CAAqCN,KAAK,CAAC9B,IAA3C,EAAiD8B,KAAK,CAACnC,QAAvD,CAAlB;AACAc,MAAAA,GAAG,CAACG,IAAJ,CAAS;AAAEsB,QAAAA;AAAF,OAAT;AACD,KAHD,CAGE,OAAOG,GAAP,EAAY;AACZ5B,MAAAA,GAAG,CAACwB,MAAJ,CAAW,GAAX,EAAgBrB,IAAhB,CAAqB,4BAArB;AACD;AACF,GAhBD;AAkBAR,EAAAA,MAAM,CAACG,GAAP,CAAW,UAAX,EAAuB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACzC,UAAM;AAAEK,MAAAA;AAAF,QAAYN,GAAG,CAACQ,MAAtB;AACA,UAAMC,KAAK,GAAGf,EAAE,CAACe,KAAH,CAASC,MAAT,CAAgBJ,KAAhB,CAAd;AACA,UAAMK,UAAU,GAAG,MAAM,+BAAWF,KAAX,CAAzB;AACAR,IAAAA,GAAG,CAACG,IAAJ,CAASO,UAAT;AACD,GALD;AAOAf,EAAAA,MAAM,CAACG,GAAP,CAAW,kBAAX,EAA+B,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjD,UAAM;AAAEK,MAAAA,KAAF;AAASwB,MAAAA;AAAT,QAAoB9B,GAAG,CAACQ,MAA9B;AACA,UAAMC,KAAK,GAAGf,EAAE,CAACe,KAAH,CAASC,MAAT,CAAgBJ,KAAhB,CAAd;AACA,UAAMyB,SAAS,GAAG,MAAM,8BAAUtB,KAAV,EAAiBqB,MAAjB,CAAxB;AACA7B,IAAAA,GAAG,CAACG,IAAJ,CAAS2B,SAAT;AACD,GALD;AAOAnC,EAAAA,MAAM,CAACS,IAAP,CAAY,yBAAZ,EAAuC,OAAOL,GAAP,EAAYC,GAAZ,KAAoB;AACzD,UAAM;AAAEK,MAAAA,KAAF;AAASwB,MAAAA;AAAT,QAAoB9B,GAAG,CAACQ,MAA9B;AACA,UAAMC,KAAK,GAAGf,EAAE,CAACe,KAAH,CAASC,MAAT,CAAgBJ,KAAhB,CAAd;;AACA,QAAI;AACF,YAAM,iCAAaG,KAAb,EAAoBqB,MAApB,CAAN;AACA7B,MAAAA,GAAG,CAAC+B,UAAJ,CAAe,GAAf;AACD,KAHD,CAGE,OAAOH,GAAP,EAAY;AACZnC,MAAAA,EAAE,CAACsB,MAAH,CACGN,MADH,CACUJ,KADV,EAEG2B,WAFH,CAEeJ,GAFf,EAGGR,KAHH,CAGS,yBAHT;AAIApB,MAAAA,GAAG,CAACwB,MAAJ,CAAW,GAAX,EAAgBrB,IAAhB,CAAqByB,GAAG,CAACK,OAAzB;AACD;AACF,GAbD;AAeAtC,EAAAA,MAAM,CAACS,IAAP,CAAY,UAAZ,EAAwB,OAAOL,GAAP,EAAYC,GAAZ,KAAoB;AAC1C,UAAM;AAAEK,MAAAA;AAAF,QAAYN,GAAG,CAACQ,MAAtB;AACA,UAAMC,KAAK,GAAGf,EAAE,CAACe,KAAH,CAASC,MAAT,CAAgBJ,KAAhB,CAAd;;AACA,QAAI;AACF,YAAMyB,SAAS,GAAG,MAAM,mBAAS/B,GAAG,CAACwB,IAAb,EAAmBW,kCAAnB,EAA0C;AAChEC,QAAAA,YAAY,EAAE;AADkD,OAA1C,CAAxB;AAIA,YAAM,+BAAW3B,KAAX,EAAkBsB,SAAlB,EAA6BpC,KAAK,CAACkB,QAAN,CAAeP,KAAf,EAAsBQ,aAAnD,CAAN;AAEAb,MAAAA,GAAG,CAAC+B,UAAJ,CAAe,GAAf;AACD,KARD,CAQE,OAAOH,GAAP,EAAY;AACZnC,MAAAA,EAAE,CAACsB,MAAH,CACGN,MADH,CACUJ,KADV,EAEG2B,WAFH,CAEeJ,GAFf,EAGGQ,IAHH,CAGQ,sBAHR;AAIApC,MAAAA,GAAG,CAACwB,MAAJ,CAAW,GAAX,EAAgBrB,IAAhB,CAAqByB,GAAG,CAACK,OAAzB;AACD;AACF,GAlBD;AAoBAtC,EAAAA,MAAM,CAACS,IAAP,CAAY,sBAAZ,EAAoC,OAAOL,GAAP,EAAYC,GAAZ,KAAoB;AACtD,UAAM;AAAEK,MAAAA,KAAF;AAASgC,MAAAA;AAAT,QAAwBtC,GAAG,CAACQ,MAAlC;AACA,UAAMC,KAAK,GAAGf,EAAE,CAACe,KAAH,CAASC,MAAT,CAAgBJ,KAAhB,CAAd;;AACA,QAAI;AACF,YAAM,iCAAaG,KAAb,EAAoB6B,UAApB,EAAgCtC,GAAG,CAACwB,IAApC,EAA0C7B,KAAK,CAACkB,QAAN,CAAeP,KAAf,EAAsBQ,aAAhE,CAAN;AACAb,MAAAA,GAAG,CAAC+B,UAAJ,CAAe,GAAf;AACD,KAHD,CAGE,OAAOH,GAAP,EAAY;AACZnC,MAAAA,EAAE,CAACsB,MAAH,CACGN,MADH,CACUJ,KADV,EAEG2B,WAFH,CAEeJ,GAFf,EAGGR,KAHH,CAGS,yBAHT;AAIApB,MAAAA,GAAG,CAAC+B,UAAJ,CAAe,GAAf;AACD;AACF,GAbD;AAeApC,EAAAA,MAAM,CAACS,IAAP,CAAY,0BAAZ,EAAwC,OAAOL,GAAP,EAAYC,GAAZ,KAAoB;AAC1D,UAAM;AAAEK,MAAAA;AAAF,QAAYN,GAAG,CAACQ,MAAtB;AACA,UAAM;AAAE+B,MAAAA;AAAF,QAAavC,GAAG,CAACwB,IAAvB;AACA,UAAMgB,SAAS,GAAGxC,GAAG,CAACwB,IAAJ,CAASgB,SAA3B;;AAEA,QAAID,MAAM,KAAK,QAAX,IAAuBA,MAAM,KAAK,QAAtC,EAAgD;AAC9C,UAAI;AACF,cAAM9B,KAAK,GAAGf,EAAE,CAACe,KAAH,CAASC,MAAT,CAAgBJ,KAAhB,CAAd;AAEA,cAAM,6CAAyBG,KAAzB,EAAgCd,KAAK,CAACkB,QAAN,CAAeP,KAAf,EAAsBQ,aAAtD,EAAqE,CAAC0B,SAAS,CAAChC,MAAV,CAAiB8B,UAAlB,CAArE,CAAN;AACA,eAAOrC,GAAG,CAAC+B,UAAJ,CAAe,GAAf,CAAP;AACD,OALD,CAKE,OAAOH,GAAP,EAAY;AACZ,eAAO5B,GAAG,CAACwB,MAAJ,CAAW,GAAX,EAAgBrB,IAAhB,CAAqByB,GAAG,CAACK,OAAzB,CAAP;AACD;AACF;;AAEDjC,IAAAA,GAAG,CAAC+B,UAAJ,CAAe,GAAf;AACD,GAjBD;AAmBApC,EAAAA,MAAM,CAACS,IAAP,CAAY,sBAAZ,EAAoC,OAAOL,GAAP,EAAYC,GAAZ,KAAoB;AACtD,UAAM;AAAEK,MAAAA;AAAF,QAAYN,GAAG,CAACQ,MAAtB;AACA,UAAM;AAAEiC,MAAAA;AAAF,QAAkBzC,GAAG,CAACwB,IAA5B;AACA,UAAMf,KAAK,GAAGf,EAAE,CAACe,KAAH,CAASC,MAAT,CAAgBJ,KAAhB,CAAd;;AAEA,QAAI;AACF,YAAM,6CAAyBG,KAAzB,EAAgCd,KAAK,CAACkB,QAAN,CAAeP,KAAf,EAAsBQ,aAAtD,EAAqE2B,WAArE,CAAN;AACAxC,MAAAA,GAAG,CAAC+B,UAAJ,CAAe,GAAf;AACD,KAHD,CAGE,OAAOH,GAAP,EAAY;AACZnC,MAAAA,EAAE,CAACsB,MAAH,CACGN,MADH,CACUJ,KADV,EAEG2B,WAFH,CAEeJ,GAFf,EAGGR,KAHH,CAGS,gCAHT;AAIApB,MAAAA,GAAG,CAACwB,MAAJ,CAAW,GAAX,EAAgBrB,IAAhB,CAAqByB,GAAG,CAACK,OAAzB;AACD;AACF,GAfD;AAiBAtC,EAAAA,MAAM,CAACG,GAAP,CAAW,WAAX,EAAwB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC1C,UAAMK,KAAK,GAAGN,GAAG,CAACQ,MAAJ,CAAWF,KAAzB;AACA,UAAMG,KAAK,GAAGf,EAAE,CAACe,KAAH,CAASC,MAAT,CAAgBJ,KAAhB,CAAd;AACA,UAAMoC,OAAO,GAAG,MAAM,+BAAWjC,KAAX,CAAtB;;AACA,UAAMkC,IAAI,GAAGC,gBAAEC,KAAF,CAAQH,OAAR,EACVI,OADU,CACFC,CAAC,IAAIA,CAAC,CAAC5D,QADL,EAEV6D,IAFU,GAGV1B,KAHU,EAAb;;AAKArB,IAAAA,GAAG,CAACG,IAAJ,CAASuC,IAAT;AACD,GAVD;AAYA/C,EAAAA,MAAM,CAACG,GAAP,CAAW,WAAX,EAAwB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC1C,UAAM;AAAEK,MAAAA;AAAF,QAAYN,GAAG,CAACQ,MAAtB;AACA,UAAMyC,QAAQ,GAAG,MAAMtD,KAAK,CAACkB,QAAN,CAAeP,KAAf,EAAsBQ,aAAtB,CAAoCoC,WAApC,EAAvB;AACAjD,IAAAA,GAAG,CAACkD,IAAJ,CAASF,QAAQ,CAACG,GAAT,CAAaC,CAAC,KAAK,EAAE,GAAGA,CAAL;AAAQC,MAAAA,KAAK,EAAG,GAAED,CAAC,CAACE,IAAK,IAAGF,CAAC,CAACG,IAAK;AAAnC,KAAL,CAAd,CAAT;AACD,GAJD;AAMA5D,EAAAA,MAAM,CAACG,GAAP,CAAW,uBAAX,EAAoC,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACtD,UAAM;AAAEK,MAAAA,KAAF;AAASmD,MAAAA;AAAT,QAAwBzD,GAAG,CAACQ,MAAlC;;AACA,QAAI;AACF,YAAMkD,MAAM,GAAG,MAAM/D,KAAK,CAACkB,QAAN,CAAeP,KAAf,EAAsBQ,aAAtB,CAAoC6C,SAApC,CAA8CF,UAA9C,CAArB;AACAxD,MAAAA,GAAG,CAACG,IAAJ,CAASsD,MAAT;AACD,KAHD,CAGE,OAAO7B,GAAP,EAAY;AACZnC,MAAAA,EAAE,CAACsB,MAAH,CACGN,MADH,CACUJ,KADV,EAEG2B,WAFH,CAEeJ,GAFf,EAGGR,KAHH,CAGU,wBAAuBoC,UAAW,EAH5C;AAIAxD,MAAAA,GAAG,CAACG,IAAJ,CAAS,GAAT;AACD;AACF,GAZD;AAcAR,EAAAA,MAAM,CAACS,IAAP,CAAY,WAAZ,EAAyB,OAAOL,GAAP,EAAYC,GAAZ,KAAoB;AAC3C,UAAM;AAAEK,MAAAA;AAAF,QAAYN,GAAG,CAACQ,MAAtB;;AACA,QAAI;AACF,YAAMoD,SAAS,GAAI,MAAM,mBAAS5D,GAAG,CAACwB,IAAb,EAAmBqC,iCAAnB,EAA0C;AACjEzB,QAAAA,YAAY,EAAE;AADmD,OAA1C,CAAzB;AAIA,YAAMzC,KAAK,CAACkB,QAAN,CAAeP,KAAf,EAAsBQ,aAAtB,CAAoCgD,UAApC,CAA+CF,SAA/C,CAAN;AAEA3D,MAAAA,GAAG,CAAC+B,UAAJ,CAAe,GAAf;AACD,KARD,CAQE,OAAOH,GAAP,EAAY;AACZnC,MAAAA,EAAE,CAACsB,MAAH,CACGN,MADH,CACUJ,KADV,EAEG2B,WAFH,CAEeJ,GAFf,EAGGQ,IAHH,CAGQ,sBAHR;AAIApC,MAAAA,GAAG,CAACwB,MAAJ,CAAW,GAAX,EAAgBrB,IAAhB,CAAqByB,GAAG,CAACK,OAAzB;AACD;AACF,GAjBD;AAmBAtC,EAAAA,MAAM,CAACS,IAAP,CAAY,eAAZ,EAA6B,OAAOL,GAAP,EAAYC,GAAZ,KAAoB;AAC/C,UAAM;AAAEK,MAAAA,KAAF;AAASyD,MAAAA;AAAT,QAAgB/D,GAAG,CAACQ,MAA1B;;AACA,QAAI;AACF,YAAMoD,SAAS,GAAI,MAAM,mBAAS5D,GAAG,CAACwB,IAAb,EAAmBqC,iCAAnB,EAA0C;AACjEzB,QAAAA,YAAY,EAAE;AADmD,OAA1C,CAAzB;AAIA,YAAMzC,KAAK,CAACkB,QAAN,CAAeP,KAAf,EAAsBQ,aAAtB,CAAoCkD,YAApC,CAAiDD,EAAjD,EAAqDH,SAArD,CAAN;AACA3D,MAAAA,GAAG,CAAC+B,UAAJ,CAAe,GAAf;AACD,KAPD,CAOE,OAAOH,GAAP,EAAY;AACZnC,MAAAA,EAAE,CAACsB,MAAH,CACGN,MADH,CACUJ,KADV,EAEG2B,WAFH,CAEeJ,GAFf,EAGGR,KAHH,CAGS,yBAHT;AAIApB,MAAAA,GAAG,CAACwB,MAAJ,CAAW,GAAX,EAAgBrB,IAAhB,CAAqByB,GAAG,CAACK,OAAzB;AACD;AACF,GAhBD;AAkBAtC,EAAAA,MAAM,CAACS,IAAP,CAAY,sBAAZ,EAAoC,OAAOL,GAAP,EAAYC,GAAZ,KAAoB;AACtD,UAAM;AAAEK,MAAAA,KAAF;AAASyD,MAAAA;AAAT,QAAgB/D,GAAG,CAACQ,MAA1B;;AACA,QAAI;AACF,YAAMb,KAAK,CAACkB,QAAN,CAAeP,KAAf,EAAsBQ,aAAtB,CAAoCmD,YAApC,CAAiDF,EAAjD,CAAN;AACA9D,MAAAA,GAAG,CAAC+B,UAAJ,CAAe,GAAf;AACD,KAHD,CAGE,OAAOH,GAAP,EAAY;AACZnC,MAAAA,EAAE,CAACsB,MAAH,CACGN,MADH,CACUJ,KADV,EAEG2B,WAFH,CAEeJ,GAFf,EAGGR,KAHH,CAGS,yBAHT;AAIApB,MAAAA,GAAG,CAACwB,MAAJ,CAAW,GAAX,EAAgBrB,IAAhB,CAAqByB,GAAG,CAACK,OAAzB;AACD;AACF,GAZD;AAcAtC,EAAAA,MAAM,CAACG,GAAP,CAAW,QAAX,EAAqB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACvC,QAAI;AACF,YAAM;AAAEK,QAAAA;AAAF,UAAYN,GAAG,CAACQ,MAAtB;AACA,YAAM0D,UAAU,GAAG,MAAMvE,KAAK,CAACkB,QAAN,CAAeP,KAAf,EAAsB4D,UAAtB,EAAzB;AACAjE,MAAAA,GAAG,CAACG,IAAJ,CAAS;AAAE8D,QAAAA;AAAF,OAAT;AACD,KAJD,CAIE,MAAM;AACNjE,MAAAA,GAAG,CAAC+B,UAAJ,CAAe,GAAf;AACD;AACF,GARD;AAUApC,EAAAA,MAAM,CAACS,IAAP,CAAY,QAAZ,EAAsB,OAAOL,GAAP,EAAYC,GAAZ,KAAoB;AACxC,QAAI;AACF,YAAM;AAAEK,QAAAA;AAAF,UAAYN,GAAG,CAACQ,MAAtB;AACA,YAAMb,KAAK,CAACkB,QAAN,CAAeP,KAAf,EAAsB6D,WAAtB,CAAkC,IAAlC,CAAN;AACAlE,MAAAA,GAAG,CAAC+B,UAAJ,CAAe,GAAf;AACD,KAJD,CAIE,MAAM;AACN/B,MAAAA,GAAG,CAAC+B,UAAJ,CAAe,GAAf;AACD;AACF,GARD;AAUApC,EAAAA,MAAM,CAACS,IAAP,CAAY,eAAZ,EAA6B,OAAOL,GAAP,EAAYC,GAAZ,KAAoB;AAC/C,QAAI;AACF,YAAM;AAAEK,QAAAA;AAAF,UAAYN,GAAG,CAACQ,MAAtB;AACA,YAAMb,KAAK,CAACkB,QAAN,CAAeP,KAAf,EAAsB8D,cAAtB,EAAN;AACAnE,MAAAA,GAAG,CAAC+B,UAAJ,CAAe,GAAf;AACD,KAJD,CAIE,MAAM;AACN/B,MAAAA,GAAG,CAAC+B,UAAJ,CAAe,GAAf;AACD;AACF,GARD;AAUApC,EAAAA,MAAM,CAACG,GAAP,CAAW,qBAAX,EAAkC,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACpDA,IAAAA,GAAG,CAACG,IAAJ,CAASiE,wBAAT;AACD,GAFD;AAIAzE,EAAAA,MAAM,CAACS,IAAP,CAAY,YAAZ,EAA0B,OAAOL,GAAP,EAAYC,GAAZ,KAAoB;AAC5C,UAAM;AAAEK,MAAAA;AAAF,QAAYN,GAAG,CAACQ,MAAtB;AACA,UAAM;AAAE8D,MAAAA;AAAF,QAAgBtE,GAAG,CAACwB,IAA1B;AAEA,UAAM,oBAAa9B,EAAb,EAAiBY,KAAjB,EAAwBgE,SAAxB,CAAN;AAEArE,IAAAA,GAAG,CAAC+B,UAAJ,CAAe,GAAf;AACD,GAPD;AASApC,EAAAA,MAAM,CAACG,GAAP,CAAW,YAAX,EAAyB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC3C,UAAM;AAAEK,MAAAA;AAAF,QAAYN,GAAG,CAACQ,MAAtB;AAEA,UAAM+D,IAAI,GAAG,MAAM,qBAAc7E,EAAd,EAAkBY,KAAlB,CAAnB;AAEAL,IAAAA,GAAG,CAACG,IAAJ,CAAS;AAAEmE,MAAAA;AAAF,KAAT;AACD,GAND;AAOD,C","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport Joi, { validate } from 'joi'\nimport _ from 'lodash'\n\nimport { isOn as isAutoTrainOn, set as setAutoTrain } from './autoTrain'\nimport { EntityDefCreateSchema } from './entities/validation'\nimport {\n  deleteIntent,\n  getIntent,\n  getIntents,\n  saveIntent,\n  updateContextsFromTopics,\n  updateIntent\n} from './intents/intent-service'\nimport recommendations from './intents/recommendations'\nimport { IntentDefCreateSchema } from './intents/validation'\nimport { initializeLanguageProvider } from './module-lifecycle/on-server-started'\nimport { crossValidate } from './tools/cross-validation'\nimport { getTrainingSession } from './train-session-service'\nimport { NLUState } from './typings'\n\nexport const PredictSchema = Joi.object().keys({\n  contexts: Joi.array()\n    .items(Joi.string())\n    .default(['global']),\n  text: Joi.string().required()\n})\n\nexport default async (bp: typeof sdk, state: NLUState) => {\n  const router = bp.http.createRouterForBot('nlu')\n\n  router.get('/health', async (req, res) => {\n    // When the health is bad, we'll refresh the status in case it changed (eg: user added languages)\n    if (!state.health.isEnabled) {\n      await initializeLanguageProvider(bp, state)\n    }\n    res.send(state.health)\n  })\n\n  router.post('/cross-validation/:lang', async (req, res) => {\n    const { botId, lang } = req.params\n    const ghost = bp.ghost.forBot(botId)\n\n    const intentDefs = await getIntents(ghost)\n    const entityDefs = await state.nluByBot[botId].entityService.getCustomEntities()\n\n    bp.logger.forBot(botId).info('Started cross validation')\n    const xValidationRes = await crossValidate(botId, intentDefs, entityDefs, lang)\n    bp.logger.forBot(botId).info('Finished cross validation')\n\n    res.send(xValidationRes)\n  })\n\n  router.get('/training/:language', async (req, res) => {\n    const { language, botId } = req.params\n    const session = await getTrainingSession(bp, botId, language)\n    res.send(session)\n  })\n\n  router.post('/predict', async (req, res) => {\n    const { botId } = req.params\n    const { error, value } = PredictSchema.validate(req.body)\n    if (error) {\n      return res.status(400).send('Predict body is invalid')\n    }\n    if (!state.nluByBot[botId]) {\n      return res.status(404).send(`Bot ${botId} doesn't exist`)\n    }\n\n    try {\n      const nlu = await state.nluByBot[botId].engine.predict(value.text, value.contexts)\n      res.send({ nlu })\n    } catch (err) {\n      res.status(500).send('Could not extract nlu data')\n    }\n  })\n\n  router.get('/intents', async (req, res) => {\n    const { botId } = req.params\n    const ghost = bp.ghost.forBot(botId)\n    const intentDefs = await getIntents(ghost)\n    res.send(intentDefs)\n  })\n\n  router.get('/intents/:intent', async (req, res) => {\n    const { botId, intent } = req.params\n    const ghost = bp.ghost.forBot(botId)\n    const intentDef = await getIntent(ghost, intent)\n    res.send(intentDef)\n  })\n\n  router.post('/intents/:intent/delete', async (req, res) => {\n    const { botId, intent } = req.params\n    const ghost = bp.ghost.forBot(botId)\n    try {\n      await deleteIntent(ghost, intent)\n      res.sendStatus(204)\n    } catch (err) {\n      bp.logger\n        .forBot(botId)\n        .attachError(err)\n        .error('Could not delete intent')\n      res.status(400).send(err.message)\n    }\n  })\n\n  router.post('/intents', async (req, res) => {\n    const { botId } = req.params\n    const ghost = bp.ghost.forBot(botId)\n    try {\n      const intentDef = await validate(req.body, IntentDefCreateSchema, {\n        stripUnknown: true\n      })\n\n      await saveIntent(ghost, intentDef, state.nluByBot[botId].entityService)\n\n      res.sendStatus(200)\n    } catch (err) {\n      bp.logger\n        .forBot(botId)\n        .attachError(err)\n        .warn('Cannot create intent')\n      res.status(400).send(err.message)\n    }\n  })\n\n  router.post('/intents/:intentName', async (req, res) => {\n    const { botId, intentName } = req.params\n    const ghost = bp.ghost.forBot(botId)\n    try {\n      await updateIntent(ghost, intentName, req.body, state.nluByBot[botId].entityService)\n      res.sendStatus(200)\n    } catch (err) {\n      bp.logger\n        .forBot(botId)\n        .attachError(err)\n        .error('Could not update intent')\n      res.sendStatus(400)\n    }\n  })\n\n  router.post('/condition/intentChanged', async (req, res) => {\n    const { botId } = req.params\n    const { action } = req.body\n    const condition = req.body.condition as sdk.DecisionTriggerCondition\n\n    if (action === 'delete' || action === 'create') {\n      try {\n        const ghost = bp.ghost.forBot(botId)\n\n        await updateContextsFromTopics(ghost, state.nluByBot[botId].entityService, [condition.params.intentName])\n        return res.sendStatus(200)\n      } catch (err) {\n        return res.status(400).send(err.message)\n      }\n    }\n\n    res.sendStatus(200)\n  })\n\n  router.post('/sync/intents/topics', async (req, res) => {\n    const { botId } = req.params\n    const { intentNames } = req.body\n    const ghost = bp.ghost.forBot(botId)\n\n    try {\n      await updateContextsFromTopics(ghost, state.nluByBot[botId].entityService, intentNames)\n      res.sendStatus(200)\n    } catch (err) {\n      bp.logger\n        .forBot(botId)\n        .attachError(err)\n        .error('Could not update intent topics')\n      res.status(400).send(err.message)\n    }\n  })\n\n  router.get('/contexts', async (req, res) => {\n    const botId = req.params.botId\n    const ghost = bp.ghost.forBot(botId)\n    const intents = await getIntents(ghost)\n    const ctxs = _.chain(intents)\n      .flatMap(i => i.contexts)\n      .uniq()\n      .value()\n\n    res.send(ctxs)\n  })\n\n  router.get('/entities', async (req, res) => {\n    const { botId } = req.params\n    const entities = await state.nluByBot[botId].entityService.getEntities()\n    res.json(entities.map(x => ({ ...x, label: `${x.type}.${x.name}` })))\n  })\n\n  router.get('/entities/:entityName', async (req, res) => {\n    const { botId, entityName } = req.params\n    try {\n      const entity = await state.nluByBot[botId].entityService.getEntity(entityName)\n      res.send(entity)\n    } catch (err) {\n      bp.logger\n        .forBot(botId)\n        .attachError(err)\n        .error(`Could not get entity ${entityName}`)\n      res.send(400)\n    }\n  })\n\n  router.post('/entities', async (req, res) => {\n    const { botId } = req.params\n    try {\n      const entityDef = (await validate(req.body, EntityDefCreateSchema, {\n        stripUnknown: true\n      })) as sdk.NLU.EntityDefinition\n\n      await state.nluByBot[botId].entityService.saveEntity(entityDef)\n\n      res.sendStatus(200)\n    } catch (err) {\n      bp.logger\n        .forBot(botId)\n        .attachError(err)\n        .warn('Cannot create entity')\n      res.status(400).send(err.message)\n    }\n  })\n\n  router.post('/entities/:id', async (req, res) => {\n    const { botId, id } = req.params\n    try {\n      const entityDef = (await validate(req.body, EntityDefCreateSchema, {\n        stripUnknown: true\n      })) as sdk.NLU.EntityDefinition\n\n      await state.nluByBot[botId].entityService.updateEntity(id, entityDef)\n      res.sendStatus(200)\n    } catch (err) {\n      bp.logger\n        .forBot(botId)\n        .attachError(err)\n        .error('Could not update entity')\n      res.status(400).send(err.message)\n    }\n  })\n\n  router.post('/entities/:id/delete', async (req, res) => {\n    const { botId, id } = req.params\n    try {\n      await state.nluByBot[botId].entityService.deleteEntity(id)\n      res.sendStatus(204)\n    } catch (err) {\n      bp.logger\n        .forBot(botId)\n        .attachError(err)\n        .error('Could not delete entity')\n      res.status(404).send(err.message)\n    }\n  })\n\n  router.get('/train', async (req, res) => {\n    try {\n      const { botId } = req.params\n      const isTraining = await state.nluByBot[botId].isTraining()\n      res.send({ isTraining })\n    } catch {\n      res.sendStatus(500)\n    }\n  })\n\n  router.post('/train', async (req, res) => {\n    try {\n      const { botId } = req.params\n      await state.nluByBot[botId].trainOrLoad(true)\n      res.sendStatus(200)\n    } catch {\n      res.sendStatus(500)\n    }\n  })\n\n  router.post('/train/delete', async (req, res) => {\n    try {\n      const { botId } = req.params\n      await state.nluByBot[botId].cancelTraining()\n      res.sendStatus(200)\n    } catch {\n      res.sendStatus(500)\n    }\n  })\n\n  router.get('/ml-recommendations', async (req, res) => {\n    res.send(recommendations)\n  })\n\n  router.post('/autoTrain', async (req, res) => {\n    const { botId } = req.params\n    const { autoTrain } = req.body\n\n    await setAutoTrain(bp, botId, autoTrain)\n\n    res.sendStatus(200)\n  })\n\n  router.get('/autoTrain', async (req, res) => {\n    const { botId } = req.params\n\n    const isOn = await isAutoTrainOn(bp, botId)\n\n    res.send({ isOn })\n  })\n}\n"]}
{"version":3,"sources":["index.ts"],"names":["state","nluByBot","onServerStarted","onServerReady","onBotMount","onBotUnmount","onModuleUnmount","bp","events","removeMiddleware","http","deleteRouterForBot","Object","keys","forEach","botID","onTopicChanged","botId","oldName","newName","isRenaming","isDeleting","ghost","forBot","entityService","EntityService","intentDefs","intentDef","ctxIdx","contexts","indexOf","splice","push","name","entryPoint","dialogConditions","translations","en","fr","definition","moduleView","stretched","menuIcon","menuText","fullName","homepage"],"mappings":";;;;;;;AAAA;;AAIA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAGA,MAAMA,KAAe,GAAG;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAxB;AAEA,MAAMC,eAAe,GAAG,wCAAkBF,KAAlB,CAAxB;AACA,MAAMG,aAAa,GAAG,qCAAiBH,KAAjB,CAAtB;AACA,MAAMI,UAAU,GAAG,+BAAcJ,KAAd,CAAnB;AACA,MAAMK,YAAY,GAAG,mCAAgBL,KAAhB,CAArB;;AACA,MAAMM,eAAe,GAAG,MAAOC,EAAP,IAA0B;AAChDA,EAAAA,EAAE,CAACC,MAAH,CAAUC,gBAAV,CAA2B,cAA3B;AACAF,EAAAA,EAAE,CAACG,IAAH,CAAQC,kBAAR,CAA2B,KAA3B,EAFgD,CAGhD;;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYb,KAAK,CAACC,QAAlB,EAA4Ba,OAA5B,CAAoCC,KAAK,IAAI,MAAMV,YAAY,CAACE,EAAD,EAAKQ,KAAL,CAA/D;AACD,CALD;;AAOA,MAAMC,cAAc,GAAG,OAAOT,EAAP,EAAuBU,KAAvB,EAAsCC,OAAtC,EAAwDC,OAAxD,KAA6E;AAClG,QAAMC,UAAU,GAAG,CAAC,EAAEF,OAAO,IAAIC,OAAb,CAApB;AACA,QAAME,UAAU,GAAG,CAACF,OAApB;;AAEA,MAAI,CAACC,UAAD,IAAe,CAACC,UAApB,EAAgC;AAC9B;AACD;;AAED,QAAMC,KAAK,GAAGf,EAAE,CAACe,KAAH,CAASC,MAAT,CAAgBN,KAAhB,CAAd;AACA,QAAMO,aAAa,GAAG,IAAIC,wBAAJ,CAAkBH,KAAlB,EAAyBL,KAAzB,CAAtB;AACA,QAAMS,UAAU,GAAG,MAAM,+BAAWJ,KAAX,CAAzB;;AAEA,OAAK,MAAMK,SAAX,IAAwBD,UAAxB,EAAoC;AAClC,UAAME,MAAM,GAAGD,SAAS,CAACE,QAAV,CAAmBC,OAAnB,CAA2BZ,OAA3B,CAAf;;AACA,QAAIU,MAAM,KAAK,CAAC,CAAhB,EAAmB;AACjBD,MAAAA,SAAS,CAACE,QAAV,CAAmBE,MAAnB,CAA0BH,MAA1B,EAAkC,CAAlC;;AAEA,UAAIR,UAAJ,EAAgB;AACdO,QAAAA,SAAS,CAACE,QAAV,CAAmBG,IAAnB,CAAwBb,OAAxB;AACD;;AAED,YAAM,iCAAaG,KAAb,EAAoBK,SAAS,CAACM,IAA9B,EAAoCN,SAApC,EAA+CH,aAA/C,CAAN;AACD;AACF;AACF,CAxBD;;AA0BA,MAAMU,UAAgC,GAAG;AACvChC,EAAAA,eADuC;AAEvCC,EAAAA,aAFuC;AAGvCC,EAAAA,UAHuC;AAIvCC,EAAAA,YAJuC;AAKvCC,EAAAA,eALuC;AAMvC6B,EAAAA,gBAAgB,EAAhBA,yBANuC;AAOvCnB,EAAAA,cAPuC;AAQvCoB,EAAAA,YAAY,EAAE;AAAEC,IAAAA,EAAE,EAAFA,WAAF;AAAMC,IAAAA,EAAE,EAAFA;AAAN,GARyB;AASvCC,EAAAA,UAAU,EAAE;AACVN,IAAAA,IAAI,EAAE,KADI;AAEVO,IAAAA,UAAU,EAAE;AACVC,MAAAA,SAAS,EAAE;AADD,KAFF;AAKVC,IAAAA,QAAQ,EAAE,WALA;AAMVC,IAAAA,QAAQ,EAAE,KANA;AAOVC,IAAAA,QAAQ,EAAE,KAPA;AAQVC,IAAAA,QAAQ,EAAE;AARA;AAT2B,CAAzC;eAqBeX,U","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import 'bluebird-global'\nimport * as sdk from 'botpress/sdk'\nimport _ from 'lodash'\n\nimport en from '../translations/en.json'\nimport fr from '../translations/fr.json'\n\nimport dialogConditions from './dialog-conditions'\nimport EntityService from './entities/entities-service'\nimport { getIntents, updateIntent } from './intents/intent-service'\nimport { getOnBotMount } from './module-lifecycle/on-bot-mount'\nimport { getOnBotUnmount } from './module-lifecycle/on-bot-unmount'\nimport { getOnServerReady } from './module-lifecycle/on-server-ready'\nimport { getOnSeverStarted } from './module-lifecycle/on-server-started'\nimport { NLUState } from './typings'\n\nconst state: NLUState = { nluByBot: {} }\n\nconst onServerStarted = getOnSeverStarted(state)\nconst onServerReady = getOnServerReady(state)\nconst onBotMount = getOnBotMount(state)\nconst onBotUnmount = getOnBotUnmount(state)\nconst onModuleUnmount = async (bp: typeof sdk) => {\n  bp.events.removeMiddleware('nlu.incoming')\n  bp.http.deleteRouterForBot('nlu')\n  // if module gets deactivated but server keeps running, we want to destroy bot state\n  Object.keys(state.nluByBot).forEach(botID => () => onBotUnmount(bp, botID))\n}\n\nconst onTopicChanged = async (bp: typeof sdk, botId: string, oldName?: string, newName?: string) => {\n  const isRenaming = !!(oldName && newName)\n  const isDeleting = !newName\n\n  if (!isRenaming && !isDeleting) {\n    return\n  }\n\n  const ghost = bp.ghost.forBot(botId)\n  const entityService = new EntityService(ghost, botId)\n  const intentDefs = await getIntents(ghost)\n\n  for (const intentDef of intentDefs) {\n    const ctxIdx = intentDef.contexts.indexOf(oldName)\n    if (ctxIdx !== -1) {\n      intentDef.contexts.splice(ctxIdx, 1)\n\n      if (isRenaming) {\n        intentDef.contexts.push(newName)\n      }\n\n      await updateIntent(ghost, intentDef.name, intentDef, entityService)\n    }\n  }\n}\n\nconst entryPoint: sdk.ModuleEntryPoint = {\n  onServerStarted,\n  onServerReady,\n  onBotMount,\n  onBotUnmount,\n  onModuleUnmount,\n  dialogConditions,\n  onTopicChanged,\n  translations: { en, fr },\n  definition: {\n    name: 'nlu',\n    moduleView: {\n      stretched: true\n    },\n    menuIcon: 'translate',\n    menuText: 'NLU',\n    fullName: 'NLU',\n    homepage: 'https://botpress.com'\n  }\n}\n\nexport default entryPoint\n"]}
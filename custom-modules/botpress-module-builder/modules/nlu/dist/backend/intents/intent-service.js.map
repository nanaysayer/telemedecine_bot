{"version":3,"sources":["intents/intent-service.ts"],"names":["INTENTS_DIR","sanitizeFileName","name","toLowerCase","replace","intentExists","ghost","intentName","fileExists","getIntents","intentNames","directoryListing","Promise","mapSeries","n","getIntent","length","Error","readFileAsObject","saveIntent","intent","entityService","availableEntities","getEntities","_","chain","slots","flatMap","uniq","forEach","entity","find","e","upsertFile","JSON","stringify","undefined","updateIntent","content","intentDef","merged","merge","deleteIntent","deleteFile","updateIntentsSlotsEntities","prevEntityName","newEntityName","each","modified","slot","entities","index","arr","updateContextsFromTopics","flowsPaths","flows","map","flowPath","intents","flow","topicName","split","node","nodes","filter","x","type","tn","match","conditions","id","params","includes","Object","keys","isEqual","contexts","sort"],"mappings":"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","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import { FlowView } from 'botpress/common/typings'\nimport * as sdk from 'botpress/sdk'\nimport _ from 'lodash'\n\nimport { EntityService } from '../typings'\n\nconst INTENTS_DIR = './intents'\n\nfunction sanitizeFileName(name: string): string {\n  return name\n    .toLowerCase()\n    .replace(/\\.json$/i, '')\n    .replace(/[\\t\\s]/gi, '-')\n}\n\nfunction intentExists(ghost: sdk.ScopedGhostService, intentName: string): Promise<boolean> {\n  return ghost.fileExists(INTENTS_DIR, `${intentName}.json`)\n}\n\nexport async function getIntents(ghost: sdk.ScopedGhostService): Promise<sdk.NLU.IntentDefinition[]> {\n  const intentNames = await ghost.directoryListing(INTENTS_DIR, '*.json')\n  return Promise.mapSeries(intentNames, n => getIntent(ghost, n))\n}\n\nexport async function getIntent(ghost: sdk.ScopedGhostService, intentName: string): Promise<sdk.NLU.IntentDefinition> {\n  intentName = sanitizeFileName(intentName)\n  if (intentName.length < 1) {\n    throw new Error('Invalid intent name, expected at least one character')\n  }\n\n  if (!(await intentExists(ghost, intentName))) {\n    throw new Error('Intent does not exist')\n  }\n  return ghost.readFileAsObject(INTENTS_DIR, `${intentName}.json`)\n}\n\nexport async function saveIntent(\n  ghost: sdk.ScopedGhostService,\n  intent: sdk.NLU.IntentDefinition,\n  entityService: EntityService\n): Promise<sdk.NLU.IntentDefinition> {\n  const name = sanitizeFileName(intent.name)\n  if (name.length < 1) {\n    throw new Error('Invalid intent name, expected at least one character')\n  }\n\n  const availableEntities = await entityService.getEntities()\n\n  _.chain(intent.slots)\n    .flatMap('entities')\n    .uniq()\n    .forEach(entity => {\n      if (!availableEntities.find(e => e.name === entity)) {\n        throw Error(`\"${entity}\" is neither a system entity nor a custom entity`)\n      }\n    })\n\n  await ghost.upsertFile(INTENTS_DIR, `${name}.json`, JSON.stringify(intent, undefined, 2))\n  return intent\n}\n\nexport async function updateIntent(\n  ghost: sdk.ScopedGhostService,\n  name: string,\n  content: Partial<sdk.NLU.IntentDefinition>,\n  entityService: EntityService\n): Promise<sdk.NLU.IntentDefinition> {\n  const intentDef = await getIntent(ghost, name)\n  const merged = _.merge(intentDef, content) as sdk.NLU.IntentDefinition\n  if (content?.name !== name) {\n    await deleteIntent(ghost, name)\n    name = content.name\n  }\n  return saveIntent(ghost, merged, entityService)\n}\n\nexport async function deleteIntent(ghost: sdk.ScopedGhostService, intentName: string): Promise<void> {\n  intentName = sanitizeFileName(intentName)\n\n  if (!(await intentExists(ghost, intentName))) {\n    throw new Error('Intent does not exist')\n  }\n\n  return ghost.deleteFile(INTENTS_DIR, `${intentName}.json`)\n}\n\n// ideally this would be a filewatcher\nexport async function updateIntentsSlotsEntities(\n  ghost: sdk.ScopedGhostService,\n  prevEntityName: string,\n  newEntityName: string,\n  entityService: EntityService\n): Promise<void> {\n  _.each(await getIntents(ghost), async intent => {\n    let modified = false\n    _.each(intent.slots, slot => {\n      _.forEach(slot.entities, (e, index, arr) => {\n        if (e === prevEntityName) {\n          arr[index] = newEntityName\n          modified = true\n        }\n      })\n    })\n    if (modified) {\n      await updateIntent(ghost, intent.name, intent, entityService)\n    }\n  })\n}\n\n/**\n * This method read every workflow to extract their intent usage, so they can be in sync with their topics.\n * The list of intent names is not required, but it saves some processing\n */\nexport async function updateContextsFromTopics(\n  ghost: sdk.ScopedGhostService,\n  entityService: EntityService,\n  intentNames?: string[]\n): Promise<void> {\n  const flowsPaths = await ghost.directoryListing('flows', '*.flow.json')\n  const flows: sdk.Flow[] = await Promise.map(flowsPaths, async (flowPath: string) => ({\n    name: flowPath,\n    ...(await ghost.readFileAsObject<FlowView>('flows', flowPath))\n  }))\n\n  const intents: { [intentName: string]: string[] } = {}\n\n  for (const flow of flows) {\n    const topicName = flow.name.split('/')[0]\n\n    for (const node of flow.nodes.filter(x => x.type === 'trigger')) {\n      const tn = node as sdk.TriggerNode\n      const match = tn.conditions.find(x => x.id === 'user_intent_is')\n      const name = match?.params?.intentName\n\n      if (name && name !== 'none' && (!intentNames || intentNames.includes(name))) {\n        intents[name] = _.uniq([...(intents[name] || []), topicName])\n      }\n    }\n  }\n\n  for (const intentName of Object.keys(intents)) {\n    const intentDef = await getIntent(ghost, intentName)\n\n    if (!_.isEqual(intentDef.contexts.sort(), intents[intentName].sort())) {\n      intentDef.contexts = intents[intentName]\n      await saveIntent(ghost, intentDef, entityService)\n    }\n  }\n}\n"]}
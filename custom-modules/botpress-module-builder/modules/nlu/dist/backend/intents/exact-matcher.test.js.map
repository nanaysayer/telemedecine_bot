{"version":3,"sources":["intents/exact-matcher.test.ts"],"names":["u1","u2","u3","intent1","name","contexts","slot_definitions","utterances","map","makeTestUtterance","intent2","noneIntent","describe","input","intents","exactMatchIndex","test","Object","values","forEach","entry","expect","intent","not","toEqual","keys","u","replace","RegExp","SPECIAL_CHARSET","join","toLowerCase","k1","k2","k3","utt1","utt2","utt3","pred1","pred2","pred3","pred4","pred5","pred6","toBeUndefined","label","confidence"],"mappings":"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","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import { findExactIntentForCtx } from '../predict-pipeline'\nimport { SPECIAL_CHARSET } from '../tools/chars'\nimport { BuildExactMatchIndex, TrainOutput } from '../training-pipeline'\nimport { Intent } from '../typings'\nimport Utterance, { makeTestUtterance } from '../utterance/utterance'\n\nconst u1 = 'Hi my name is Alex W and I try to make NLU for a living'\nconst u2 = \"Hi I'm Justine and I'm a smart bot with very scoped skills\"\nconst u3 = 'Medication makes me high'\n\nconst intent1: Intent<Utterance> = {\n  name: 'intent1',\n  contexts: ['global'],\n  slot_definitions: [],\n  utterances: [u1, u2].map(makeTestUtterance)\n}\n\nconst intent2: Intent<Utterance> = {\n  name: 'intent2',\n  contexts: ['global', 'marijane'],\n  slot_definitions: [],\n  utterances: [makeTestUtterance(u3)]\n}\n\nconst noneIntent: Intent<Utterance> = {\n  name: 'none',\n  contexts: ['global'],\n  slot_definitions: [],\n  utterances: [makeTestUtterance('lorem ipsum dolor sit amet')]\n}\n\ndescribe('Exact match', () => {\n  const input = {\n    intents: [intent1, intent2, noneIntent]\n  } as TrainOutput\n\n  const exactMatchIndex = BuildExactMatchIndex(input)\n  describe('Build exact match index', () => {\n    test('none intent not added', () => {\n      Object.values(exactMatchIndex).forEach(entry => {\n        expect(entry.intent).not.toEqual('none')\n      })\n    })\n\n    test('index contains proper keys', () => {\n      const keys = [u1, u2, u3].map(u =>\n        u.replace(new RegExp(`(${SPECIAL_CHARSET.join('|')}|\\\\s)`, 'gi'), '').toLowerCase()\n      )\n      expect(Object.keys(exactMatchIndex)).toEqual(keys)\n    })\n\n    test('index content', () => {\n      const [k1, k2, k3] = [u1, u2, u3].map(u =>\n        u.replace(new RegExp(`(${SPECIAL_CHARSET.join('|')}|\\\\s)`, 'gi'), '').toLowerCase()\n      )\n      expect(exactMatchIndex[k1].intent).toEqual(intent1.name)\n      expect(exactMatchIndex[k1].contexts).toEqual(intent1.contexts)\n      expect(exactMatchIndex[k2].intent).toEqual(intent1.name)\n      expect(exactMatchIndex[k2].contexts).toEqual(intent1.contexts)\n      expect(exactMatchIndex[k3].intent).toEqual(intent2.name)\n      expect(exactMatchIndex[k3].contexts).toEqual(intent2.contexts)\n    })\n  })\n\n  test('find exact match', () => {\n    const [utt1, utt2, utt3] = [u1, u3, 'This is just a test'].map(makeTestUtterance)\n    const pred1 = findExactIntentForCtx(exactMatchIndex, utt1, 'marijane')\n    const pred2 = findExactIntentForCtx(exactMatchIndex, utt1, 'global')\n    const pred3 = findExactIntentForCtx(exactMatchIndex, utt2, 'marijane')\n    const pred4 = findExactIntentForCtx(exactMatchIndex, utt2, 'global')\n    const pred5 = findExactIntentForCtx(exactMatchIndex, utt3, 'marijane')\n    const pred6 = findExactIntentForCtx(exactMatchIndex, utt3, 'global')\n\n    expect(pred1).toBeUndefined()\n    expect(pred2.label).toEqual(intent1.name)\n    expect(pred2.confidence).toEqual(1)\n    expect(pred3.label).toEqual(intent2.name)\n    expect(pred3.confidence).toEqual(1)\n    expect(pred4.label).toEqual(intent2.name)\n    expect(pred4.confidence).toEqual(1)\n    expect(pred5).toBeUndefined()\n    expect(pred6).toBeUndefined()\n  })\n})\n"]}
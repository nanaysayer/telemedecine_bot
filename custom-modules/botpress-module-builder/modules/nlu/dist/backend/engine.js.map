{"version":3,"sources":["engine.ts"],"names":["trainDebug","DEBUG","sub","Engine","constructor","defaultLanguage","botId","provideTools","tools","train","intentDefs","entityDefs","languageCode","trainingSession","forBot","list_entities","filter","ent","type","map","e","name","fuzzyTolerance","fuzzy","sensitive","synonyms","_","chain","occurrences","keyBy","mapValues","value","pattern_entities","pattern","examples","matchCase","contexts","flatMap","i","uniq","input","intents","x","utterances","slot_definitions","slots","model","hash","success","reportTrainingProgress","progress","status","modelAlreadyLoaded","lang","predictorsByLang","modelsByLang","loadModels","models","Promise","mapSeries","loadModel","data","output","artefacts","_warmEntitiesCaches","get","_makePredictors","listEntities","entity","cache","CacheManager","getOrCreateCache","entityName","isCacheDump","loadCacheFromData","length","ctx_model","intent_model_by_ctx","oos_model","ctx_classifier","mlToolkit","SVM","Predictor","undefined","intent_classifier_per_ctx","toPairs","reduce","c","ctx","intentModel","oos_classifier","slot_tagger","SlotTagger","load","slots_model","kmeans","predict","sentence","includedContexts"],"mappings":"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","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import { MLToolkit, NLU } from 'botpress/sdk'\nimport _ from 'lodash'\n\nimport * as CacheManager from './cache-manager'\nimport { isPOSAvailable } from './language/pos-tagger'\nimport { computeModelHash, Model } from './model-service'\nimport { Predict, PredictInput, Predictors, PredictOutput } from './predict-pipeline'\nimport SlotTagger from './slots/slot-tagger'\nimport { isPatternValid } from './tools/patterns-utils'\nimport { computeKmeans, ProcessIntents, Trainer, TrainInput, TrainOutput } from './training-pipeline'\nimport { EntityCacheDump, ListEntity, ListEntityModel, NLUEngine, Tools, TrainingSession } from './typings'\n\nconst trainDebug = DEBUG('nlu').sub('training')\n\nexport default class Engine implements NLUEngine {\n  // NOTE: removed private in order to prevent important refactor (which will be done later)\n  static tools: Tools\n  private predictorsByLang: _.Dictionary<Predictors> = {}\n  private modelsByLang: _.Dictionary<Model> = {}\n\n  constructor(private defaultLanguage: string, private botId: string) {}\n\n  static provideTools(tools: Tools) {\n    Engine.tools = tools\n  }\n\n  async train(\n    intentDefs: NLU.IntentDefinition[],\n    entityDefs: NLU.EntityDefinition[],\n    languageCode: string,\n    trainingSession?: TrainingSession\n  ): Promise<Model> {\n    trainDebug.forBot(this.botId, `Started ${languageCode} training`)\n\n    const list_entities = entityDefs\n      .filter(ent => ent.type === 'list')\n      .map(e => {\n        return {\n          name: e.name,\n          fuzzyTolerance: e.fuzzy,\n          sensitive: e.sensitive,\n          synonyms: _.chain(e.occurrences)\n            .keyBy('name')\n            .mapValues('synonyms')\n            .value()\n        } as ListEntity\n      })\n\n    const pattern_entities = entityDefs\n      .filter(ent => ent.type === 'pattern' && isPatternValid(ent.pattern))\n      .map(ent => ({\n        name: ent.name,\n        pattern: ent.pattern,\n        examples: [], // TODO add this to entityDef\n        matchCase: ent.matchCase,\n        sensitive: ent.sensitive\n      }))\n\n    const contexts = _.chain(intentDefs)\n      .flatMap(i => i.contexts)\n      .uniq()\n      .value()\n\n    const input: TrainInput = {\n      botId: this.botId,\n      trainingSession,\n      languageCode,\n      list_entities,\n      pattern_entities,\n      contexts,\n      intents: intentDefs\n        .filter(x => !!x.utterances[languageCode])\n        .map(x => ({\n          name: x.name,\n          contexts: x.contexts,\n          utterances: x.utterances[languageCode],\n          slot_definitions: x.slots\n        }))\n    }\n\n    // Model should be build here, Trainer should not have any idea of how this is stored\n    // Error handling should be done here\n    const model = await Trainer(input, Engine.tools)\n    model.hash = computeModelHash(intentDefs, entityDefs)\n    if (model.success) {\n      trainingSession &&\n        Engine.tools.reportTrainingProgress(this.botId, 'Training complete', {\n          ...trainingSession,\n          progress: 1,\n          status: 'done'\n        })\n\n      trainDebug.forBot(this.botId, `Successfully finished ${languageCode} training`)\n    }\n\n    return model\n  }\n\n  private modelAlreadyLoaded(model: Model) {\n    if (!model?.languageCode) {\n      return false\n    }\n    const lang = model.languageCode\n\n    return (\n      !!this.predictorsByLang[lang] &&\n      !!this.modelsByLang[lang] &&\n      !!this.modelsByLang[lang].hash &&\n      !!model.hash &&\n      this.modelsByLang[lang].hash === model.hash\n    )\n  }\n\n  async loadModels(models: Model[]) {\n    // note the usage of mapSeries, possible race condition\n    return Promise.mapSeries(models, model => this.loadModel(model))\n  }\n\n  async loadModel(model: Model) {\n    if (this.modelAlreadyLoaded(model)) {\n      return\n    }\n    if (!model.data.output) {\n      const intents = await ProcessIntents(\n        model.data.input.intents,\n        model.languageCode,\n        model.data.artefacts.list_entities,\n        Engine.tools\n      )\n      model.data.output = { intents } as TrainOutput\n    }\n\n    this._warmEntitiesCaches(_.get(model, 'data.artefacts.list_entities', []))\n    this.predictorsByLang[model.languageCode] = await this._makePredictors(model)\n    this.modelsByLang[model.languageCode] = model\n  }\n\n  private _warmEntitiesCaches(listEntities: ListEntityModel[]) {\n    for (const entity of listEntities) {\n      if (!entity.cache) {\n        // when loading a model trained in a previous version\n        entity.cache = CacheManager.getOrCreateCache(entity.entityName, this.botId)\n      }\n      if (CacheManager.isCacheDump(entity.cache)) {\n        entity.cache = CacheManager.loadCacheFromData(<EntityCacheDump>entity.cache, entity.entityName, this.botId)\n      }\n    }\n  }\n\n  private async _makePredictors(model: Model): Promise<Predictors> {\n    const { input, output, artefacts } = model.data\n    const tools = Engine.tools\n\n    if (_.flatMap(input.intents, i => i.utterances).length <= 0) {\n      // we don't want to return undefined as extraction won't be triggered\n      // we want to make it possible to extract entities without having any intents\n      return { ...artefacts, contexts: [], intents: [], pattern_entities: input.pattern_entities } as Predictors\n    }\n\n    const { ctx_model, intent_model_by_ctx, oos_model } = artefacts\n    const ctx_classifier = ctx_model ? new tools.mlToolkit.SVM.Predictor(ctx_model) : undefined\n    const intent_classifier_per_ctx = _.toPairs(intent_model_by_ctx).reduce(\n      (c, [ctx, intentModel]) => ({ ...c, [ctx]: new tools.mlToolkit.SVM.Predictor(intentModel as string) }),\n      {} as _.Dictionary<MLToolkit.SVM.Predictor>\n    )\n    const oos_classifier = isPOSAvailable(model.languageCode) ? new tools.mlToolkit.SVM.Predictor(oos_model) : undefined\n    const slot_tagger = new SlotTagger(tools.mlToolkit)\n    slot_tagger.load(artefacts.slots_model)\n\n    const kmeans = computeKmeans(output.intents, tools) // TODO load from artefacts when persisted\n\n    return {\n      ...artefacts,\n      ctx_classifier,\n      oos_classifier,\n      intent_classifier_per_ctx,\n      slot_tagger,\n      kmeans,\n      pattern_entities: input.pattern_entities,\n      intents: output.intents,\n      contexts: input.contexts\n    }\n  }\n\n  async predict(sentence: string, includedContexts: string[]): Promise<PredictOutput> {\n    const input: PredictInput = {\n      defaultLanguage: this.defaultLanguage,\n      sentence,\n      includedContexts\n    }\n\n    // error handled a level highr\n    return Predict(input, Engine.tools, this.predictorsByLang)\n  }\n}\n"]}
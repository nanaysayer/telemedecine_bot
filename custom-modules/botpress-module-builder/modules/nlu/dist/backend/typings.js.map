{"version":3,"sources":["typings.ts"],"names":["BIO","INSIDE","BEGINNING","OUT"],"mappings":";;;;;;AAIO,MAAMA,GAAG,GAAG;AACjBC,EAAAA,MAAM,EAAE,GADS;AAEjBC,EAAAA,SAAS,EAAE,GAFM;AAGjBC,EAAAA,GAAG,EAAE;AAHY,CAAZ","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import { AxiosInstance } from 'axios'\nimport sdk from 'botpress/sdk'\nimport LRUCache from 'lru-cache'\n\nexport const BIO = {\n  INSIDE: 'I',\n  BEGINNING: 'B',\n  OUT: 'o'\n} as _.Dictionary<Tag>\n\nexport type Tag = 'o' | 'B' | 'I'\n\nexport interface KnownSlot extends sdk.NLU.SlotDefinition {\n  start: number\n  end: number\n  source: string\n}\n\nexport type Token2Vec = { [token: string]: number[] }\n\nexport interface Gateway {\n  source: LanguageSource\n  client: AxiosInstance\n  errors: number\n  disabledUntil?: Date\n}\n\nexport interface LangsGateway {\n  [lang: string]: Gateway[]\n}\n\nexport interface LanguageProvider {\n  languages: string[]\n  vectorize(tokens: string[], lang: string): Promise<Float32Array[]>\n  tokenize(utterances: string[], lang: string, vocab?: Token2Vec): Promise<string[][]>\n  generateSimilarJunkWords(subsetVocab: string[], lang: string): Promise<string[]>\n  getHealth(): Partial<NLUHealth>\n}\n\nexport interface LanguageSource {\n  /** The endpoint URL of the source */\n  endpoint: string\n  /** The authentication token, if required by the source */\n  authToken?: string\n}\n\nexport interface NLUHealth {\n  isEnabled: boolean\n  validProvidersCount: number\n  validLanguages: string[]\n}\n\nexport interface NluMlRecommendations {\n  minUtterancesForML: number\n  goodUtterancesForML: number\n}\n\nexport interface NLUEngine {\n  loadModel: (m: any) => Promise<void>\n  train: (...args) => Promise<any>\n  predict: (t: string, ctx: string[]) => Promise<sdk.IO.EventUnderstanding>\n}\n\nexport interface EntityService {\n  getSystemEntities(): sdk.NLU.EntityDefinition[]\n  getCustomEntities(): Promise<sdk.NLU.EntityDefinition[]>\n  getEntities(): Promise<sdk.NLU.EntityDefinition[]>\n  getEntity(x: string): Promise<sdk.NLU.EntityDefinition>\n  deleteEntity(x: string): Promise<void>\n  saveEntity(x: sdk.NLU.EntityDefinition): Promise<void>\n  updateEntity(x: string, y: sdk.NLU.EntityDefinition): Promise<void>\n}\n\nexport interface NLUState {\n  nluByBot: _.Dictionary<BotState>\n  languageProvider?: LanguageProvider\n  health?: NLUHealth\n  broadcastLoadModel?: (botId: string, hash: string, language: string) => Promise<void>\n  broadcastCancelTraining?: (botId: string, language: string) => Promise<void>\n}\n\nexport interface BotState {\n  botId: string\n  engine: NLUEngine\n  trainWatcher: sdk.ListenHandle\n  trainOrLoad: (forceTrain: boolean) => Promise<void>\n  trainSessions: _.Dictionary<TrainingSession>\n  cancelTraining: () => Promise<void>\n  isTraining: () => Promise<boolean>\n  entityService: EntityService\n}\n\nexport type TFIDF = _.Dictionary<number>\n\nexport type PatternEntity = Readonly<{\n  name: string\n  pattern: string\n  examples: string[]\n  matchCase: boolean\n  sensitive: boolean\n}>\n\nexport type ListEntity = Readonly<{\n  name: string\n  synonyms: { [canonical: string]: string[] }\n  fuzzyTolerance: number\n  sensitive: boolean\n}>\n\nexport type EntityCache = LRUCache<string, EntityExtractionResult[]>\nexport type EntityCacheDump = LRUCache.Entry<string, EntityExtractionResult[]>[]\n\nexport type ListEntityModel = {\n  type: 'custom.list'\n  id: string\n  languageCode: string\n  entityName: string\n  fuzzyTolerance: number\n  sensitive: boolean\n  /** @example { 'Air Canada': [ ['Air', '_Canada'], ['air', 'can'] ] } */\n  mappingsTokens: _.Dictionary<string[][]>\n  cache?: EntityCache | EntityCacheDump\n}\n\nexport type ExtractedSlot = { confidence: number; name: string; source: string; value: any }\nexport type SlotExtractionResult = { slot: ExtractedSlot; start: number; end: number }\nexport type ExtractedEntity = {\n  confidence: number\n  type: string\n  metadata: {\n    source: string\n    entityId: string\n    extractor: 'system' | 'list' | 'pattern'\n    unit?: string\n    occurrence?: string\n  }\n  value: string\n}\nexport type EntityExtractionResult = ExtractedEntity & { start: number; end: number }\n\nexport interface TrainingSession {\n  status: 'training' | 'canceled' | 'done' | 'idle'\n  language: string\n  progress: number\n  lock?: sdk.RedisLock\n}\n\nexport interface Tools {\n  tokenize_utterances(utterances: string[], languageCode: string, vocab?: Token2Vec): Promise<string[][]>\n  vectorize_tokens(tokens: string[], languageCode: string): Promise<number[][]>\n  partOfSpeechUtterances(utterances: string[][], languageCode: string): string[][]\n  generateSimilarJunkWords(vocabulary: string[], languageCode: string): Promise<string[]>\n  reportTrainingProgress(botId: string, message: string, trainSession: TrainingSession): void\n  duckling: SystemEntityExtractor\n  mlToolkit: typeof sdk.MLToolkit\n}\n\nexport interface SystemEntityExtractor {\n  extractMultiple(input: string[], lang: string, useCache?: Boolean): Promise<EntityExtractionResult[][]>\n  extract(input: string, lang: string): Promise<EntityExtractionResult[]>\n}\n\nexport type Intent<T> = Readonly<{\n  name: string\n  contexts: string[]\n  slot_definitions: SlotDefinition[]\n  utterances: T[]\n  vocab?: _.Dictionary<boolean>\n  slot_entities?: string[]\n}>\n\ntype SlotDefinition = Readonly<{\n  name: string\n  entities: string[]\n}>\n"]}
{"version":3,"sources":["utterance/utterance-parser.test.ts"],"names":["test","utterance","extracted","expect","length","toEqual","index","describe","res","parsedSlots","parts","text","slot","not","toBeDefined","name","value","rawPosition","start","end","cleanPosition","toHaveLength"],"mappings":"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","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import { extractSlots, parseUtterance } from './utterance-parser'\n\ntest('extract slots from utterance', () => {\n  const utterance = 'My name is [Kanye](me) and your name is [Jay](you)'\n  //                .01234567890123456789012345678901234567890123456789.\n  const extracted = extractSlots(utterance)\n  expect(extracted.length).toEqual(2)\n  expect(extracted[0][0]).toEqual('[Kanye](me)')\n  expect(extracted[0][1]).toEqual('Kanye')\n  expect(extracted[0][2]).toEqual('me')\n  expect(extracted[0].index).toEqual(11)\n  expect(extracted[1][0]).toEqual('[Jay](you)')\n  expect(extracted[1][1]).toEqual('Jay')\n  expect(extracted[1][2]).toEqual('you')\n  expect(extracted[1].index).toEqual(40)\n})\n\ndescribe('parse utterance', () => {\n  test('empty', () => {\n    const res = parseUtterance('')\n\n    expect(res.utterance).toEqual('')\n    expect(res.parsedSlots).toEqual([])\n    expect(res.parts).toEqual([])\n  })\n\n  test('no slots', () => {\n    const utterance = 'No one is safe, trust anyone but you.'\n\n    const res = parseUtterance(utterance)\n    expect(res.utterance).toEqual(utterance)\n    expect(res.parsedSlots).toEqual([])\n    expect(res.parts[0].text).toEqual('No one is safe, trust anyone but you.')\n    expect(res.parts[0].slot).not.toBeDefined()\n  })\n\n  test('single slot', () => {\n    const utterance = 'Brace yourself [Alex](you), big stuff coming.'\n    // raw            .01234567890123456789012345678901234567890123.\n    // clean          .012345678901234.5678......90.1.....234567890.\n    const res = parseUtterance(utterance)\n\n    expect(res.utterance).toEqual('Brace yourself Alex, big stuff coming.')\n    expect(res.parsedSlots.length).toEqual(1)\n    expect(res.parsedSlots[0].name).toEqual('you')\n    expect(res.parsedSlots[0].value).toEqual('Alex')\n    expect(res.parsedSlots[0].rawPosition).toEqual({ start: 15, end: 26 })\n    expect(res.parsedSlots[0].cleanPosition).toEqual({ start: 15, end: 19 })\n    expect(res.parts[0].text).toEqual('Brace yourself ')\n    expect(res.parts[0].slot).not.toBeDefined()\n    expect(res.parts[1].text).toEqual('Alex')\n    expect(res.parts[1].slot).toBeDefined()\n    expect(res.parts[1].slot.name).toEqual('you')\n    expect(res.parts[2].text).toEqual(', big stuff coming.')\n    expect(res.parts[2].slot).not.toBeDefined()\n  })\n\n  test('multiple slots', () => {\n    const utterance = 'My name is [Kanye](me) and your name is [Jay](you)'\n    // raw            .01234567890123456789012345678901234567890123456789.\n    // clean          .01234567890.12345.....678901234567890123.456.......\n    const res = parseUtterance(utterance)\n    expect(res.utterance).toEqual('My name is Kanye and your name is Jay')\n    expect(res.parsedSlots.length).toEqual(2)\n    expect(res.parsedSlots[0].name).toEqual('me')\n    expect(res.parsedSlots[0].value).toEqual('Kanye')\n    expect(res.parsedSlots[0].rawPosition).toEqual({ start: 11, end: 22 })\n    expect(res.parsedSlots[0].cleanPosition).toEqual({ start: 11, end: 16 })\n    expect(res.parsedSlots[1].name).toEqual('you')\n    expect(res.parsedSlots[1].value).toEqual('Jay')\n    expect(res.parsedSlots[1].rawPosition).toEqual({ start: 40, end: 50 })\n    expect(res.parsedSlots[1].cleanPosition).toEqual({ start: 34, end: 37 })\n    expect(res.parts).toHaveLength(4)\n    expect(res.parts[3].text).toEqual('Jay')\n  })\n\n  test('bounding spaces are trimmed from slots', () => {\n    const utterance = 'My name is[ Kanye    ](me) and your name is[   Jay ](you).'\n    // raw            .012345678901234567890123456789012345678901234567890123.\n    const res = parseUtterance(utterance)\n    expect(res.utterance).toEqual('My name is Kanye     and your name is   Jay .')\n    expect(res.parsedSlots.length).toEqual(2)\n    expect(res.parsedSlots[0].name).toEqual('me')\n    expect(res.parsedSlots[0].value).toEqual('Kanye')\n    expect(res.parsedSlots[0].rawPosition).toEqual({ start: 10, end: 26 })\n    expect(res.parsedSlots[0].cleanPosition).toEqual({ start: 10, end: 15 })\n    expect(res.parsedSlots[1].name).toEqual('you')\n    expect(res.parsedSlots[1].value).toEqual('Jay')\n    expect(res.parsedSlots[1].rawPosition).toEqual({ start: 43, end: 57 })\n    expect(res.parsedSlots[1].cleanPosition).toEqual({ start: 37, end: 40 })\n    expect(res.parts).toHaveLength(7)\n    expect(res.parts[4].text).toEqual('Jay')\n  })\n})\n"]}
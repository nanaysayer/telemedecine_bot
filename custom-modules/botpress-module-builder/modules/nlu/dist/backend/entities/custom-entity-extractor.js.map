{"version":3,"sources":["entities/custom-entity-extractor.ts"],"names":["ENTITY_SCORE_THRESHOLD","takeUntil","arr","start","desiredLength","total","result","_","takeWhile","slice","t","toAdd","toString","length","current","Math","abs","isSpace","pop","computeExactScore","a","b","str1","join","str2","min","max","score","i","computeFuzzyScore","d1","d2","caseSensitive","computeStructuralScore","charset1","uniq","flatten","map","x","split","charset2","charset_score","intersection","union","charsetLow1","c","toLowerCase","charsetLow2","charset_low_score","final_charset_score","mean","la","filter","lb","token_qty_score","size1","sumBy","size2","token_size_score","sqrt","splitModels","listModels","cacheKey","reduce","withCached","withoutCached","nextModel","cache","has","push","extractForListModel","utterance","listModel","candidates","longestCandidate","canonical","occurrences","toPairs","mappingsTokens","occurrence","tokens","workset","worksetStrLow","lowerCase","realSpaces","trim","worksetStrWCase","candidateAsString","exact_score","fuzzy","fuzzyTolerance","fuzzy_score","fuzzy_factor","structural_score","finalScore","round","end","source","eliminated","results","orderBy","pow","losers","forEach","match","confidence","offset","value","metadata","extractor","entityId","id","type","entityName","extractListEntities","list_entities","useCache","listModelsWithCachedRes","listModelsToExtract","matches","flatMap","get","extracted","set","concat","extractPatternEntities","pattern_entities","input","ent","regex","RegExp","pattern","matchCase","res","sourceIndex","name"],"mappings":"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","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import _ from 'lodash'\n\nimport jaroDistance from '../tools/jaro'\nimport levenDistance from '../tools/levenshtein'\nimport { extractPattern } from '../tools/patterns-utils'\nimport { EntityCache, EntityExtractionResult, ListEntityModel, PatternEntity } from '../typings'\nimport Utterance, { UtteranceToken } from '../utterance/utterance'\n\nconst ENTITY_SCORE_THRESHOLD = 0.6\n\nfunction takeUntil(\n  arr: ReadonlyArray<UtteranceToken>,\n  start: number,\n  desiredLength: number\n): ReadonlyArray<UtteranceToken> {\n  let total = 0\n  const result = _.takeWhile(arr.slice(start), t => {\n    const toAdd = t.toString().length\n    const current = total\n    if (current > 0 && Math.abs(desiredLength - current) < Math.abs(desiredLength - current - toAdd)) {\n      // better off as-is\n      return false\n    } else {\n      // we're closed to desired if we add a new token\n      total += toAdd\n      return current < desiredLength\n    }\n  })\n  if (result[result.length - 1].isSpace) {\n    result.pop()\n  }\n  return result\n}\n\nfunction computeExactScore(a: string[], b: string[]): number {\n  const str1 = a.join('')\n  const str2 = b.join('')\n  const min = Math.min(str1.length, str2.length)\n  const max = Math.max(str1.length, str2.length)\n  let score = 0\n  for (let i = 0; i < min; i++) {\n    if (str1[i] === str2[i]) {\n      score++\n    }\n  }\n  return score / max\n}\n\nfunction computeFuzzyScore(a: string[], b: string[]): number {\n  const str1 = a.join('')\n  const str2 = b.join('')\n  const d1 = levenDistance(str1, str2)\n  const d2 = jaroDistance(str1, str2, { caseSensitive: false })\n  return (d1 + d2) / 2\n}\n\nfunction computeStructuralScore(a: string[], b: string[]): number {\n  const charset1 = _.uniq(_.flatten(a.map(x => x.split(''))))\n  const charset2 = _.uniq(_.flatten(b.map(x => x.split(''))))\n  const charset_score = _.intersection(charset1, charset2).length / _.union(charset1, charset2).length\n  const charsetLow1 = charset1.map(c => c.toLowerCase())\n  const charsetLow2 = charset2.map(c => c.toLowerCase())\n  const charset_low_score = _.intersection(charsetLow1, charsetLow2).length / _.union(charsetLow1, charsetLow2).length\n  const final_charset_score = _.mean([charset_score, charset_low_score])\n\n  const la = Math.max(1, a.filter(x => x.length > 1).length)\n  const lb = Math.max(1, a.filter(x => x.length > 1).length)\n  const token_qty_score = Math.min(la, lb) / Math.max(la, lb)\n\n  const size1 = _.sumBy(a, 'length')\n  const size2 = _.sumBy(b, 'length')\n  const token_size_score = Math.min(size1, size2) / Math.max(size1, size2)\n\n  return Math.sqrt(final_charset_score * token_qty_score * token_size_score)\n}\n\n// returns list entities having cached results in one array and those without results in another\nfunction splitModels(listModels: ListEntityModel[], cacheKey: string): [ListEntityModel[], ListEntityModel[]] {\n  return listModels.reduce(\n    ([withCached, withoutCached], nextModel) => {\n      if ((<EntityCache>nextModel.cache)?.has(cacheKey) ?? false) {\n        withCached.push(nextModel)\n      } else {\n        withoutCached.push(nextModel)\n      }\n      return [withCached, withoutCached]\n    },\n    [[], []]\n  )\n}\n\nfunction extractForListModel(utterance: Utterance, listModel: ListEntityModel): EntityExtractionResult[] {\n  const candidates = []\n  let longestCandidate = 0\n\n  for (const [canonical, occurrences] of _.toPairs(listModel.mappingsTokens)) {\n    for (const occurrence of occurrences) {\n      for (let i = 0; i < utterance.tokens.length; i++) {\n        if (utterance.tokens[i].isSpace) {\n          continue\n        }\n        const workset = takeUntil(utterance.tokens, i, _.sumBy(occurrence, 'length'))\n        const worksetStrLow = workset.map(x => x.toString({ lowerCase: true, realSpaces: true, trim: false }))\n        const worksetStrWCase = workset.map(x => x.toString({ lowerCase: false, realSpaces: true, trim: false }))\n        const candidateAsString = occurrence.join('')\n\n        if (candidateAsString.length > longestCandidate) {\n          longestCandidate = candidateAsString.length\n        }\n\n        const exact_score = computeExactScore(worksetStrWCase, occurrence) === 1 ? 1 : 0\n        const fuzzy = listModel.fuzzyTolerance < 1 && worksetStrLow.join('').length >= 4\n        const fuzzy_score = computeFuzzyScore(\n          worksetStrLow,\n          occurrence.map(t => t.toLowerCase())\n        )\n        const fuzzy_factor = fuzzy_score >= listModel.fuzzyTolerance ? fuzzy_score : 0\n        const structural_score = computeStructuralScore(worksetStrWCase, occurrence)\n        const finalScore = fuzzy ? fuzzy_factor * structural_score : exact_score * structural_score\n\n        candidates.push({\n          score: _.round(finalScore, 2),\n          canonical,\n          start: i,\n          end: i + workset.length - 1,\n          source: workset.map(t => t.toString({ lowerCase: false, realSpaces: true })).join(''),\n          occurrence: occurrence.join(''),\n          eliminated: false\n        })\n      }\n    }\n\n    for (let i = 0; i < utterance.tokens.length; i++) {\n      const results = _.orderBy(\n        candidates.filter(x => !x.eliminated && x.start <= i && x.end >= i),\n        // we want to favor longer matches (but is obviously less important than score)\n        // so we take its length into account (up to the longest candidate)\n        x => x.score * Math.pow(Math.min(x.source.length, longestCandidate), 1 / 5),\n        'desc'\n      )\n      if (results.length > 1) {\n        const [, ...losers] = results\n        losers.forEach(x => (x.eliminated = true))\n      }\n    }\n  }\n\n  return candidates\n    .filter(x => !x.eliminated && x.score >= ENTITY_SCORE_THRESHOLD)\n    .map(match => ({\n      confidence: match.score,\n      start: utterance.tokens[match.start].offset,\n      end: utterance.tokens[match.end].offset + utterance.tokens[match.end].value.length,\n      value: match.canonical,\n      metadata: {\n        extractor: 'list',\n        source: match.source,\n        occurrence: match.occurrence,\n        entityId: listModel.id\n      },\n      type: listModel.entityName\n    })) as EntityExtractionResult[]\n}\n\nexport const extractListEntities = (\n  utterance: Utterance,\n  list_entities: ListEntityModel[],\n  useCache: boolean = false\n): EntityExtractionResult[] => {\n  const cacheKey = utterance.toString({ lowerCase: true })\n  const [listModelsWithCachedRes, listModelsToExtract] = useCache\n    ? splitModels(list_entities, cacheKey)\n    : [[], list_entities]\n\n  let matches = _.flatMap(listModelsWithCachedRes, listModel => (listModel.cache as EntityCache)?.get(cacheKey))\n\n  for (const listModel of listModelsToExtract) {\n    const extracted = extractForListModel(utterance, listModel)\n    if (extracted.length > 0) {\n      useCache && (listModel.cache as EntityCache)?.set(cacheKey, extracted)\n      matches = matches.concat(...extracted)\n    }\n  }\n\n  return matches\n}\n\nexport const extractPatternEntities = (\n  utterance: Utterance,\n  pattern_entities: PatternEntity[]\n): EntityExtractionResult[] => {\n  const input = utterance.toString()\n  // taken from pattern_extractor\n  return _.flatMap(pattern_entities, ent => {\n    const regex = new RegExp(ent.pattern!, ent.matchCase ? '' : 'i')\n\n    return extractPattern(input, regex, []).map(res => ({\n      confidence: 1,\n      start: Math.max(0, res.sourceIndex),\n      end: Math.min(input.length, res.sourceIndex + res.value.length),\n      value: res.value,\n      metadata: {\n        extractor: 'pattern',\n        source: res.value,\n        entityId: `custom.pattern.${ent.name}`\n      },\n      type: ent.name\n    }))\n  })\n}\n"]}
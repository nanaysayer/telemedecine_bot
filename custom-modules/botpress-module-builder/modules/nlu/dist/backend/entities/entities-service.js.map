{"version":3,"sources":["entities/entities-service.ts"],"names":["ENTITIES_DIR","EntitiesService","constructor","ghost","botId","sanitizeFileName","name","toLowerCase","replace","entityExists","entityName","fileExists","getSystemEntities","DucklingEntityExtractor","entityTypes","map","e","type","getCustomEntities","intentNames","directoryListing","Promise","mapSeries","n","getEntity","getEntities","Error","readFileAsObject","deleteEntity","nameSanitized","CacheManager","deleteCache","deleteFile","saveEntity","entity","upsertFile","JSON","stringify","undefined","updateEntity","targetEntityName","targetSanitized","copyCache","all","getOrCreateCache","reset"],"mappings":";;;;;;;AAEA;;AACA;;AAGA;;;;;;AAEA,MAAMA,YAAY,GAAG,YAArB;;AAEe,MAAMC,eAAN,CAA+C;AAC5DC,EAAAA,WAAW,CAASC,KAAT,EAAgDC,KAAhD,EAA+D;AAAA,SAAtDD,KAAsD,GAAtDA,KAAsD;AAAA,SAAfC,KAAe,GAAfA,KAAe;AAAE;;AAEpEC,EAAAA,gBAAR,CAAyBC,IAAzB,EAA+C;AAC7C,WAAOA,IAAI,CACRC,WADI,GAEJC,OAFI,CAEI,UAFJ,EAEgB,EAFhB,EAGJA,OAHI,CAGI,UAHJ,EAGgB,GAHhB,CAAP;AAID;;AAEOC,EAAAA,YAAR,CAAqBC,UAArB,EAA2D;AACzD,WAAO,KAAKP,KAAL,CAAWQ,UAAX,CAAsBX,YAAtB,EAAqC,GAAEU,UAAW,OAAlD,CAAP;AACD;;AAEME,EAAAA,iBAAP,GAAuD;AACrD,WAAO,CAAC,GAAGC,4CAAwBC,WAA5B,EAAyC,KAAzC,EAAgDC,GAAhD,CAAoDC,CAAC,KAAK;AAC/DV,MAAAA,IAAI,EAAEU,CADyD;AAE/DC,MAAAA,IAAI,EAAE;AAFyD,KAAL,CAArD,CAAP;AAID;;AAED,QAAaC,iBAAb,GAAsE;AACpE,UAAMC,WAAW,GAAG,MAAM,KAAKhB,KAAL,CAAWiB,gBAAX,CAA4BpB,YAA5B,EAA0C,QAA1C,CAA1B;AACA,WAAOqB,OAAO,CAACC,SAAR,CAAkBH,WAAlB,EAA+BI,CAAC,IAAI,KAAKC,SAAL,CAAeD,CAAf,CAApC,CAAP;AACD;;AAED,QAAaE,WAAb,GAAgE;AAC9D,WAAO,CAAC,GAAG,KAAKb,iBAAL,EAAJ,EAA8B,IAAI,MAAM,KAAKM,iBAAL,EAAV,CAA9B,CAAP;AACD;;AAED,QAAaM,SAAb,CAAuBd,UAAvB,EAA8E;AAC5EA,IAAAA,UAAU,GAAG,KAAKL,gBAAL,CAAsBK,UAAtB,CAAb;;AAEA,QAAI,EAAE,MAAM,KAAKD,YAAL,CAAkBC,UAAlB,CAAR,CAAJ,EAA4C;AAC1C,YAAM,IAAIgB,KAAJ,CAAU,uBAAV,CAAN;AACD;;AACD,WAAO,KAAKvB,KAAL,CAAWwB,gBAAX,CAA4B3B,YAA5B,EAA2C,GAAEU,UAAW,OAAxD,CAAP;AACD;;AAED,QAAakB,YAAb,CAA0BlB,UAA1B,EAA6D;AAC3D,UAAMmB,aAAa,GAAG,KAAKxB,gBAAL,CAAsBK,UAAtB,CAAtB;;AACA,QAAI,EAAE,MAAM,KAAKD,YAAL,CAAkBoB,aAAlB,CAAR,CAAJ,EAA+C;AAC7C,YAAM,IAAIH,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAEDI,IAAAA,YAAY,CAACC,WAAb,CAAyBrB,UAAzB,EAAqC,KAAKN,KAA1C;AACA,WAAO,KAAKD,KAAL,CAAW6B,UAAX,CAAsBhC,YAAtB,EAAqC,GAAE6B,aAAc,OAArD,CAAP;AACD;;AAED,QAAaI,UAAb,CAAwBC,MAAxB,EAAyE;AACvE,UAAML,aAAa,GAAG,KAAKxB,gBAAL,CAAsB6B,MAAM,CAAC5B,IAA7B,CAAtB;AACA,WAAO,KAAKH,KAAL,CAAWgC,UAAX,CAAsBnC,YAAtB,EAAqC,GAAE6B,aAAc,OAArD,EAA6DO,IAAI,CAACC,SAAL,CAAeH,MAAf,EAAuBI,SAAvB,EAAkC,CAAlC,CAA7D,CAAP;AACD;;AAED,QAAaC,YAAb,CAA0BC,gBAA1B,EAAoDN,MAApD,EAAqG;AACnG,UAAML,aAAa,GAAG,KAAKxB,gBAAL,CAAsB6B,MAAM,CAAC5B,IAA7B,CAAtB;AACA,UAAMmC,eAAe,GAAG,KAAKpC,gBAAL,CAAsBmC,gBAAtB,CAAxB;;AAEA,QAAIC,eAAe,KAAKZ,aAAxB,EAAuC;AACrC;AACAC,MAAAA,YAAY,CAACY,SAAb,CAAuBF,gBAAvB,EAAyCN,MAAM,CAAC5B,IAAhD,EAAsD,KAAKF,KAA3D;AACA,YAAMiB,OAAO,CAACsB,GAAR,CAAY,CAChB,KAAKf,YAAL,CAAkBa,eAAlB,CADgB,EAEhB,+CAA2B,KAAKtC,KAAhC,EAAuCsC,eAAvC,EAAwDZ,aAAxD,EAAuE,IAAvE,CAFgB,CAAZ,CAAN;AAID,KAPD,MAOO;AACL;AACAC,MAAAA,YAAY,CAACc,gBAAb,CAA8BJ,gBAA9B,EAAgD,KAAKpC,KAArD,EAA4DyC,KAA5D;AACD;;AACD,UAAM,KAAKZ,UAAL,CAAgBC,MAAhB,CAAN;AACD;;AAtE2D","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\n\nimport * as CacheManager from '../cache-manager'\nimport { updateIntentsSlotsEntities } from '../intents/intent-service'\nimport { EntityService } from '../typings'\n\nimport { DucklingEntityExtractor } from './duckling_extractor'\n\nconst ENTITIES_DIR = './entities'\n\nexport default class EntitiesService implements EntityService {\n  constructor(private ghost: sdk.ScopedGhostService, private botId: string) {}\n\n  private sanitizeFileName(name: string): string {\n    return name\n      .toLowerCase()\n      .replace(/\\.json$/i, '')\n      .replace(/[\\t\\s]/gi, '-')\n  }\n\n  private entityExists(entityName: string): Promise<boolean> {\n    return this.ghost.fileExists(ENTITIES_DIR, `${entityName}.json`)\n  }\n\n  public getSystemEntities(): sdk.NLU.EntityDefinition[] {\n    return [...DucklingEntityExtractor.entityTypes, 'any'].map(e => ({\n      name: e,\n      type: 'system'\n    })) as sdk.NLU.EntityDefinition[]\n  }\n\n  public async getCustomEntities(): Promise<sdk.NLU.EntityDefinition[]> {\n    const intentNames = await this.ghost.directoryListing(ENTITIES_DIR, '*.json')\n    return Promise.mapSeries(intentNames, n => this.getEntity(n))\n  }\n\n  public async getEntities(): Promise<sdk.NLU.EntityDefinition[]> {\n    return [...this.getSystemEntities(), ...(await this.getCustomEntities())]\n  }\n\n  public async getEntity(entityName: string): Promise<sdk.NLU.EntityDefinition> {\n    entityName = this.sanitizeFileName(entityName)\n\n    if (!(await this.entityExists(entityName))) {\n      throw new Error('Entity does not exist')\n    }\n    return this.ghost.readFileAsObject(ENTITIES_DIR, `${entityName}.json`)\n  }\n\n  public async deleteEntity(entityName: string): Promise<void> {\n    const nameSanitized = this.sanitizeFileName(entityName)\n    if (!(await this.entityExists(nameSanitized))) {\n      throw new Error('Entity does not exist')\n    }\n\n    CacheManager.deleteCache(entityName, this.botId)\n    return this.ghost.deleteFile(ENTITIES_DIR, `${nameSanitized}.json`)\n  }\n\n  public async saveEntity(entity: sdk.NLU.EntityDefinition): Promise<void> {\n    const nameSanitized = this.sanitizeFileName(entity.name)\n    return this.ghost.upsertFile(ENTITIES_DIR, `${nameSanitized}.json`, JSON.stringify(entity, undefined, 2))\n  }\n\n  public async updateEntity(targetEntityName: string, entity: sdk.NLU.EntityDefinition): Promise<void> {\n    const nameSanitized = this.sanitizeFileName(entity.name)\n    const targetSanitized = this.sanitizeFileName(targetEntityName)\n\n    if (targetSanitized !== nameSanitized) {\n      // entity renamed\n      CacheManager.copyCache(targetEntityName, entity.name, this.botId)\n      await Promise.all([\n        this.deleteEntity(targetSanitized),\n        updateIntentsSlotsEntities(this.ghost, targetSanitized, nameSanitized, this)\n      ])\n    } else {\n      // entity changed\n      CacheManager.getOrCreateCache(targetEntityName, this.botId).reset()\n    }\n    await this.saveEntity(entity)\n  }\n}\n"]}
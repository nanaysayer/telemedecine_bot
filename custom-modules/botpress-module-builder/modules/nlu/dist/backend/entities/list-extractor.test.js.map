{"version":3,"sources":["entities/list-extractor.test.ts"],"names":["T","utterance","split","list_entities","entityName","fuzzyTolerance","FuzzyTolerance","Medium","id","languageCode","mappingsTokens","Blueberry","map","Strawberry","Raspberry","Apple","sensitive","type","Loose","JFK","SFO","YQB","describe","test","textToUtterance","results","expect","toHaveLength","value","toBe","start","end","confidence","toBeGreaterThan","metadata","source","occurrence","assertEntity","expression","text","parsedSlots","parts","p","strConds","cleanPosition","found","filter","x","conditions","name","cases","t","undefined","push","length","find","each","a","b","Number","toBeGreaterThanOrEqual","includes","toEqual","txt","tokens","vectors","Array","fill","posTags","_","Utterance"],"mappings":"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","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import 'bluebird-global'\n\nimport { EntityExtractionResult, ListEntityModel } from '../typings'\nimport Utterance from '../utterance/utterance'\nimport { parseUtterance } from '../utterance/utterance-parser'\n\nimport { extractListEntities } from './custom-entity-extractor'\nimport { FuzzyTolerance } from './validation'\n\nconst T = (utterance: string): string[] => utterance.split(/( )/g)\n\nconst list_entities: ListEntityModel[] = [\n  {\n    entityName: 'fruit',\n    fuzzyTolerance: FuzzyTolerance.Medium,\n    id: 'custom.list.fruit',\n    languageCode: 'en',\n    mappingsTokens: {\n      Blueberry: ['blueberries', 'blueberry', 'blue berries', 'blue berry', 'poisonous blueberry'].map(T),\n      Strawberry: ['strawberries', 'strawberry', 'straw berries', 'straw berry'].map(T),\n      Raspberry: ['raspberries', 'raspberry', 'rasp berries', 'rasp berry'].map(T),\n      Apple: ['apple', 'apples', 'red apple', 'yellow apple'].map(T)\n    },\n    sensitive: false,\n    type: 'custom.list'\n  },\n  {\n    entityName: 'company',\n    fuzzyTolerance: FuzzyTolerance.Medium,\n    id: 'custom.list.company',\n    languageCode: 'en',\n    mappingsTokens: {\n      Apple: ['Apple', 'Apple Computers', 'Apple Corporation', 'Apple Inc'].map(T)\n    },\n    sensitive: false,\n    type: 'custom.list'\n  },\n  {\n    entityName: 'airport',\n    fuzzyTolerance: FuzzyTolerance.Loose,\n    id: 'custom.list.city',\n    languageCode: 'en',\n    mappingsTokens: {\n      JFK: ['JFK', 'New-York', 'NYC'].map(T),\n      SFO: ['SFO', 'SF', 'San-Francisco'].map(T),\n      YQB: ['YQB', 'Quebec', 'Quebec city', 'QUEB'].map(T)\n    },\n    sensitive: false,\n    type: 'custom.list'\n  }\n]\ndescribe('list entity extractor', () => {\n  test('Data structure test', async () => {\n    const utterance = textToUtterance('Blueberries are berries that are blue')\n    const results = extractListEntities(utterance, list_entities, false)\n\n    expect(results).toHaveLength(1)\n    expect(results[0].value).toBe('Blueberry')\n    expect(results[0].start).toBe(0)\n    expect(results[0].end).toBe(11)\n    expect(results[0].type).toBe('fruit')\n    expect(results[0].confidence).toBeGreaterThan(0.9)\n    expect(results[0].metadata.source).toBe('Blueberries')\n    expect(results[0].metadata.occurrence).toBe('blueberries')\n  })\n\n  describe('exact match', () => {\n    assertEntity('[Blueberries](qty:1 type:fruit value:Blueberry confidence:0.9) are berries that are blue')\n    assertEntity('[Blue berries](qty:1 type:fruit value:Blueberry confidence:0.9) are berries that are blue')\n    assertEntity('[blueberry](qty:1 type:fruit value:Blueberry confidence:0.9) are berries that are blue')\n    assertEntity('blueberry [are berries that are blue](qty:0)') // are berries match rasp berries\n    assertEntity('but [strawberries](qty:1 value:Strawberry) are red unlike [blueberries](qty:1 value:Blueberry)')\n    assertEntity('[but](qty:0) strawberries [are red unlike](qty:0) blueberries')\n    assertEntity(\n      'an [apple](qty:2 type:fruit confidence:0.90) can be a fruit but also [apple corporation](qty:2 type:company confidence:0.85)'\n    )\n    assertEntity('that is a [poisonous blueberry](qty:1 value:Blueberry confidence:1)')\n    assertEntity('the [red apple](qty:2 type:fruit confidence:0.9) corporation')\n    assertEntity('the red [apple corporation](qty:2 type:company)')\n    assertEntity('the [red](qty:1) apple [corporation](qty:1)')\n    assertEntity('[apple](qty:2)')\n    assertEntity('[apple inc](qty:2)')\n    assertEntity(\n      '[SF](qty:1 type:airport) is where I was born, I now live in [Quebec](qty:1 type:airport) [the city](qty:0)'\n    )\n  })\n\n  describe('fuzzy match', () => {\n    describe('loose fuzzy', () => {\n      assertEntity('[Qebec citty](qty:1 value:YQB) is a city within [QC](qty:0), a provice.')\n      assertEntity('A quaterback is also called a [QB](qty:0) and [sn francisco](qty:1 value:SFO) used to have one')\n      assertEntity('[sn frncisco](qty:0) is nice but for [New-Yorkers](qty:0) [new-yrk](qty:1 value:JFK) is better')\n      assertEntity(\"I never been to [kbec city](qty:0) but I've been to [kebec city](qty:1 value:YQB)\")\n      assertEntity(\"Let's go to [Nova-York](qty:0)\")\n    })\n\n    describe('missing characters', () => {\n      assertEntity('[Bluebrries](qty:1 value:Blueberry) are berries that are blue')\n      assertEntity('[Blueberies](qty:1 value:Blueberry) are berries that are blue')\n      assertEntity('[Bluberies](qty:1 value:Blueberry) are berries that are blue')\n      assertEntity('that is a [poisonous bleberry](qty:1 value:Blueberry confidence:0.9)') // the longer the word, the more we tolerate mistakes\n      assertEntity('that is a [poisonus bleberry](qty:1 value:Blueberry confidence:0.8)') // prefer 'poisonous blueberry' to 'blueberry'\n    })\n\n    describe('added chars', () => {\n      assertEntity('[apple](qty:2) [corporations](qty:1) [inc](qty:0)') // corporation with a S\n      assertEntity('[Apple a Corporation](type:company)')\n      assertEntity('[apple](qty:2) [coroporations](qty:1) [inc](qty:0)')\n      // too many added chars\n      assertEntity('[Apple](qty:2) [build Computers](qty:0)')\n      assertEntity('[apple](qty:2) [Zcoroporationss](qty:0) [inc](qty:0)')\n    })\n\n    describe('too many missing chars', () => {\n      assertEntity('[ale](qty:0)')\n      assertEntity('[Blberies](qty:0) are berries that are blue')\n      assertEntity('[bberries](qty:0) are berries that are blue')\n      assertEntity('that is a [poison](qty:0) [blueberry](qty:1 value:Blueberry confidence:0.9)') // prefer 'blueberry' to 'poisonous blueberry'\n      assertEntity('[blberries](qty:1) are berries that are blue')\n      assertEntity('[bberries are berries that are blue](qty:0)')\n    })\n\n    describe('casing issues', () => {\n      assertEntity('[queb](qty:1 value:YQB confidence:0.7) is the place')\n      assertEntity('[Queb](qty:1 value:YQB confidence:0.75) is the place')\n      assertEntity('[QUeb](qty:1 value:YQB confidence:0.8) is the place')\n      assertEntity('[QUEb](qty:1 value:YQB confidence:0.85) is the place')\n      assertEntity('[QUEB](qty:1 value:YQB confidence:0.9) is the place')\n      assertEntity('[yqb](qty:0) is the place') // less than 4 chars\n\n      // casing + typos\n      // this will need better structural scoring\n      // assertEntity('[AppLe](qty:1 type:company) is a company, not a fruit')\n      // assertEntity('[aple](qty:1)') // Apple the company has a capital 'A'\n    })\n\n    describe('bad keystrokes', () => {\n      // minor\n      assertEntity('[blurberries](qty:1 value:Blueberry confidence:0.8) are berries that are blue')\n      assertEntity('[poisoneouss blurberry](qty:1 value:Blueberry confidence:0.8) are berries that are blue')\n      // major\n      assertEntity('[vluqberries](qty:0) are berries that are blue')\n      // assertEntity('[blumbeerries](qty:0) are berries that are blue') // this needs keyboard distance computation\n      // assertEntity('[bluabarrias](qty:0) are berries that are blue') // this needs keyboard distance computation\n      // minor letter reversal\n      assertEntity('[blueebrries](qty:1 value:Blueberry) are berries that are blue')\n      // letter reversal + missing char\n      assertEntity('[lbuberries](qty:0) are berries that are blue')\n    })\n\n    // no others\n    assertEntity('Blueberries [are berries that are blue](qty:0)')\n  })\n})\n\n///////////////////\n////// HELPERS\n///////////////////\n\nfunction assertEntity(expression: string) {\n  const { utterance: text, parsedSlots } = parseUtterance(expression)\n  const parts = parsedSlots.map(p => p.value)\n\n  const utterance = textToUtterance(text)\n  const results = extractListEntities(utterance, list_entities, false)\n\n  for (const strConds of parsedSlots) {\n    const { start, end } = strConds.cleanPosition\n    const found = results.filter(x => (x.start >= start && x.start < end) || (x.end <= end && x.end > start))\n\n    const conditions = strConds.name.split(' ')\n\n    const cases = []\n    let t: EntityExtractionResult = undefined\n\n    for (const [name, value] of conditions.map(x => x.split(':'))) {\n      if (name === 'qty') {\n        cases.push(['qty', value, found.length])\n      } else if (name === 'type') {\n        t = found.find(x => x.type === value)\n        cases.push(['type', value, t ? t.type : 'N/A'])\n      } else if (name === 'value') {\n        t = found.find(x => x.value === value)\n        cases.push(['value', value, t ? t.value : 'N/A'])\n      } else if (name === 'confidence' && t) {\n        cases.push(['confidence', value, t.confidence])\n      }\n    }\n\n    if (t) {\n      cases.push(['start', start, t.start])\n      cases.push(['end', end, t.end])\n    }\n\n    test.each(cases)(`\"${text}\" (${parts}) '%s' -> Expected(%s) Actual(%s)`, (expression, a, b) => {\n      if (expression === 'confidence') {\n        expect(Number(b)).toBeGreaterThanOrEqual(Number(a))\n      } else if (['qty', 'start', 'end'].includes(expression)) {\n        expect(Number(b)).toEqual(Number(a))\n      } else {\n        expect(b).toEqual(a)\n      }\n    })\n  }\n}\n\nfunction textToUtterance(txt: string): Utterance {\n  const tokens = T(txt)\n  const vectors = tokens.map(() => new Array(100).fill(0))\n  const posTags = tokens.map(_ => '_')\n  return new Utterance(tokens, vectors, posTags, 'en')\n}\n"]}
{"version":3,"sources":["entities/duckling_extractor.ts"],"names":["JOIN_CHAR","SPACE","BATCH_SIZE","DISABLED_MSG","DUCKLING_ENTITIES","RETRY_POLICY","backoff","max_tries","timeout","CACHE_PATH","path","join","process","APP_DATA_PATH","DucklingEntityExtractor","constructor","logger","_","debounce","_cacheDumpEnabled","_dumpCache","entityTypes","enabled","configure","url","proxyConfig","PROXY","httpsAgent","httpsProxyAgent","client","Axios","create","baseURL","headers","data","get","warn","err","attachError","_cache","lru","length","val","key","max","_restoreCache","dump","load","console","log","extractMultiple","inputs","lang","useCache","Array","fill","options","tz","_getTz","refTime","Date","now","cached","toFetch","reduce","input","idx","has","entities","chunks","chunk","batchedRes","Promise","mapSeries","c","_extractBatch","chain","flatten","concat","orderBy","map","value","extract","error","message","batch","params","isEmpty","strBatch","x","concatBatch","batchEntities","_fetchDuckling","splitLocations","RegExp","v","sourceIndex","to","locs","from","filter","e","start","end","_cacheBatchResults","batchItm","i","text","post","isArray","Error","_mapDuckToEntity","bind","response","results","zip","forEach","set","_onCacheChanged","Intl","DateTimeFormat","resolvedOptions","timeZone","duckEnt","dimensionData","_getUnitAndValue","dim","confidence","type","metadata","extractor","source","body","entityId","unit","dimension","rawVal","normalized","grain"],"mappings":"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","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import Axios, { AxiosInstance } from 'axios'\nimport retry from 'bluebird-retry'\nimport * as sdk from 'botpress/sdk'\nimport { ensureFile, pathExists, readJSON, writeJson } from 'fs-extra'\nimport httpsProxyAgent from 'https-proxy-agent'\nimport _ from 'lodash'\nimport lru from 'lru-cache'\nimport ms from 'ms'\nimport sizeof from 'object-sizeof'\nimport path from 'path'\n\nimport { extractPattern } from '../tools/patterns-utils'\nimport { SPACE } from '../tools/token-utils'\nimport { EntityExtractionResult, SystemEntityExtractor } from '../typings'\n\ninterface DucklingParams {\n  tz: string\n  refTime: number\n  lang: string\n}\n\ninterface KeyedItem {\n  input: string\n  idx: number\n  entities?: EntityExtractionResult[]\n}\n\nexport const JOIN_CHAR = `::${SPACE}::`\nconst BATCH_SIZE = 10\nconst DISABLED_MSG = `, so it will be disabled.\nFor more information (or if you want to self-host it), please check the docs at\nhttps://botpress.com/docs/build/nlu/#system-entities\n`\nconst DUCKLING_ENTITIES = [\n  'amountOfMoney',\n  'distance',\n  'duration',\n  'email',\n  'number',\n  'ordinal',\n  'phoneNumber',\n  'quantity',\n  'temperature',\n  'time',\n  'url',\n  'volume'\n]\n\nconst RETRY_POLICY = { backoff: 2, max_tries: 3, timeout: 500 }\nconst CACHE_PATH = path.join(process.APP_DATA_PATH || '', 'cache', 'sys_entities.json')\n\n// Further improvements:\n// 1 - Duckling entity interface\n// 3- in _extractBatch, shift results ==> don't walk whole array n times (nlog(n) vs n2)\n\nexport class DucklingEntityExtractor implements SystemEntityExtractor {\n  public static enabled: boolean\n  public static client: AxiosInstance\n\n  private static _cache: lru<string, EntityExtractionResult[]>\n  private _cacheDumpEnabled = true\n\n  constructor(private readonly logger?: sdk.Logger) {}\n\n  public static get entityTypes(): string[] {\n    return DucklingEntityExtractor.enabled ? DUCKLING_ENTITIES : []\n  }\n\n  public static async configure(enabled: boolean, url: string, logger?: sdk.Logger) {\n    if (enabled) {\n      const proxyConfig = process.PROXY ? { httpsAgent: new httpsProxyAgent(process.PROXY) } : {}\n      this.client = Axios.create({\n        baseURL: url,\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n        ...proxyConfig\n      })\n\n      try {\n        await retry(async () => {\n          const { data } = await this.client.get('/')\n          if (data !== 'quack!') {\n            return logger && logger.warn(`Bad response from Duckling server ${DISABLED_MSG}`)\n          }\n          this.enabled = true\n        }, RETRY_POLICY)\n      } catch (err) {\n        logger && logger.attachError(err).warn(`Couldn't reach the Duckling server ${DISABLED_MSG}`)\n      }\n\n      this._cache = new lru<string, EntityExtractionResult[]>({\n        length: (val: any, key: string) => sizeof(val) + sizeof(key),\n        max:\n          1000 * // n bytes per entity\n          2 * // entities per utterance\n          10 * // n utterances per intent\n          100 * // n intents per bot\n          50 // n bots\n        // ~ 100 mb\n      })\n\n      await this._restoreCache()\n    }\n  }\n\n  private static async _restoreCache() {\n    try {\n      if (await pathExists(CACHE_PATH)) {\n        const dump = await readJSON(CACHE_PATH)\n        if (dump) {\n          this._cache.load(dump)\n        }\n      }\n    } catch (err) {\n      console.log('could not load duckling cache')\n    }\n  }\n\n  public async extractMultiple(\n    inputs: string[],\n    lang: string,\n    useCache?: boolean\n  ): Promise<EntityExtractionResult[][]> {\n    if (!DucklingEntityExtractor.enabled) {\n      return Array(inputs.length).fill([])\n    }\n    const options = {\n      lang,\n      tz: this._getTz(),\n      refTime: Date.now()\n    }\n\n    const [cached, toFetch] = inputs.reduce(\n      ([cached, toFetch], input, idx) => {\n        if (useCache && DucklingEntityExtractor._cache.has(input)) {\n          const entities = DucklingEntityExtractor._cache.get(input)\n          return [[...cached, { input, idx, entities }], toFetch]\n        } else {\n          return [cached, [...toFetch, { input, idx }]]\n        }\n      },\n      [[], []]\n    ) as [KeyedItem[], KeyedItem[]]\n\n    const chunks = _.chunk(toFetch, BATCH_SIZE)\n    const batchedRes = await Promise.mapSeries(chunks, c => this._extractBatch(c, options))\n\n    return _.chain(batchedRes)\n      .flatten()\n      .concat(cached)\n      .orderBy('idx')\n      .map('entities')\n      .value()\n  }\n\n  public async extract(input: string, lang: string, useCache?: boolean): Promise<EntityExtractionResult[]> {\n    return (await this.extractMultiple([input], lang, useCache))[0]\n  }\n\n  private async _dumpCache() {\n    try {\n      await ensureFile(CACHE_PATH)\n      await writeJson(CACHE_PATH, DucklingEntityExtractor._cache.dump())\n    } catch (err) {\n      this.logger.error('could not persist system entities cache, error' + err.message)\n      this._cacheDumpEnabled = false\n    }\n  }\n\n  private _onCacheChanged = _.debounce(async () => {\n    if (this._cacheDumpEnabled) {\n      await this._dumpCache()\n    }\n  }, ms('10s'))\n\n  private async _extractBatch(batch: KeyedItem[], params: DucklingParams): Promise<KeyedItem[]> {\n    if (_.isEmpty(batch)) {\n      return []\n    }\n    // trailing JOIN_CHAR so we have n joints and n examples\n    const strBatch = batch.map(x => x.input)\n    const concatBatch = strBatch.join(JOIN_CHAR) + JOIN_CHAR\n    const batchEntities = await this._fetchDuckling(concatBatch, params)\n    const splitLocations = extractPattern(concatBatch, new RegExp(JOIN_CHAR)).map(v => v.sourceIndex)\n    const entities = splitLocations.map((to, idx, locs) => {\n      const from = idx === 0 ? 0 : locs[idx - 1] + JOIN_CHAR.length\n      return batchEntities\n        .filter(e => e.start >= from && e.end <= to)\n        .map(e => ({\n          ...e,\n          start: e.start - from,\n          end: e.end - from\n        }))\n    })\n    await this._cacheBatchResults(strBatch, entities)\n\n    return batch.map((batchItm, i) => ({ ...batchItm, entities: entities[i] }))\n  }\n\n  private async _fetchDuckling(text: string, { lang, tz, refTime }: DucklingParams): Promise<EntityExtractionResult[]> {\n    try {\n      return await retry(async () => {\n        const { data } = await DucklingEntityExtractor.client.post(\n          '/parse',\n          `lang=${lang}&text=${text}&reftime=${refTime}&tz=${tz}`\n        )\n\n        if (!_.isArray(data)) {\n          throw new Error('Unexpected response from Duckling. Expected an array.')\n        }\n\n        return data.map(this._mapDuckToEntity.bind(this))\n      }, RETRY_POLICY)\n    } catch (err) {\n      const error = err.response ? err.response.data : err\n      this.logger && this.logger.attachError(error).warn('Error extracting duckling entities')\n      return []\n    }\n  }\n\n  private async _cacheBatchResults(inputs: string[], results: EntityExtractionResult[][]) {\n    _.zip(inputs, results).forEach(([input, entities]) => {\n      DucklingEntityExtractor._cache.set(input, entities)\n    })\n\n    await this._onCacheChanged()\n  }\n\n  private _getTz(): string {\n    return Intl.DateTimeFormat().resolvedOptions().timeZone\n  }\n\n  private _mapDuckToEntity(duckEnt): EntityExtractionResult {\n    const dimensionData = this._getUnitAndValue(duckEnt.dim, duckEnt.value)\n    return {\n      confidence: 1,\n      start: duckEnt.start,\n      end: duckEnt.end,\n      type: duckEnt.dim,\n      value: dimensionData.value,\n      metadata: {\n        extractor: 'system',\n        source: duckEnt.body,\n        entityId: `system.${duckEnt.dim}`,\n        unit: dimensionData.unit\n      }\n    } as EntityExtractionResult\n  }\n\n  private _getUnitAndValue(dimension, rawVal) {\n    switch (dimension) {\n      case 'duration':\n        return rawVal.normalized\n      case 'time':\n        return {\n          value: rawVal.value,\n          unit: rawVal.grain\n        }\n      default:\n        return {\n          value: rawVal.value,\n          unit: rawVal.unit\n        }\n    }\n  }\n}\n"]}
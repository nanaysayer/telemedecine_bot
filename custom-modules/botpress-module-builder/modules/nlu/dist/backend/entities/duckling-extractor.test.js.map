{"version":3,"sources":["entities/duckling-extractor.test.ts"],"names":["FakeCache","get","key","_cache","set","val","has","load","dump","jest","mock","describe","duck","mockedFetch","beforeAll","DucklingEntityExtractor","spyOn","beforeEach","configure","enabled","afterEach","mockReset","test","examples","res","extractMultiple","expect","not","toHaveBeenCalled","forEach","r","toEqual","mockResolvedValue","calls","toContain","JOIN_CHAR","length","extractedEntities","start","end","mockResolvedValueOnce","ex","toHaveBeenCalledTimes","cachedEx","cachedExRes","firstCall","secondCall"],"mappings":"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","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import 'bluebird-global'\nimport _ from 'lodash'\n\nimport { DucklingEntityExtractor, JOIN_CHAR } from './duckling_extractor'\n\nclass FakeCache {\n  private _cache = {}\n  get(key) {\n    return this._cache[key]\n  }\n  set(key, val) {\n    this._cache[key] = val\n  }\n  has(key) {\n    return !!this._cache[key]\n  }\n  load() {}\n  dump() {}\n}\n\njest.mock(\n  'lru-cache',\n  () =>\n    function() {\n      return new FakeCache()\n    }\n)\n\ndescribe('Extract Multiple', () => {\n  let duck: DucklingEntityExtractor\n  let mockedFetch: jest.SpyInstance\n  beforeAll(() => {\n    duck = new DucklingEntityExtractor()\n    mockedFetch = jest.spyOn(duck, '_fetchDuckling')\n  })\n\n  beforeEach(async () => {\n    await DucklingEntityExtractor.configure(true, '') // reset mocked cache\n    DucklingEntityExtractor.enabled = true // mock axios to remove this line\n  })\n\n  afterEach(() => {\n    mockedFetch.mockReset()\n  })\n\n  test('When disabled returns empty array for each input', async () => {\n    DucklingEntityExtractor.enabled = false\n    const examples = ['this is one', 'this is two']\n    const res = await duck.extractMultiple(examples, 'en')\n    expect(mockedFetch).not.toHaveBeenCalled()\n    res.forEach(r => {\n      expect(r).toEqual([])\n    })\n  })\n\n  test('calls extract with join char', async () => {\n    const examples = ['this is one', 'this is two']\n    mockedFetch.mockResolvedValue([])\n    await duck.extractMultiple(examples, 'en')\n    expect(mockedFetch.mock.calls[0][0]).toContain(JOIN_CHAR)\n  })\n\n  test('returns as many results as n examples with single batch', async () => {\n    mockedFetch.mockResolvedValue([])\n    const examples = ['this is one', 'this is two', 'this is three']\n    const res = await duck.extractMultiple(examples, 'en')\n    expect(res.length).toEqual(examples.length)\n  })\n\n  test('returns as many results as n examples with multiple batches', async () => {\n    mockedFetch.mockResolvedValue([])\n    const examples = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '11', '12', '13', '14']\n    const res = await duck.extractMultiple(examples, 'en')\n    expect(res.length).toEqual(examples.length)\n  })\n\n  test('good results for each examples', async () => {\n    const examples = ['one two three', 'nothing', 'now and then']\n    // expected        0123456789012____0123456____012345678901\n    // with JoinChar   one two three::_::nothing::_::now and then\n    //                 012345678901234567890123456789012345678901\n    const extractedEntities = [\n      { start: 0, end: 3 },\n      { start: 4, end: 7 },\n      { start: 8, end: 13 },\n      { start: 30, end: 33 }\n    ]\n\n    mockedFetch.mockResolvedValueOnce(extractedEntities)\n    const res = await duck.extractMultiple(examples, 'en')\n    expect(res[0].length).toEqual(3)\n    expect(res[0][0].start).toEqual(0)\n    expect(res[0][0].end).toEqual(3)\n    expect(res[0][1].start).toEqual(4)\n    expect(res[0][1].end).toEqual(7)\n    expect(res[0][2].start).toEqual(8)\n    expect(res[0][2].end).toEqual(13)\n    expect(res[1].length).toEqual(0)\n    expect(res[2].length).toEqual(1)\n    expect(res[2][0].end).toEqual(3)\n    expect(res[2][0].start).toEqual(0)\n  })\n\n  test('cache is not used when useCache is false', async () => {\n    const ex = 'one two three'\n    mockedFetch.mockResolvedValue([])\n\n    await duck.extractMultiple([ex], 'en', false)\n    await duck.extractMultiple([ex], 'en', false)\n\n    expect(mockedFetch).toHaveBeenCalledTimes(2)\n    // make sure ex isn't removed from 2nd call\n    expect(mockedFetch.mock.calls[0][0]).toEqual(mockedFetch.mock.calls[1][0])\n  })\n\n  test('cached results are returned in the same order', async () => {\n    const cachedEx = 'one two three'\n    const cachedExRes = [{ start: 0, end: 3 }]\n\n    mockedFetch.mockResolvedValueOnce(cachedExRes)\n    mockedFetch.mockResolvedValue([])\n\n    const firstCall = await duck.extractMultiple([cachedEx], 'en', true)\n    const secondCall = await duck.extractMultiple([cachedEx, 'nothing', 'nothing 2', cachedEx], 'en', true)\n\n    expect(firstCall[0]).toEqual(cachedExRes)\n    expect(firstCall[0]).toEqual(secondCall[0])\n    expect(firstCall[0]).toEqual(secondCall[secondCall.length - 1])\n    expect(mockedFetch.mock.calls[1][0]).not.toContain(cachedEx) // 2nd call removes cached items\n  })\n})\n"]}
{"version":3,"sources":["slots/slot-featurizer.ts"],"names":["TFIDF_WEIGHTS","featToCRFsuiteAttr","prefix","feat","name","value","boost","getFeatPairs","feats0","feats1","featNames","valueOf","_","get","boostOf","map","targetFeat","f0","find","f","f1","Math","max","filter","identity","getWordWeight","token","tierce","tfidf","MAX_TFIDF","MIN_TFIDF","getClusterFeat","cluster","getWordFeat","isPredict","isEmpty","entities","isWord","toString","lowerCase","getInVocabFeat","intent","inVocab","vocab","getEntitiesFeats","allowedEntities","chain","e","type","intersectionWith","thru","ents","length","entity","getSpaceFeat","isSpace","getNum","getAlpha","getSpecialChars","getIntentFeature","replace","getTokenQuartile","utterance","index","tokens","getPOSFeat","POS"],"mappings":"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","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import _ from 'lodash'\n\nimport { sanitize } from '../language/sanitizer'\nimport { computeQuantile } from '../tools/math'\nimport { countAlpha, countNum, countSpecial } from '../tools/strings'\nimport { MAX_TFIDF, MIN_TFIDF } from '../tools/tfidf'\nimport { Intent } from '../typings'\nimport Utterance, { UtteranceToken } from '../utterance/utterance'\n\ntype FeatureValue = string | number | boolean\n\nexport interface CRFFeature {\n  name: string\n  value: FeatureValue\n  boost?: number\n}\n\nconst TFIDF_WEIGHTS = ['low', 'medium', 'high']\n\nexport function featToCRFsuiteAttr(prefix: string, feat: CRFFeature): string {\n  return `${prefix}${feat.name}=${feat.value}:${feat.boost || 1}`\n}\n\nexport function getFeatPairs(feats0: CRFFeature[], feats1: CRFFeature[], featNames: string[]): CRFFeature[] {\n  const valueOf = (feat: CRFFeature | undefined): FeatureValue => _.get(feat, 'value', 'null')\n  const boostOf = (feat: CRFFeature | undefined): number => _.get(feat, 'boost', 1)\n\n  return featNames\n    .map(targetFeat => {\n      const f0 = feats0.find(f => f.name === targetFeat)\n      const f1 = feats1.find(f => f.name === targetFeat)\n\n      if (f0 || f1) {\n        return {\n          name: targetFeat,\n          value: `${valueOf(f0)}|${valueOf(f1)}`,\n          boost: Math.max(boostOf(f0), boostOf(f1))\n        }\n      }\n    })\n    .filter(_.identity)\n}\n\nexport function getWordWeight(token: UtteranceToken): CRFFeature {\n  const tierce = computeQuantile(3, token.tfidf, MAX_TFIDF, MIN_TFIDF)\n  const value = TFIDF_WEIGHTS[tierce - 1]\n\n  return {\n    name: 'weight',\n    value\n  }\n}\n\nexport function getClusterFeat(token: UtteranceToken): CRFFeature {\n  return {\n    name: 'cluster',\n    value: token.cluster\n  }\n}\n\nexport function getWordFeat(token: UtteranceToken, isPredict: boolean): CRFFeature | undefined {\n  const boost = isPredict ? 3 : 1\n\n  if (_.isEmpty(token.entities) && token.isWord) {\n    return {\n      name: 'word',\n      value: token.toString({ lowerCase: true }),\n      boost\n    }\n  }\n}\n\nexport function getInVocabFeat(token: UtteranceToken, intent: Intent<Utterance>): CRFFeature {\n  const inVocab = !!intent.vocab[token.toString({ lowerCase: true })]\n  return {\n    name: 'inVocab',\n    value: inVocab\n  }\n}\n\nexport function getEntitiesFeats(token: UtteranceToken, allowedEntities: string[], isPredict: boolean): CRFFeature[] {\n  const boost = isPredict ? 3 : 1\n\n  return _.chain(token.entities)\n    .map(e => e.type)\n    .intersectionWith(allowedEntities)\n    .thru(ents => (ents.length ? ents : ['none']))\n    .map(entity => ({\n      name: 'entity',\n      value: entity,\n      boost\n    }))\n    .value()\n}\n\nexport function getSpaceFeat(token: UtteranceToken | undefined): CRFFeature {\n  return {\n    name: 'space',\n    value: token && token.isSpace\n  }\n}\n\nexport function getNum(token: UtteranceToken): CRFFeature {\n  return {\n    name: 'num',\n    value: countNum(token.value)\n  }\n}\n\nexport function getAlpha(token: UtteranceToken): CRFFeature {\n  return {\n    name: 'alpha',\n    value: countAlpha(token.value)\n  }\n}\n\nexport function getSpecialChars(token: UtteranceToken): CRFFeature {\n  return {\n    name: 'special',\n    value: countSpecial(token.value)\n  }\n}\n\nexport function getIntentFeature(intent: Intent<Utterance>): CRFFeature {\n  return {\n    name: 'intent',\n    value: sanitize(intent.name.replace(/\\s/g, '')),\n    boost: 100\n  }\n}\n\nexport function getTokenQuartile(utterance: Utterance, token: UtteranceToken): CRFFeature {\n  return {\n    name: 'quartile',\n    value: computeQuantile(4, token.index + 1, utterance.tokens.length)\n  }\n}\n\nexport function getPOSFeat(token: UtteranceToken): CRFFeature {\n  return {\n    name: 'POS',\n    value: token.POS\n  }\n}\n"]}
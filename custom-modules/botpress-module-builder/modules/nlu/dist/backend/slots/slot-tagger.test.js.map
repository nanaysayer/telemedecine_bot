{"version":3,"sources":["slots/slot-tagger.test.ts"],"names":["describe","test","u","labels","expect","length","toEqual","tokens","filter","t","isSpace","forEach","l","tagSlot","name","source","tagEntity","value","type","idx","includes","out","tag","BIO","OUT","probability","tagResults","testIntent","slot_entities","beforeEach","Array","fill","splice","BEGINNING","INSIDE","extractedSlots","slot","start","end"],"mappings":"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","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import { BIO, ExtractedEntity, ExtractedSlot, Intent } from '../typings'\nimport Utterance, { makeTestUtterance } from '../utterance/utterance'\n\nimport { labelizeUtterance, makeExtractedSlots, TagResult } from './slot-tagger'\n\ndescribe('Slot tagger labels for utterance', () => {\n  test('without slots', () => {\n    const u = makeTestUtterance('My name is Heisenberg and I am the danger')\n    const labels = labelizeUtterance(u)\n\n    expect(labels.length).toEqual(u.tokens.filter(t => !t.isSpace).length)\n    labels.forEach(l => expect(l).toEqual('o'))\n  })\n\n  test('with slots', () => {\n    const u = makeTestUtterance('Careful my friend Alex W is one of us')\n    //                           0123456789012345678901234567890123456\n    //                           ________---------_-------__________--\n\n    u.tagSlot({ name: 'listener', source: 'my friend' } as ExtractedSlot, 8, 17)\n    u.tagEntity({ value: 'my friend', type: 'friend' } as ExtractedEntity, 8, 17)\n    u.tagSlot({ name: 'person', source: 'Alex W' } as ExtractedSlot, 18, 24)\n    u.tagSlot({ name: 'group', source: 'us' } as ExtractedSlot, 35, 37)\n\n    const labels = labelizeUtterance(u)\n\n    expect(labels.length).toEqual(u.tokens.filter(t => !t.isSpace).length)\n    expect(labels[1]).toEqual('B-listener')\n    expect(labels[2]).toEqual('I-listener')\n\n    expect(labels[3]).toEqual('B-person/any')\n    expect(labels[4]).toEqual('I-person/any')\n\n    expect(labels[8]).toEqual('B-group/any')\n\n    labels\n      .filter((l, idx) => ![1, 2, 3, 4, 8].includes(idx))\n      .forEach(l => {\n        expect(l).toEqual('o')\n      })\n  })\n})\n\ndescribe('makeExtractedSlots', () => {\n  let u: Utterance\n  const out: TagResult = { name: '', tag: BIO.OUT, probability: 1 }\n  let tagResults: TagResult[]\n  const testIntent = {\n    slot_entities: ['CS_Field']\n  } as Intent<Utterance>\n\n  beforeEach(() => {\n    u = makeTestUtterance('No one is safe big AI is watching')\n    //                     0123456789012345678901234567890123\n    tagResults = new Array(u.tokens.filter(t => !t.isSpace).length).fill(out)\n  })\n\n  test('consecutive slots token combined properly', () => {\n    tagResults.splice(\n      4,\n      2,\n      { name: 'threath', probability: 1, tag: BIO.BEGINNING },\n      { name: 'threath', probability: 1, tag: BIO.INSIDE }\n    )\n\n    const extractedSlots = makeExtractedSlots(testIntent, u, tagResults)\n\n    expect(extractedSlots.length).toEqual(1)\n    expect(extractedSlots[0].slot.source).toEqual('big AI')\n    expect(extractedSlots[0].slot.value).toEqual('big AI')\n    expect(extractedSlots[0].start).toEqual(15)\n    expect(extractedSlots[0].end).toEqual(21)\n  })\n\n  test('consecutive different slots are not combined', () => {\n    tagResults.splice(\n      4,\n      4,\n      { name: 'threath', probability: 1, tag: BIO.BEGINNING },\n      { name: 'threath', probability: 1, tag: BIO.INSIDE },\n      { name: 'action', probability: 1, tag: BIO.BEGINNING },\n      { name: 'action', probability: 1, tag: BIO.INSIDE }\n    )\n\n    const extractedSlots = makeExtractedSlots(testIntent, u, tagResults)\n\n    expect(extractedSlots.length).toEqual(2)\n    expect(extractedSlots[0].slot.source).toEqual('big AI')\n    expect(extractedSlots[0].slot.value).toEqual('big AI')\n    expect(extractedSlots[0].start).toEqual(15)\n    expect(extractedSlots[0].end).toEqual(21)\n    expect(extractedSlots[1].slot.source).toEqual('is watching')\n    expect(extractedSlots[1].slot.value).toEqual('is watching')\n    expect(extractedSlots[1].start).toEqual(22)\n    expect(extractedSlots[1].end).toEqual(33)\n  })\n\n  test('slot with associated entities adds proper value', () => {\n    tagResults.splice(\n      4,\n      2,\n      { name: 'threath', probability: 1, tag: BIO.BEGINNING },\n      { name: 'threath', probability: 1, tag: BIO.INSIDE }\n    )\n    const value = 'Artificial Intelligence'\n    u.tagEntity({ type: 'CS_Field', value } as ExtractedEntity, 19, 21)\n\n    const extractedSlots = makeExtractedSlots(testIntent, u, tagResults)\n\n    expect(extractedSlots.length).toEqual(1)\n    expect(extractedSlots[0].slot.source).toEqual('big AI')\n    expect(extractedSlots[0].slot.value).toEqual(value)\n  })\n\n  test('slot with entities but not set in intent def keeps source as value', () => {\n    tagResults.splice(\n      6,\n      2,\n      { name: 'action', probability: 1, tag: BIO.BEGINNING },\n      { name: 'action', probability: 1, tag: BIO.INSIDE }\n    )\n    u.tagEntity({ type: 'verb', value: 'to watch' } as ExtractedEntity, 25, 33)\n\n    const extractedSlots = makeExtractedSlots(testIntent, u, tagResults)\n\n    expect(extractedSlots.length).toEqual(1)\n    expect(extractedSlots[0].slot.source).toEqual('is watching')\n    expect(extractedSlots[0].slot.value).toEqual('is watching')\n  })\n})\n"]}
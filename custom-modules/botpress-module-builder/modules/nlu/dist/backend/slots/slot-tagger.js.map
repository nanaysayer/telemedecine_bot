{"version":3,"sources":["slots/slot-tagger.ts"],"names":["debugTrain","DEBUG","sub","debugExtract","CRF_TRAINER_PARAMS","c1","c2","max_iterations","MIN_SLOT_CONFIDENCE","labelizeUtterance","utterance","tokens","filter","x","isSpace","map","token","_","isEmpty","slots","BIO","OUT","slot","tag","startTokenIdx","index","BEGINNING","INSIDE","any","entities","name","predictionLabelToTagResult","prediction","label","probability","chain","mapValues","value","key","toPairs","maxBy","slice","replace","removeInvalidTagsForIntent","intent","foundInSlotDef","slot_definitions","find","s","makeExtractedSlots","slotTagResults","zip","t","tagRes","reduce","combined","last","shouldConcatWithPrev","get","newEnd","offset","length","newSource","toString","start","source","end","confidence","extracted","associatedEntityInRange","e","startPos","endPos","includes","slot_entities","type","SlotTagger","constructor","mlToolkit","load","crf","_crfModelFn","tmp","tmpNameSync","fs","writeFileSync","_readTagger","_crfTagger","CRF","createTagger","open","train","intents","elements","utterances","features","tokenSliceFeatures","bind","labels","push","trainer","createTrainer","serialized","Promise","fromCallback","cb","readFile","isPredict","previous","next","prevFeats","_getTokenFeatures","f","reverse","current","nextFeats","prevPairs","featurizer","getFeatPairs","nextPairs","intentFeat","getIntentFeature","bos","isBOS","eos","isEOS","featToCRFsuiteAttr","flatten","feat","idx","getTokenQuartile","getClusterFeat","getWordWeight","getInVocabFeat","getSpaceFeat","getAlpha","getNum","getSpecialChars","getWordFeat","getPOSFeat","getEntitiesFeats","identity","getSequenceFeatures","extract","predictions","marginal","thru","tagRess"],"mappings":"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","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport fs from 'fs'\nimport _ from 'lodash'\nimport tmp from 'tmp'\n\nimport { BIO, Intent, SlotExtractionResult, Tag } from '../typings'\nimport Utterance, { UtteranceToken } from '../utterance/utterance'\n\nimport * as featurizer from './slot-featurizer'\n\nexport interface TagResult {\n  tag: Tag | string\n  name: string\n  probability: number\n}\n\nconst debugTrain = DEBUG('nlu').sub('training')\nconst debugExtract = DEBUG('nlu').sub('extract')\n\nconst CRF_TRAINER_PARAMS = {\n  c1: '0.0001',\n  c2: '0.01',\n  max_iterations: '500',\n  'feature.possible_transitions': '1',\n  'feature.possible_states': '1'\n}\n\nconst MIN_SLOT_CONFIDENCE = 0.15\n\nexport function labelizeUtterance(utterance: Utterance): string[] {\n  return utterance.tokens\n    .filter(x => !x.isSpace)\n    .map(token => {\n      if (_.isEmpty(token.slots)) {\n        return BIO.OUT\n      }\n\n      const slot = token.slots[0]\n      const tag = slot.startTokenIdx === token.index ? BIO.BEGINNING : BIO.INSIDE\n      const any = _.isEmpty(token.entities) ? '/any' : ''\n\n      return `${tag}-${slot.name}${any}`\n    })\n}\n\nexport function predictionLabelToTagResult(prediction: { [label: string]: number }): TagResult {\n  const [label, probability] = _.chain(prediction)\n    .mapValues((value, key) => value + (prediction[key + '/any'] || 0))\n    .toPairs()\n    .maxBy('1')\n    .value()\n\n  return {\n    tag: label[0],\n    name: label.slice(2).replace('/any', ''),\n    probability\n  } as TagResult\n}\n\nexport function removeInvalidTagsForIntent(intent: Intent<Utterance>, tag: TagResult): TagResult {\n  if (tag.tag === BIO.OUT) {\n    return tag\n  }\n\n  const foundInSlotDef = !!intent.slot_definitions.find(s => s.name === tag.name)\n\n  if (tag.probability < MIN_SLOT_CONFIDENCE || !foundInSlotDef) {\n    tag = {\n      tag: BIO.OUT,\n      name: '',\n      probability: 1 - tag.probability // anything would do here\n    }\n  }\n\n  return tag\n}\n\nexport function makeExtractedSlots(\n  intent: Intent<Utterance>,\n  utterance: Utterance,\n  slotTagResults: TagResult[]\n): SlotExtractionResult[] {\n  return _.zip(\n    utterance.tokens.filter(t => !t.isSpace),\n    slotTagResults\n  )\n    .filter(([token, tagRes]) => tagRes.tag !== BIO.OUT)\n    .reduce((combined, [token, tagRes]) => {\n      const last = _.last(combined)\n      const shouldConcatWithPrev = tagRes.tag === BIO.INSIDE && _.get(last, 'slot.name') === tagRes.name\n\n      if (shouldConcatWithPrev) {\n        const newEnd = token.offset + token.value.length\n        const newSource = utterance.toString({ entities: 'keep-default' }).slice(last.start, newEnd) // we use slice in case tokens are space split\n        last.slot.source = newSource\n        last.slot.value = newSource\n        last.end = newEnd\n\n        return [...combined.slice(0, -1), last]\n      } else {\n        return [\n          ...combined,\n          {\n            slot: {\n              name: tagRes.name,\n              confidence: tagRes.probability,\n              source: token.toString(),\n              value: token.toString()\n            },\n            start: token.offset,\n            end: token.offset + token.value.length\n          }\n        ]\n      }\n    }, [])\n    .map((extracted: SlotExtractionResult) => {\n      const associatedEntityInRange = utterance.entities.find(\n        e =>\n          ((e.startPos <= extracted.start && e.endPos >= extracted.end) || // entity is fully within the tagged slot\n            (e.startPos >= extracted.start && e.endPos <= extracted.end)) && // slot is fully contained by an entity\n          _.includes(intent.slot_entities, e.type) // entity is part of the possible entities\n      )\n      if (associatedEntityInRange) {\n        extracted.slot.value = associatedEntityInRange.value\n      }\n      return extracted\n    })\n}\n\nexport default class SlotTagger {\n  private _crfModelFn = ''\n  private _crfTagger!: sdk.MLToolkit.CRF.Tagger\n\n  constructor(private mlToolkit: typeof sdk.MLToolkit) {}\n\n  load(crf: Buffer) {\n    this._crfModelFn = tmp.tmpNameSync()\n    fs.writeFileSync(this._crfModelFn, crf)\n    this._readTagger()\n  }\n\n  private _readTagger() {\n    this._crfTagger = this.mlToolkit.CRF.createTagger()\n    this._crfTagger.open(this._crfModelFn)\n  }\n\n  async train(intents: Intent<Utterance>[]): Promise<void> {\n    const elements: sdk.MLToolkit.CRF.DataPoint[] = []\n\n    for (const intent of intents) {\n      for (const utterance of intent.utterances) {\n        const features: string[][] = utterance.tokens\n          .filter(x => !x.isSpace)\n          .map(this.tokenSliceFeatures.bind(this, intent, utterance, false))\n        const labels = labelizeUtterance(utterance)\n\n        elements.push({ features, labels })\n      }\n    }\n\n    const trainer = this.mlToolkit.CRF.createTrainer()\n    this._crfModelFn = await trainer.train(elements, CRF_TRAINER_PARAMS)\n  }\n\n  get serialized(): Promise<Buffer> {\n    return (async () => await Promise.fromCallback(cb => fs.readFile(this._crfModelFn, cb)))() as Promise<Buffer>\n  }\n\n  private tokenSliceFeatures(\n    intent: Intent<Utterance>,\n    utterance: Utterance,\n    isPredict: boolean,\n    token: UtteranceToken\n  ): string[] {\n    const previous = utterance.tokens.filter(t => t.index < token.index && !t.isSpace).slice(-2)\n    const next = utterance.tokens.filter(t => t.index > token.index && !t.isSpace).slice(0, 1)\n\n    const prevFeats = previous.map(t =>\n      this._getTokenFeatures(intent, utterance, t, isPredict)\n        .filter(f => f.name !== 'quartile')\n        .reverse()\n    )\n    const current = this._getTokenFeatures(intent, utterance, token, isPredict).filter(f => f.name !== 'cluster')\n    const nextFeats = next.map(t =>\n      this._getTokenFeatures(intent, utterance, t, isPredict).filter(f => f.name !== 'quartile')\n    )\n\n    const prevPairs = prevFeats.length\n      ? featurizer.getFeatPairs(prevFeats[0], current, ['word', 'vocab', 'weight', 'POS'])\n      : []\n    const nextPairs = nextFeats.length\n      ? featurizer.getFeatPairs(current, nextFeats[0], ['word', 'vocab', 'weight', 'POS'])\n      : []\n\n    const intentFeat = featurizer.getIntentFeature(intent)\n    const bos = token.isBOS ? ['__BOS__'] : []\n    const eos = token.isEOS ? ['__EOS__'] : []\n\n    return [\n      ...bos,\n      featurizer.featToCRFsuiteAttr('', intentFeat),\n      ..._.flatten(prevFeats.map((feat, idx) => feat.map(featurizer.featToCRFsuiteAttr.bind(this, `w[-${idx + 1}]`)))),\n      ...current.map(featurizer.featToCRFsuiteAttr.bind(this, 'w[0]')),\n      ..._.flatten(nextFeats.map((feat, idx) => feat.map(featurizer.featToCRFsuiteAttr.bind(this, `w[${idx + 1}]`)))),\n      ...prevPairs.map(featurizer.featToCRFsuiteAttr.bind(this, 'w[-1]|w[0]')),\n      ...nextPairs.map(featurizer.featToCRFsuiteAttr.bind(this, 'w[0]|w[1]')),\n      ...eos\n    ] as string[]\n  }\n\n  private _getTokenFeatures(\n    intent: Intent<Utterance>,\n    utterance: Utterance,\n    token: UtteranceToken,\n    isPredict: boolean\n  ): featurizer.CRFFeature[] {\n    if (!token || !token.value) {\n      return []\n    }\n\n    return [\n      featurizer.getTokenQuartile(utterance, token),\n      featurizer.getClusterFeat(token),\n      featurizer.getWordWeight(token),\n      featurizer.getInVocabFeat(token, intent),\n      featurizer.getSpaceFeat(utterance.tokens[token.index - 1]),\n      featurizer.getAlpha(token),\n      featurizer.getNum(token),\n      featurizer.getSpecialChars(token),\n      featurizer.getWordFeat(token, isPredict),\n      featurizer.getPOSFeat(token),\n      ...featurizer.getEntitiesFeats(token, intent.slot_entities, isPredict)\n    ].filter(_.identity) // some features can be undefined\n  }\n\n  getSequenceFeatures(intent: Intent<Utterance>, utterance: Utterance, isPredict: boolean): string[][] {\n    return _.chain(utterance.tokens)\n      .filter(t => !t.isSpace)\n      .map(t => this.tokenSliceFeatures(intent, utterance, isPredict, t))\n      .value()\n  }\n\n  async extract(utterance: Utterance, intent: Intent<Utterance>): Promise<SlotExtractionResult[]> {\n    const features = this.getSequenceFeatures(intent, utterance, true)\n    debugExtract('vectorize', features)\n\n    const predictions = this._crfTagger.marginal(features)\n    debugExtract('slot crf predictions', predictions)\n\n    return _.chain(predictions)\n      .map(predictionLabelToTagResult)\n      .map(tagRes => removeInvalidTagsForIntent(intent, tagRes))\n      .thru(tagRess => makeExtractedSlots(intent, utterance, tagRess))\n      .value() as SlotExtractionResult[]\n  }\n}\n"]}
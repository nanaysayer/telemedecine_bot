{"version":3,"sources":["dialog-conditions/intent-ambiguous.ts"],"names":["id","label","description","displayOrder","params","ambiguityThreshold","type","defaultValue","onlyIfActive","evaluate","event","topicName","currentTopic","_","get","state","session","highestTopic","topicPreds","chain","nlu","predictions","toPairs","orderBy","x","confidence","filter","first","value","higestIntents","intents","i","map","take","length","gap"],"mappings":";;;;;;;AACA;;;;eAQe;AACbA,EAAAA,EAAE,EAAE,qBADS;AAEbC,EAAAA,KAAK,EAAE,kCAFM;AAGbC,EAAAA,WAAW,EAAG,uFAHD;AAIbC,EAAAA,YAAY,EAAE,CAJD;AAKbC,EAAAA,MAAM,EAAE;AACNC,IAAAA,kBAAkB,EAAE;AAAEJ,MAAAA,KAAK,EAAE,qBAAT;AAAgCK,MAAAA,IAAI,EAAE,QAAtC;AAAgDC,MAAAA,YAAY,EAAE;AAA9D,KADd;AAENC,IAAAA,YAAY,EAAE;AAAEP,MAAAA,KAAK,EAAE,iCAAT;AAA4CK,MAAAA,IAAI,EAAE,SAAlD;AAA6DC,MAAAA,YAAY,EAAE;AAA3E;AAFR,GALK;AASbE,EAAAA,QAAQ,EAAE,CAACC,KAAD,EAA0B;AAAEL,IAAAA,kBAAF;AAAsBG,IAAAA,YAAtB;AAAoCG,IAAAA;AAApC,GAA1B,KAAsF;AAAA;;AAC9F,UAAMC,YAAY,GAAGC,gBAAEC,GAAF,CAAMJ,KAAK,CAACK,KAAN,CAAYC,OAAlB,EAA2B,uBAA3B,CAArB;;AAEA,QAAIR,YAAY,IAAII,YAAY,KAAKD,SAArC,EAAgD;AAC9C,aAAO,CAAP;AACD;;AAED,UAAM,CAACM,YAAD,EAAeC,UAAf,IACJL,gBAAEM,KAAF,SAAQT,KAAR,aAAQA,KAAR,qCAAQA,KAAK,CAAEU,GAAf,+CAAQ,WAAYC,WAApB,uCAAmC,EAAnC,EACGC,OADH,GAEGC,OAFH,CAEWC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAKC,UAFrB,EAEiC,MAFjC,EAGGC,MAHH,CAGUF,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,KAAS,KAHxB,EAIGG,KAJH,GAKGC,KALH,MAKc,EANhB;;AAQA,QAAI,CAACjB,SAAD,IAAc,CAACM,YAAf,IAA+BN,SAAS,KAAKM,YAAjD,EAA+D;AAC7D;AACA,aAAO,CAAP;AACD;;AAED,UAAMY,aAAa,GAAGhB,gBAAEM,KAAF,CAAQD,UAAU,CAACY,OAAnB,EACnBJ,MADmB,CACZK,CAAC,IAAIA,CAAC,CAAC9B,KAAF,KAAY,MADL,EAEnBsB,OAFmB,CAEX,YAFW,EAEG,MAFH,EAGnBS,GAHmB,CAGf,YAHe,EAInBC,IAJmB,CAId,CAJc,EAKnBL,KALmB,EAAtB;;AAOA,QAAIC,aAAa,CAACK,MAAd,IAAwB,CAA5B,EAA+B;AAC7B;AACA,aAAO,CAAP;AACD;;AAED,UAAMC,GAAG,GAAGN,aAAa,CAAC,CAAD,CAAb,GAAmBA,aAAa,CAAC,CAAD,CAA5C;;AACA,QAAIM,GAAG,GAAG9B,kBAAV,EAA8B;AAC5B,aAAO,CAAP;AACD;;AAED,WAAO,IAAI8B,GAAG,GAAG9B,kBAAjB;AACD;AA/CY,C","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import { Condition, IO } from 'botpress/sdk'\nimport _ from 'lodash'\n\ninterface Params {\n  ambiguityThreshold: number\n  onlyIfActive: boolean\n  topicName: string\n}\n\nexport default {\n  id: 'intent_is_ambiguous',\n  label: 'Intent is ambiguous within topic',\n  description: `The users's intention is can be interpreted as multiple intents within the same topic`,\n  displayOrder: 1,\n  params: {\n    ambiguityThreshold: { label: 'Ambiguity threshold', type: 'number', defaultValue: 0.1 },\n    onlyIfActive: { label: 'Only if topic is already active', type: 'boolean', defaultValue: false }\n  },\n  evaluate: (event: IO.IncomingEvent, { ambiguityThreshold, onlyIfActive, topicName }: Params) => {\n    const currentTopic = _.get(event.state.session, 'nduContext.last_topic')\n\n    if (onlyIfActive && currentTopic !== topicName) {\n      return 0\n    }\n\n    const [highestTopic, topicPreds] =\n      _.chain(event?.nlu?.predictions ?? {})\n        .toPairs()\n        .orderBy(x => x[1].confidence, 'desc')\n        .filter(x => x[0] !== 'oos')\n        .first()\n        .value() || []\n\n    if (!topicName || !highestTopic || topicName !== highestTopic) {\n      // consider intent confusion only when predicted topic is same as current topic\n      return 0\n    }\n\n    const higestIntents = _.chain(topicPreds.intents)\n      .filter(i => i.label !== 'none')\n      .orderBy('confidence', 'desc')\n      .map('confidence')\n      .take(2)\n      .value()\n\n    if (higestIntents.length <= 1) {\n      // no confusion with a single or no intent(s)\n      return 0\n    }\n\n    const gap = higestIntents[0] - higestIntents[1]\n    if (gap > ambiguityThreshold) {\n      return 0\n    }\n\n    return 1 - gap / ambiguityThreshold\n  }\n} as Condition\n"]}
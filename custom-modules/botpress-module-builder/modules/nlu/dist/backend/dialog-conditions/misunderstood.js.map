{"version":3,"sources":["dialog-conditions/misunderstood.ts"],"names":["id","label","description","displayOrder","params","maxConfidence","type","defaultValue","required","evaluate","event","oos","_","get","highestCtx","chain","nlu","predictions","toPairs","orderBy","x","confidence","map","filter","first","value","highest_none","find","max","Math"],"mappings":";;;;;;;AACA;;;;eAEe;AACbA,EAAAA,EAAE,EAAE,2BADS;AAEbC,EAAAA,KAAK,EAAE,6CAFM;AAGbC,EAAAA,WAAW,EAAG,uCAHD;AAIbC,EAAAA,YAAY,EAAE,CAJD;AAKbC,EAAAA,MAAM,EAAE;AACNC,IAAAA,aAAa,EAAE;AACbJ,MAAAA,KAAK,EAAE,kCADM;AAEbK,MAAAA,IAAI,EAAE,QAFO;AAGbC,MAAAA,YAAY,EAAE,GAHD;AAIbC,MAAAA,QAAQ,EAAE;AAJG;AADT,GALK;AAabC,EAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQN,MAAR,KAAmB;AAAA;;AAC3B,UAAMO,GAAG,GAAGC,gBAAEC,GAAF,CAAMH,KAAN,EAAc,gCAAd,EAA+C,CAA/C,CAAZ;;AACA,UAAMI,UAAU,GAAGF,gBAAEG,KAAF,SAAQL,KAAR,aAAQA,KAAR,qCAAQA,KAAK,CAAEM,GAAf,+CAAQ,WAAYC,WAApB,uCAAmC,EAAnC,EAChBC,OADgB,GAEhBC,OAFgB,CAERC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAKC,UAFF,EAEc,MAFd,EAGhBC,GAHgB,CAGZF,CAAC,IAAIA,CAAC,CAAC,CAAD,CAHM,EAIhBG,MAJgB,CAITH,CAAC,IAAIA,CAAC,KAAK,KAJF,EAKhBI,KALgB,GAMhBC,KANgB,EAAnB;;AAQA,UAAMC,YAAY,GAAGd,gBAAEG,KAAF,CAAQL,KAAR,EAClBG,GADkB,CACb,mBAAkBC,UAAW,UADhB,EAC2B,EAD3B,EAElBa,IAFkB,CAEbP,CAAC,IAAIA,CAAC,CAACnB,KAAF,KAAY,MAFJ,EAGlBY,GAHkB,CAGd,YAHc,EAGA,CAHA,EAIlBY,KAJkB,EAArB;;AAMA,UAAMG,GAAG,GAAGC,IAAI,CAACD,GAAL,CAASF,YAAT,EAAuBf,GAAvB,CAAZ;AACA,WAAOP,MAAM,CAACC,aAAP,GAAuBuB,GAAG,IAAIxB,MAAM,CAACC,aAAP,GAAuB,GAA3B,CAA1B,GAA4DuB,GAAnE;AACD;AA/BY,C","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import { Condition } from 'botpress/sdk'\nimport _ from 'lodash'\n\nexport default {\n  id: 'user_intent_misunderstood',\n  label: 'Users says something misunderstood (intent)',\n  description: `The user's intention is misunderstood`,\n  displayOrder: 3,\n  params: {\n    maxConfidence: {\n      label: 'Maximum reachable confidence (%)',\n      type: 'number',\n      defaultValue: 100,\n      required: true\n    }\n  },\n  evaluate: (event, params) => {\n    const oos = _.get(event, `nlu.predictions.oos.confidence`, 0)\n    const highestCtx = _.chain(event?.nlu?.predictions ?? {})\n      .toPairs()\n      .orderBy(x => x[1].confidence, 'desc')\n      .map(x => x[0])\n      .filter(x => x !== 'oos')\n      .first()\n      .value()\n\n    const highest_none = _.chain(event)\n      .get(`nlu.predictions.${highestCtx}.intents`, [])\n      .find(x => x.label === 'none')\n      .get('confidence', 0)\n      .value()\n\n    const max = Math.max(highest_none, oos)\n    return params.maxConfidence ? max * (params.maxConfidence / 100) : max\n  }\n} as Condition\n"]}
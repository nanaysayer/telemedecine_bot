{"version":3,"sources":["dialog-conditions/extracted-entity.ts"],"names":["id","label","description","params","type","required","list","endpoint","valueField","labelField","comparison","items","value","expectedValue","evaluate","event","entity","nlu","entities","find","x","entityValue","data"],"mappings":";;;;;;eAGe;AACbA,EAAAA,EAAE,EAAE,kBADS;AAEbC,EAAAA,KAAK,EAAG,iDAFK;AAGbC,EAAAA,WAAW,EAAG,oCAHD;AAIbC,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAE;AACJC,MAAAA,QAAQ,EAAE,IADN;AAEJJ,MAAAA,KAAK,EAAE,2BAFH;AAGJG,MAAAA,IAAI,EAAE,MAHF;AAIJE,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAE,+BADN;AAEJC,QAAAA,UAAU,EAAE,OAFR;AAGJC,QAAAA,UAAU,EAAE;AAHR;AAJF,KADA;AAWNC,IAAAA,UAAU,EAAE;AACVT,MAAAA,KAAK,EAAE,mBADG;AAEVG,MAAAA,IAAI,EAAE,MAFI;AAGVE,MAAAA,IAAI,EAAE;AACJK,QAAAA,KAAK,EAAE,CACL;AAAEV,UAAAA,KAAK,EAAE,MAAT;AAAiBW,UAAAA,KAAK,EAAE;AAAxB,SADK,EAEL;AAAEX,UAAAA,KAAK,EAAE,OAAT;AAAkBW,UAAAA,KAAK,EAAE;AAAzB,SAFK,EAGL;AAAEX,UAAAA,KAAK,EAAE,WAAT;AAAsBW,UAAAA,KAAK,EAAE;AAA7B,SAHK,EAIL;AAAEX,UAAAA,KAAK,EAAE,aAAT;AAAwBW,UAAAA,KAAK,EAAE;AAA/B,SAJK,EAKL;AAAEX,UAAAA,KAAK,EAAE,WAAT;AAAsBW,UAAAA,KAAK,EAAE;AAA7B,SALK;AADH;AAHI,KAXN;AAwBNC,IAAAA,aAAa,EAAE;AAAEZ,MAAAA,KAAK,EAAE,gBAAT;AAA2BG,MAAAA,IAAI,EAAE;AAAjC;AAxBT,GAJK;AA8BbU,EAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQZ,MAAR,KAAmB;AAAA;;AAC3B,UAAM;AAAEC,MAAAA,IAAF;AAAQM,MAAAA,UAAR;AAAoBG,MAAAA;AAApB,QAAsCV,MAA5C;AACA,UAAMa,MAAM,iBAAGD,KAAK,CAACE,GAAT,sEAAG,WAAWC,QAAd,wDAAG,oBAAqBC,IAArB,CAA0BC,CAAC,IAAIA,CAAC,CAAChB,IAAF,KAAWA,IAA1C,CAAf;;AAEA,QAAI,CAACY,MAAL,EAAa;AACX,aAAO,CAAP;AACD,KAFD,MAEO,IAAI,CAACN,UAAD,IAAe,CAACG,aAAhB,IAAiCH,UAAU,KAAK,MAApD,EAA4D;AACjE,aAAO,CAAP;AACD;;AAED,UAAMW,WAAW,mBAAGL,MAAM,CAACM,IAAV,iDAAG,aAAaV,KAAjC;AAEA,WAAQF,UAAU,KAAK,OAAf,IAA0BW,WAAW,KAAKR,aAA3C,IACJH,UAAU,KAAK,UAAf,IAA6BW,WAAW,KAAKR,aADzC,IAEJH,UAAU,KAAK,YAAf,IAA+BW,WAAW,GAAGR,aAFzC,IAGJH,UAAU,KAAK,UAAf,IAA6BW,WAAW,GAAGR,aAHvC,GAIH,CAJG,GAKH,CALJ;AAMD;AAhDY,C","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import { Condition } from 'botpress/sdk'\nimport _ from 'lodash'\n\nexport default {\n  id: 'extracted_entity',\n  label: `An entity was extracted from the user's message`,\n  description: `Entity {type} {comparison} {value}`,\n  params: {\n    type: {\n      required: true,\n      label: 'Select the type of entity',\n      type: 'list',\n      list: {\n        endpoint: 'BOT_API_PATH/mod/nlu/entities',\n        valueField: 'label',\n        labelField: 'label'\n      }\n    },\n    comparison: {\n      label: 'Comparison method',\n      type: 'list',\n      list: {\n        items: [\n          { label: 'None', value: 'none' },\n          { label: 'Equal', value: 'equal' },\n          { label: 'Not equal', value: 'notEqual' },\n          { label: 'Bigger than', value: 'biggerThan' },\n          { label: 'Less than', value: 'lessThan' }\n        ]\n      }\n    },\n    expectedValue: { label: 'Expected value', type: 'string' }\n  },\n  evaluate: (event, params) => {\n    const { type, comparison, expectedValue } = params\n    const entity = event.nlu?.entities?.find(x => x.type === type)\n\n    if (!entity) {\n      return 0\n    } else if (!comparison || !expectedValue || comparison === 'none') {\n      return 1\n    }\n\n    const entityValue = entity.data?.value\n\n    return (comparison === 'equal' && entityValue === expectedValue) ||\n      (comparison === 'notEqual' && entityValue !== expectedValue) ||\n      (comparison === 'biggerThan' && entityValue > expectedValue) ||\n      (comparison === 'lessThan' && entityValue < expectedValue)\n      ? 1\n      : 0\n  }\n} as Condition\n"]}
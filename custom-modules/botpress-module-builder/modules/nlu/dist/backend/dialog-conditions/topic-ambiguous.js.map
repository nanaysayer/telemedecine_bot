{"version":3,"sources":["dialog-conditions/topic-ambiguous.ts"],"names":["id","label","description","displayOrder","params","ambiguityThreshold","type","defaultValue","evaluate","event","highestTopics","_","chain","nlu","predictions","toPairs","filter","x","orderBy","map","take","value","length","gap"],"mappings":";;;;;;;AACA;;;;eAMe;AACbA,EAAAA,EAAE,EAAE,oBADS;AAEbC,EAAAA,KAAK,EAAE,+BAFM;AAGbC,EAAAA,WAAW,EAAE,gDAHA;AAIbC,EAAAA,YAAY,EAAE,CAJD;AAKbC,EAAAA,MAAM,EAAE;AACNC,IAAAA,kBAAkB,EAAE;AAAEJ,MAAAA,KAAK,EAAE,qBAAT;AAAgCK,MAAAA,IAAI,EAAE,QAAtC;AAAgDC,MAAAA,YAAY,EAAE;AAA9D;AADd,GALK;AAQbC,EAAAA,QAAQ,EAAE,CAACC,KAAD,EAA0B;AAAEJ,IAAAA;AAAF,GAA1B,KAA6D;AAAA;;AACrE,UAAMK,aAAuB,GAAGC,gBAAEC,KAAF,SAAQH,KAAR,aAAQA,KAAR,qCAAQA,KAAK,CAAEI,GAAf,+CAAQ,WAAYC,WAApB,uCAAmC,EAAnC,EAC7BC,OAD6B,GAE7BC,MAF6B,CAEtBC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,KAAS,KAFQ,EAG7BC,OAH6B,CAGrB,cAHqB,EAGL,MAHK,EAI7BC,GAJ6B,CAIzB,cAJyB,EAK7BC,IAL6B,CAKxB,CALwB,EAM7BC,KAN6B,EAAhC;;AAQA,QAAIX,aAAa,CAACY,MAAd,IAAwB,CAA5B,EAA+B;AAC7B;AACA,aAAO,CAAP;AACD;;AAED,UAAMC,GAAG,GAAGb,aAAa,CAAC,CAAD,CAAb,GAAmBA,aAAa,CAAC,CAAD,CAA5C;;AACA,QAAIa,GAAG,GAAGlB,kBAAV,EAA8B;AAC5B,aAAO,CAAP;AACD;;AAED,WAAO,IAAIkB,GAAG,GAAGlB,kBAAjB;AACD;AA5BY,C","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import { Condition, IO } from 'botpress/sdk'\nimport _ from 'lodash'\n\ninterface Params {\n  ambiguityThreshold: number\n}\n\nexport default {\n  id: 'topic_is_ambiguous',\n  label: 'Detected topics are ambiguous',\n  description: 'What user said might refer to multiple topics ',\n  displayOrder: 2,\n  params: {\n    ambiguityThreshold: { label: 'Ambiguity threshold', type: 'number', defaultValue: 0.15 }\n  },\n  evaluate: (event: IO.IncomingEvent, { ambiguityThreshold }: Params) => {\n    const highestTopics: number[] = _.chain(event?.nlu?.predictions ?? {})\n      .toPairs()\n      .filter(x => x[0] !== 'oos')\n      .orderBy('1.confidence', 'desc')\n      .map('1.confidence')\n      .take(2)\n      .value()\n\n    if (highestTopics.length <= 1) {\n      // no confusion with a single or no topic)\n      return 0\n    }\n\n    const gap = highestTopics[0] - highestTopics[1]\n    if (gap > ambiguityThreshold) {\n      return 0\n    }\n\n    return 1 - gap / ambiguityThreshold\n  }\n} as Condition\n"]}
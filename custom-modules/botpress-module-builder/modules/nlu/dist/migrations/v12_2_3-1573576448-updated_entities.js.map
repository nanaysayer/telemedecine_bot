{"version":3,"sources":["../migrations/v12_2_3-1573576448-updated_entities.ts"],"names":["migration","info","description","target","type","up","bp","metadata","migrateBotEntities","botId","bpfs","ghost","forBot","entFiles","directoryListing","fileName","entityDef","readFileAsObject","matchCase","undefined","examples","fuzzy","FuzzyTolerance","Medium","Strict","upsertFile","JSON","stringify","bots","getAllBots","Promise","map","keys","success","message"],"mappings":";;;;;;;AAEA;;AAEA,MAAMA,SAA8B,GAAG;AACrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,WAAW,EAAE,wCADT;AAEJC,IAAAA,MAAM,EAAE,KAFJ;AAGJC,IAAAA,IAAI,EAAE;AAHF,GAD+B;AAMrCC,EAAAA,EAAE,EAAE,OAAO;AAAEC,IAAAA,EAAF;AAAMC,IAAAA;AAAN,GAAP,KAAmF;AACrF,UAAMC,kBAAkB,GAAG,MAAOC,KAAP,IAAyB;AAClD,YAAMC,IAAI,GAAGJ,EAAE,CAACK,KAAH,CAASC,MAAT,CAAgBH,KAAhB,CAAb;AACA,YAAMI,QAAQ,GAAG,MAAMH,IAAI,CAACI,gBAAL,CAAsB,YAAtB,EAAoC,QAApC,CAAvB;;AACA,WAAK,MAAMC,QAAX,IAAuBF,QAAvB,EAAiC;AAC/B,cAAMG,SAAS,GAAI,MAAMN,IAAI,CAACO,gBAAL,CAAsB,YAAtB,EAAoCF,QAApC,CAAzB;;AACA,YAAIC,SAAS,CAACZ,IAAV,KAAmB,SAAvB,EAAkC;AAChC,cAAIY,SAAS,CAACE,SAAV,KAAwBC,SAA5B,EAAuC;AACrCH,YAAAA,SAAS,CAACE,SAAV,GAAsB,KAAtB;AACD;;AACD,cAAIF,SAAS,CAACI,QAAV,KAAuBD,SAA3B,EAAsC;AACpCH,YAAAA,SAAS,CAACI,QAAV,GAAqB,EAArB;AACD;AACF;;AAED,YAAIJ,SAAS,CAACZ,IAAV,KAAmB,MAAvB,EAA+B;AAC7B,cAAIY,SAAS,CAACK,KAAd,EAAqB;AACnBL,YAAAA,SAAS,CAACK,KAAV,GAAkBC,2BAAeC,MAAjC;AACD,WAFD,MAEO;AACLP,YAAAA,SAAS,CAACK,KAAV,GAAkBC,2BAAeE,MAAjC;AACD;AACF;;AAED,cAAMd,IAAI,CAACe,UAAL,CAAgB,YAAhB,EAA8BV,QAA9B,EAAwCW,IAAI,CAACC,SAAL,CAAeX,SAAf,EAA0BG,SAA1B,EAAqC,CAArC,CAAxC,CAAN;AACD;AACF,KAxBD;;AAyBA,QAAIZ,QAAQ,CAACE,KAAb,EAAoB;AAClB,YAAMD,kBAAkB,CAACD,QAAQ,CAACE,KAAV,CAAxB;AACD,KAFD,MAEO;AACL,YAAMmB,IAAI,GAAG,MAAMtB,EAAE,CAACsB,IAAH,CAAQC,UAAR,EAAnB;AACA,YAAMC,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACI,IAAL,EAAZ,EAAyBvB,KAAK,IAAID,kBAAkB,CAACC,KAAD,CAApD,CAAN;AACD;;AAED,WAAO;AAAEwB,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,OAAO,EAAE;AAA1B,KAAP;AACD;AAxCoC,CAAvC;eA2CelC,S","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\n\nimport { FuzzyTolerance } from '../backend/entities/validation'\n\nconst migration: sdk.ModuleMigration = {\n  info: {\n    description: 'Adds missing fields in custom entities',\n    target: 'bot',\n    type: 'content'\n  },\n  up: async ({ bp, metadata }: sdk.ModuleMigrationOpts): Promise<sdk.MigrationResult> => {\n    const migrateBotEntities = async (botId: string) => {\n      const bpfs = bp.ghost.forBot(botId)\n      const entFiles = await bpfs.directoryListing('./entities', '*.json')\n      for (const fileName of entFiles) {\n        const entityDef = (await bpfs.readFileAsObject('./entities', fileName)) as sdk.NLU.EntityDefinition\n        if (entityDef.type === 'pattern') {\n          if (entityDef.matchCase === undefined) {\n            entityDef.matchCase = false\n          }\n          if (entityDef.examples === undefined) {\n            entityDef.examples = []\n          }\n        }\n\n        if (entityDef.type === 'list') {\n          if (entityDef.fuzzy) {\n            entityDef.fuzzy = FuzzyTolerance.Medium\n          } else {\n            entityDef.fuzzy = FuzzyTolerance.Strict\n          }\n        }\n\n        await bpfs.upsertFile('./entities', fileName, JSON.stringify(entityDef, undefined, 2))\n      }\n    }\n    if (metadata.botId) {\n      await migrateBotEntities(metadata.botId)\n    } else {\n      const bots = await bp.bots.getAllBots()\n      await Promise.map(bots.keys(), botId => migrateBotEntities(botId))\n    }\n\n    return { success: true, message: \"Entities' fields updated successfully\" }\n  }\n}\n\nexport default migration\n"]}
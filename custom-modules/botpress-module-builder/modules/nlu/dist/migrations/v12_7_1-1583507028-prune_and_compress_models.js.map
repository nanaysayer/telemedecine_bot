{"version":3,"sources":["../migrations/v12_7_1-1583507028-prune_and_compress_models.ts"],"names":["migration","info","description","target","type","up","bp","metadata","hasChanged","migrateModels","bot","ghost","forBot","id","Promise","mapSeries","languages","lang","modNames","map","mod","model","readFileAsObject","MODELS_DIR","hash","deleteFile","err","botId","bots","getAllBots","values","success","message"],"mappings":";;;;;;;AAEA;;AAEA,MAAMA,SAA8B,GAAG;AACrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,WAAW,EAAE,+BADT;AAEJC,IAAAA,MAAM,EAAE,KAFJ;AAGJC,IAAAA,IAAI,EAAE;AAHF,GAD+B;AAMrCC,EAAAA,EAAE,EAAE,OAAO;AAAEC,IAAAA,EAAF;AAAMC,IAAAA;AAAN,GAAP,KAAmF;AACrF,QAAIC,UAAU,GAAG,KAAjB;;AACA,UAAMC,aAAa,GAAG,MAAOC,GAAP,IAA8B;AAClD,YAAMC,KAAK,GAAGL,EAAE,CAACK,KAAH,CAASC,MAAT,CAAgBF,GAAG,CAACG,EAApB,CAAd;AAEA,aAAOC,OAAO,CAACC,SAAR,CAAkBL,GAAG,CAACM,SAAtB,EAAiC,MAAMC,IAAN,IAAc;AACpD,cAAM,+BAAYN,KAAZ,EAAmBM,IAAnB,CAAN;AACA,cAAMC,QAAQ,GAAG,MAAM,qCAAkBP,KAAlB,EAAyBM,IAAzB,CAAvB;AAEA,eAAOH,OAAO,CAACK,GAAR,CAAYD,QAAZ,EAAsB,MAAME,GAAN,IAAa;AACxC,cAAI;AACF,kBAAMC,KAAY,GAAG,MAAMV,KAAK,CAACW,gBAAN,CAAuBC,wBAAvB,EAAmCH,GAAnC,CAA3B;;AACA,gBAAI,CAACC,KAAK,CAACG,IAAX,EAAiB;AACf,qBAAOb,KAAK,CAACc,UAAN,CAAiBF,wBAAjB,EAA6BH,GAA7B,CAAP,CADe,CAC0B;AAC1C;;AACDZ,YAAAA,UAAU,GAAG,IAAb;AACA,mBAAO,6BAAUG,KAAV,EAAiBU,KAAjB,EAAwBA,KAAK,CAACG,IAA9B,CAAP,CANE,CAMyC;AAC5C,WAPD,CAOE,OAAOE,GAAP,EAAY;AACZ;AACA;AACD;AACF,SAZM,CAAP;AAaD,OAjBM,CAAP;AAkBD,KArBD;;AAuBA,QAAI,CAACnB,QAAQ,CAACoB,KAAd,EAAqB;AACnB,YAAMC,IAAI,GAAG,MAAMtB,EAAE,CAACsB,IAAH,CAAQC,UAAR,EAAnB;AACA,YAAMf,OAAO,CAACK,GAAR,CAAYS,IAAI,CAACE,MAAL,EAAZ,EAA2BrB,aAA3B,CAAN;AACD;;AAED,WAAO;AACLsB,MAAAA,OAAO,EAAE,IADJ;AAELC,MAAAA,OAAO,EAAExB,UAAU,GAAG,0CAAH,GAAgD;AAF9D,KAAP;AAID;AAxCoC,CAAvC;eA2CeR,S","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\n\nimport { listModelsForLang, Model, MODELS_DIR, pruneModels, saveModel } from '../backend/model-service'\n\nconst migration: sdk.ModuleMigration = {\n  info: {\n    description: 'Prune and compress old models',\n    target: 'bot',\n    type: 'content'\n  },\n  up: async ({ bp, metadata }: sdk.ModuleMigrationOpts): Promise<sdk.MigrationResult> => {\n    let hasChanged = false\n    const migrateModels = async (bot: sdk.BotConfig) => {\n      const ghost = bp.ghost.forBot(bot.id)\n\n      return Promise.mapSeries(bot.languages, async lang => {\n        await pruneModels(ghost, lang)\n        const modNames = await listModelsForLang(ghost, lang)\n\n        return Promise.map(modNames, async mod => {\n          try {\n            const model: Model = await ghost.readFileAsObject(MODELS_DIR, mod)\n            if (!model.hash) {\n              return ghost.deleteFile(MODELS_DIR, mod) // model is really outdated\n            }\n            hasChanged = true\n            return saveModel(ghost, model, model.hash) // Triggers model compression\n          } catch (err) {\n            // model is probably an archive\n            return\n          }\n        })\n      })\n    }\n\n    if (!metadata.botId) {\n      const bots = await bp.bots.getAllBots()\n      await Promise.map(bots.values(), migrateModels)\n    }\n\n    return {\n      success: true,\n      message: hasChanged ? 'Model compression completed successfully' : 'Nothing to compress, skipping...'\n    }\n  }\n}\n\nexport default migration\n"]}
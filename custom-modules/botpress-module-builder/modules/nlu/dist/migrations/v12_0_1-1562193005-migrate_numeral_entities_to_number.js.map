{"version":3,"sources":["../migrations/v12_0_1-1562193005-migrate_numeral_entities_to_number.ts"],"names":["migration","info","description","target","type","up","bp","metadata","updateBot","botId","bpfs","ghost","forBot","intents","directoryListing","file","content","readFileAsObject","slots","map","slot","entities","length","entity","upsertFile","JSON","stringify","undefined","bots","getAllBots","Array","from","keys","success","message"],"mappings":";;;;;;AAEA,MAAMA,SAA8B,GAAG;AACrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,WAAW,EAAE,4CADT;AAEJC,IAAAA,MAAM,EAAE,KAFJ;AAGJC,IAAAA,IAAI,EAAE;AAHF,GAD+B;AAMrCC,EAAAA,EAAE,EAAE,OAAO;AAAEC,IAAAA,EAAF;AAAMC,IAAAA;AAAN,GAAP,KAAmF;AACrF,UAAMC,SAAS,GAAG,MAAOC,KAAP,IAAyB;AACzC,YAAMC,IAAI,GAAGJ,EAAE,CAACK,KAAH,CAASC,MAAT,CAAgBH,KAAhB,CAAb;AACA,YAAMI,OAAO,GAAG,MAAMH,IAAI,CAACI,gBAAL,CAAsB,WAAtB,EAAmC,QAAnC,CAAtB;;AACA,WAAK,MAAMC,IAAX,IAAmBF,OAAnB,EAA4B;AAC1B,cAAMG,OAAO,GAAI,MAAMN,IAAI,CAACO,gBAAL,CAAsB,WAAtB,EAAmCF,IAAnC,CAAvB;AACAC,QAAAA,OAAO,CAACE,KAAR,GAAgBF,OAAO,CAACE,KAAR,CAAcC,GAAd,CAAkBC,IAAI,IAAI;AACxC,cAAIA,IAAI,CAACC,QAAL,IAAiBD,IAAI,CAACC,QAAL,CAAcC,MAAnC,EAA2C;AACzCF,YAAAA,IAAI,CAACC,QAAL,GAAgBD,IAAI,CAACC,QAAL,CAAcF,GAAd,CAAkBI,MAAM,IAAKA,MAAM,KAAK,SAAX,GAAuB,QAAvB,GAAkCA,MAA/D,CAAhB;AACD;;AACD,iBAAOH,IAAP;AACD,SALe,CAAhB;AAMA,cAAMV,IAAI,CAACc,UAAL,CAAgB,WAAhB,EAA6BT,IAA7B,EAAmCU,IAAI,CAACC,SAAL,CAAeV,OAAf,EAAwBW,SAAxB,EAAmC,CAAnC,CAAnC,CAAN;AACD;AACF,KAbD;;AAeA,QAAIpB,QAAQ,CAACE,KAAb,EAAoB;AAClB,YAAMD,SAAS,CAACD,QAAQ,CAACE,KAAV,CAAf;AACD,KAFD,MAEO;AACL,YAAMmB,IAAI,GAAG,MAAMtB,EAAE,CAACsB,IAAH,CAAQC,UAAR,EAAnB;;AACA,WAAK,MAAMpB,KAAX,IAAoBqB,KAAK,CAACC,IAAN,CAAWH,IAAI,CAACI,IAAL,EAAX,CAApB,EAA6C;AAC3C,cAAMxB,SAAS,CAACC,KAAD,CAAf;AACD;AACF;;AAED,WAAO;AAAEwB,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,OAAO,EAAE;AAA1B,KAAP;AACD;AAhCoC,CAAvC;eAmCelC,S","sourceRoot":"/src/modules/nlu/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\n\nconst migration: sdk.ModuleMigration = {\n  info: {\n    description: 'Migrates slots from type numeral to number',\n    target: 'bot',\n    type: 'config'\n  },\n  up: async ({ bp, metadata }: sdk.ModuleMigrationOpts): Promise<sdk.MigrationResult> => {\n    const updateBot = async (botId: string) => {\n      const bpfs = bp.ghost.forBot(botId)\n      const intents = await bpfs.directoryListing('./intents', '*.json')\n      for (const file of intents) {\n        const content = (await bpfs.readFileAsObject('./intents', file)) as sdk.NLU.IntentDefinition\n        content.slots = content.slots.map(slot => {\n          if (slot.entities && slot.entities.length) {\n            slot.entities = slot.entities.map(entity => (entity === 'numeral' ? 'number' : entity))\n          }\n          return slot\n        })\n        await bpfs.upsertFile('./intents', file, JSON.stringify(content, undefined, 2))\n      }\n    }\n\n    if (metadata.botId) {\n      await updateBot(metadata.botId)\n    } else {\n      const bots = await bp.bots.getAllBots()\n      for (const botId of Array.from(bots.keys())) {\n        await updateBot(botId)\n      }\n    }\n\n    return { success: true, message: 'Slots migrated successfully' }\n  }\n}\n\nexport default migration\n"]}